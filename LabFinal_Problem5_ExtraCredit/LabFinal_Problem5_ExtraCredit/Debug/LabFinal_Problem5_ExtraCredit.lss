
LabFinal_Problem5_ExtraCredit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000f0c  00000fa0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000037  00800104  00800104  00000fa4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fa4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00001040  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ceb  00000000  00000000  000010b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000976  00000000  00000000  00001d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000672  00000000  00000000  00002711  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a8  00000000  00000000  00002d84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000597  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000368  00000000  00000000  000034c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000382b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_2>
   c:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__vector_3>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_22>

0000005c <LCD_SegTable>:
  5c:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
  6c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
  7c:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
  8c:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
  9c:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
  ac:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
  bc:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d4 e0       	ldi	r29, 0x04	; 4
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	ec e0       	ldi	r30, 0x0C	; 12
  dc:	ff e0       	ldi	r31, 0x0F	; 15
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a4 30       	cpi	r26, 0x04	; 4
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	a4 e0       	ldi	r26, 0x04	; 4
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	ab 33       	cpi	r26, 0x3B	; 59
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 27 02 	call	0x44e	; 0x44e <main>
  fe:	0c 94 84 07 	jmp	0xf08	; 0xf08 <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <LCD_Init>:
{ 
   uint8_t StrBuff[LCD_TEXTBUFFER_SIZE]; 

   strcpy_P(StrBuff, FlashData); 
   LCD_puts(StrBuff); 
} 
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	87 ee       	ldi	r24, 0xE7	; 231
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	2f e0       	ldi	r18, 0x0F	; 15
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
 118:	85 ee       	ldi	r24, 0xE5	; 229
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	27 eb       	ldi	r18, 0xB7	; 183
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
 122:	86 ee       	ldi	r24, 0xE6	; 230
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	27 e0       	ldi	r18, 0x07	; 7
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
 12c:	84 ee       	ldi	r24, 0xE4	; 228
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	20 ec       	ldi	r18, 0xC0	; 192
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
 136:	84 ee       	ldi	r24, 0xE4	; 228
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	24 ee       	ldi	r18, 0xE4	; 228
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	20 81       	ld	r18, Z
 142:	28 60       	ori	r18, 0x08	; 8
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
 148:	00 00       	nop
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <LCD_puts>:

void LCD_puts(uint8_t *Data) 
{ 
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	00 d0       	rcall	.+0      	; 0x156 <LCD_puts+0x6>
 156:	00 d0       	rcall	.+0      	; 0x158 <LCD_puts+0x8>
 158:	1f 92       	push	r1
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	9d 83       	std	Y+5, r25	; 0x05
 160:	8c 83       	std	Y+4, r24	; 0x04
   uint8_t LoadB; 
    
   for (LoadB = 0; LoadB < 20; LoadB++) 
 162:	19 82       	std	Y+1, r1	; 0x01
 164:	2d c0       	rjmp	.+90     	; 0x1c0 <LCD_puts+0x70>
   { 
      uint8_t CByte = *(Data++); 
 166:	8c 81       	ldd	r24, Y+4	; 0x04
 168:	9d 81       	ldd	r25, Y+5	; 0x05
 16a:	9c 01       	movw	r18, r24
 16c:	2f 5f       	subi	r18, 0xFF	; 255
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
 170:	3d 83       	std	Y+5, r19	; 0x05
 172:	2c 83       	std	Y+4, r18	; 0x04
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	8b 83       	std	Y+3, r24	; 0x03
    
      if ((CByte >= '*') && (CByte <= 'z')) 
 17a:	8b 81       	ldd	r24, Y+3	; 0x03
 17c:	8a 32       	cpi	r24, 0x2A	; 42
 17e:	90 f0       	brcs	.+36     	; 0x1a4 <LCD_puts+0x54>
 180:	8b 81       	ldd	r24, Y+3	; 0x03
 182:	8b 37       	cpi	r24, 0x7B	; 123
 184:	78 f4       	brcc	.+30     	; 0x1a4 <LCD_puts+0x54>
        TextBuffer[LoadB] = ((CByte == ' ')? 0xFF : (CByte - '*')); 
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	88 2f       	mov	r24, r24
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	2b 81       	ldd	r18, Y+3	; 0x03
 18e:	20 32       	cpi	r18, 0x20	; 32
 190:	19 f0       	breq	.+6      	; 0x198 <LCD_puts+0x48>
 192:	2b 81       	ldd	r18, Y+3	; 0x03
 194:	2a 52       	subi	r18, 0x2A	; 42
 196:	01 c0       	rjmp	.+2      	; 0x19a <LCD_puts+0x4a>
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	89 5f       	subi	r24, 0xF9	; 249
 19c:	9e 4f       	sbci	r25, 0xFE	; 254
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
 1a2:	0b c0       	rjmp	.+22     	; 0x1ba <LCD_puts+0x6a>
      else if (CByte == 0x00) 
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	88 23       	and	r24, r24
 1a8:	79 f0       	breq	.+30     	; 0x1c8 <LCD_puts+0x78>
        break; 
      else 
        TextBuffer[LoadB] = 0xFF;        
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	89 5f       	subi	r24, 0xF9	; 249
 1b2:	9e 4f       	sbci	r25, 0xFE	; 254
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18

void LCD_puts(uint8_t *Data) 
{ 
   uint8_t LoadB; 
    
   for (LoadB = 0; LoadB < 20; LoadB++) 
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	89 83       	std	Y+1, r24	; 0x01
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	84 31       	cpi	r24, 0x14	; 20
 1c4:	80 f2       	brcs	.-96     	; 0x166 <LCD_puts+0x16>
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <LCD_puts+0x7a>
      uint8_t CByte = *(Data++); 
    
      if ((CByte >= '*') && (CByte <= 'z')) 
        TextBuffer[LoadB] = ((CByte == ' ')? 0xFF : (CByte - '*')); 
      else if (CByte == 0x00) 
        break; 
 1c8:	00 00       	nop
      else 
        TextBuffer[LoadB] = 0xFF;        
   } 

   ScrollMode  = ((LoadB > 6)? TRUE : FALSE); 
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	99 81       	ldd	r25, Y+1	; 0x01
 1ce:	97 30       	cpi	r25, 0x07	; 7
 1d0:	08 f4       	brcc	.+2      	; 0x1d4 <LCD_puts+0x84>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <ScrollMode>
   ScrollCount = LCD_DELAYCOUNT_DEFAULT; 
 1d8:	8a e0       	ldi	r24, 0x0A	; 10
 1da:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ScrollCount>

   for (uint8_t Nulls = 0; Nulls < 7; Nulls++) 
 1de:	1a 82       	std	Y+2, r1	; 0x02
 1e0:	0e c0       	rjmp	.+28     	; 0x1fe <LCD_puts+0xae>
      TextBuffer[LoadB++] = 0xFF; 
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	98 0f       	add	r25, r24
 1e8:	99 83       	std	Y+1, r25	; 0x01
 1ea:	88 2f       	mov	r24, r24
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	89 5f       	subi	r24, 0xF9	; 249
 1f0:	9e 4f       	sbci	r25, 0xFE	; 254
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
   } 

   ScrollMode  = ((LoadB > 6)? TRUE : FALSE); 
   ScrollCount = LCD_DELAYCOUNT_DEFAULT; 

   for (uint8_t Nulls = 0; Nulls < 7; Nulls++) 
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	8a 83       	std	Y+2, r24	; 0x02
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	87 30       	cpi	r24, 0x07	; 7
 202:	78 f3       	brcs	.-34     	; 0x1e2 <LCD_puts+0x92>
      TextBuffer[LoadB++] = 0xFF; 
    
   TextBuffer[LoadB] = 0x00; 
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	88 2f       	mov	r24, r24
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	89 5f       	subi	r24, 0xF9	; 249
 20c:	9e 4f       	sbci	r25, 0xFE	; 254
 20e:	fc 01       	movw	r30, r24
 210:	10 82       	st	Z, r1
   StrStart   = 0; 
 212:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <StrStart>
   StrEnd     = LoadB;    
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>

   UpdateLCD  = TRUE; 
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <UpdateLCD>
} 
 222:	00 00       	nop
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <LCD_WriteChar>:

void LCD_WriteChar(uint8_t Byte, uint8_t Digit) 
{ 
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	2d 97       	sbiw	r28, 0x0d	; 13
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	8c 87       	std	Y+12, r24	; 0x0c
 24a:	6d 87       	std	Y+13, r22	; 0x0d
   uint16_t SegData  = 0x00; 
 24c:	1a 82       	std	Y+2, r1	; 0x02
 24e:	19 82       	std	Y+1, r1	; 0x01
   uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1)); 
 250:	8d 85       	ldd	r24, Y+13	; 0x0d
 252:	86 95       	lsr	r24
 254:	88 2f       	mov	r24, r24
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	8d 5d       	subi	r24, 0xDD	; 221
 25a:	9e 4f       	sbci	r25, 0xFE	; 254
 25c:	9c 83       	std	Y+4, r25	; 0x04
 25e:	8b 83       	std	Y+3, r24	; 0x03

   if (Byte != 0xFF) 
 260:	8c 85       	ldd	r24, Y+12	; 0x0c
 262:	8f 3f       	cpi	r24, 0xFF	; 255
 264:	b9 f0       	breq	.+46     	; 0x294 <LCD_WriteChar+0x60>
     SegData = pgm_read_word(&LCD_SegTable[Byte]);    
 266:	8c 85       	ldd	r24, Y+12	; 0x0c
 268:	88 2f       	mov	r24, r24
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	84 5a       	subi	r24, 0xA4	; 164
 272:	9f 4f       	sbci	r25, 0xFF	; 255
 274:	99 87       	std	Y+9, r25	; 0x09
 276:	88 87       	std	Y+8, r24	; 0x08
 278:	88 85       	ldd	r24, Y+8	; 0x08
 27a:	99 85       	ldd	r25, Y+9	; 0x09
 27c:	fc 01       	movw	r30, r24
 27e:	25 91       	lpm	r18, Z+
 280:	34 91       	lpm	r19, Z
 282:	cf 01       	movw	r24, r30
 284:	3b 87       	std	Y+11, r19	; 0x0b
 286:	2a 87       	std	Y+10, r18	; 0x0a
 288:	99 87       	std	Y+9, r25	; 0x09
 28a:	88 87       	std	Y+8, r24	; 0x08
 28c:	8a 85       	ldd	r24, Y+10	; 0x0a
 28e:	9b 85       	ldd	r25, Y+11	; 0x0b
 290:	9a 83       	std	Y+2, r25	; 0x02
 292:	89 83       	std	Y+1, r24	; 0x01

   for (uint8_t BNib = 0; BNib < 4; BNib++) 
 294:	1d 82       	std	Y+5, r1	; 0x05
 296:	31 c0       	rjmp	.+98     	; 0x2fa <LCD_WriteChar+0xc6>
   { 
      uint8_t Mask          = 0xF0; 
 298:	80 ef       	ldi	r24, 0xF0	; 240
 29a:	8e 83       	std	Y+6, r24	; 0x06
      uint8_t MaskedSegData = (SegData & 0x0000F); 
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	8f 70       	andi	r24, 0x0F	; 15
 2a0:	8f 83       	std	Y+7, r24	; 0x07
    
      if (Digit & 0x01) 
 2a2:	8d 85       	ldd	r24, Y+13	; 0x0d
 2a4:	88 2f       	mov	r24, r24
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	81 70       	andi	r24, 0x01	; 1
 2aa:	99 27       	eor	r25, r25
 2ac:	89 2b       	or	r24, r25
 2ae:	31 f0       	breq	.+12     	; 0x2bc <LCD_WriteChar+0x88>
      { 
         Mask = 0x0F; 
 2b0:	8f e0       	ldi	r24, 0x0F	; 15
 2b2:	8e 83       	std	Y+6, r24	; 0x06
         MaskedSegData <<= 4; 
 2b4:	8f 81       	ldd	r24, Y+7	; 0x07
 2b6:	82 95       	swap	r24
 2b8:	80 7f       	andi	r24, 0xF0	; 240
 2ba:	8f 83       	std	Y+7, r24	; 0x07
      } 
        
      *BuffPtr = ((*BuffPtr & Mask) | MaskedSegData); 
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	9c 81       	ldd	r25, Y+4	; 0x04
 2c0:	fc 01       	movw	r30, r24
 2c2:	90 81       	ld	r25, Z
 2c4:	8e 81       	ldd	r24, Y+6	; 0x06
 2c6:	98 23       	and	r25, r24
 2c8:	8f 81       	ldd	r24, Y+7	; 0x07
 2ca:	29 2f       	mov	r18, r25
 2cc:	28 2b       	or	r18, r24
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	9c 81       	ldd	r25, Y+4	; 0x04
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18

      SegData >>= 4; 
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	9a 81       	ldd	r25, Y+2	; 0x02
 2da:	92 95       	swap	r25
 2dc:	82 95       	swap	r24
 2de:	8f 70       	andi	r24, 0x0F	; 15
 2e0:	89 27       	eor	r24, r25
 2e2:	9f 70       	andi	r25, 0x0F	; 15
 2e4:	89 27       	eor	r24, r25
 2e6:	9a 83       	std	Y+2, r25	; 0x02
 2e8:	89 83       	std	Y+1, r24	; 0x01
      BuffPtr  += 5; 
 2ea:	8b 81       	ldd	r24, Y+3	; 0x03
 2ec:	9c 81       	ldd	r25, Y+4	; 0x04
 2ee:	05 96       	adiw	r24, 0x05	; 5
 2f0:	9c 83       	std	Y+4, r25	; 0x04
 2f2:	8b 83       	std	Y+3, r24	; 0x03
   uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1)); 

   if (Byte != 0xFF) 
     SegData = pgm_read_word(&LCD_SegTable[Byte]);    

   for (uint8_t BNib = 0; BNib < 4; BNib++) 
 2f4:	8d 81       	ldd	r24, Y+5	; 0x05
 2f6:	8f 5f       	subi	r24, 0xFF	; 255
 2f8:	8d 83       	std	Y+5, r24	; 0x05
 2fa:	8d 81       	ldd	r24, Y+5	; 0x05
 2fc:	84 30       	cpi	r24, 0x04	; 4
 2fe:	60 f2       	brcs	.-104    	; 0x298 <LCD_WriteChar+0x64>
      *BuffPtr = ((*BuffPtr & Mask) | MaskedSegData); 

      SegData >>= 4; 
      BuffPtr  += 5; 
   } 
} 
 300:	00 00       	nop
 302:	2d 96       	adiw	r28, 0x0d	; 13
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <__vector_22>:

ISR(LCD_vect) 
{ 
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	00 d0       	rcall	.+0      	; 0x33e <__vector_22+0x2a>
 33e:	1f 92       	push	r1
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
   if (ScrollMode) 
 344:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <ScrollMode>
 348:	88 23       	and	r24, r24
 34a:	69 f0       	breq	.+26     	; 0x366 <__vector_22+0x52>
   { 
      if (!(ScrollCount)) 
 34c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ScrollCount>
 350:	88 23       	and	r24, r24
 352:	21 f4       	brne	.+8      	; 0x35c <__vector_22+0x48>
        UpdateLCD = TRUE; 
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <UpdateLCD>
 35a:	05 c0       	rjmp	.+10     	; 0x366 <__vector_22+0x52>
      else 
        ScrollCount--; 
 35c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <ScrollCount>
 360:	81 50       	subi	r24, 0x01	; 1
 362:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ScrollCount>
   } 

   if (UpdateLCD) 
 366:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <UpdateLCD>
 36a:	88 23       	and	r24, r24
 36c:	09 f4       	brne	.+2      	; 0x370 <__vector_22+0x5c>
 36e:	41 c0       	rjmp	.+130    	; 0x3f2 <__vector_22+0xde>
   { 
      for (uint8_t Character = 0; Character < 6; Character++)
 370:	19 82       	std	Y+1, r1	; 0x01
 372:	2a c0       	rjmp	.+84     	; 0x3c8 <__vector_22+0xb4>
      { 
         uint8_t Byte = (StrStart + Character); 
 374:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <StrStart>
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	89 0f       	add	r24, r25
 37c:	8a 83       	std	Y+2, r24	; 0x02

         if (Byte >= StrEnd) 
 37e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 382:	9a 81       	ldd	r25, Y+2	; 0x02
 384:	98 17       	cp	r25, r24
 386:	88 f0       	brcs	.+34     	; 0x3aa <__vector_22+0x96>
           Byte = TextBuffer[Byte - StrEnd]; 
 388:	8a 81       	ldd	r24, Y+2	; 0x02
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 392:	88 2f       	mov	r24, r24
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	a9 01       	movw	r20, r18
 398:	48 1b       	sub	r20, r24
 39a:	59 0b       	sbc	r21, r25
 39c:	ca 01       	movw	r24, r20
 39e:	89 5f       	subi	r24, 0xF9	; 249
 3a0:	9e 4f       	sbci	r25, 0xFE	; 254
 3a2:	fc 01       	movw	r30, r24
 3a4:	80 81       	ld	r24, Z
 3a6:	8a 83       	std	Y+2, r24	; 0x02
 3a8:	08 c0       	rjmp	.+16     	; 0x3ba <__vector_22+0xa6>
         else 
           Byte = TextBuffer[Byte]; 
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	88 2f       	mov	r24, r24
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	89 5f       	subi	r24, 0xF9	; 249
 3b2:	9e 4f       	sbci	r25, 0xFE	; 254
 3b4:	fc 01       	movw	r30, r24
 3b6:	80 81       	ld	r24, Z
 3b8:	8a 83       	std	Y+2, r24	; 0x02
          
         LCD_WriteChar(Byte, Character); 
 3ba:	69 81       	ldd	r22, Y+1	; 0x01
 3bc:	8a 81       	ldd	r24, Y+2	; 0x02
 3be:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_WriteChar>
        ScrollCount--; 
   } 

   if (UpdateLCD) 
   { 
      for (uint8_t Character = 0; Character < 6; Character++)
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	8f 5f       	subi	r24, 0xFF	; 255
 3c6:	89 83       	std	Y+1, r24	; 0x01
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	86 30       	cpi	r24, 0x06	; 6
 3cc:	98 f2       	brcs	.-90     	; 0x374 <__vector_22+0x60>
           Byte = TextBuffer[Byte]; 
          
         LCD_WriteChar(Byte, Character); 
      } 
        
      if (StrStart++ == StrEnd) 
 3ce:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <StrStart>
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	98 0f       	add	r25, r24
 3d6:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <StrStart>
 3da:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <__data_end>
 3de:	89 17       	cp	r24, r25
 3e0:	19 f4       	brne	.+6      	; 0x3e8 <__vector_22+0xd4>
        StrStart = 1; 
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <StrStart>
        
      ScrollCount = LCD_SCROLLCOUNT_DEFAULT; 
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <ScrollCount>
      UpdateLCD = FALSE; 
 3ee:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <UpdateLCD>
   } 

   for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++) 
 3f2:	1b 82       	std	Y+3, r1	; 0x03
 3f4:	11 c0       	rjmp	.+34     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     *(pLCDREG + LCDChar) = SegBuffer[LCDChar]; 
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
 3f8:	88 2f       	mov	r24, r24
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	84 51       	subi	r24, 0x14	; 20
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	2b 81       	ldd	r18, Y+3	; 0x03
 402:	22 2f       	mov	r18, r18
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	2d 5d       	subi	r18, 0xDD	; 221
 408:	3e 4f       	sbci	r19, 0xFE	; 254
 40a:	f9 01       	movw	r30, r18
 40c:	20 81       	ld	r18, Z
 40e:	fc 01       	movw	r30, r24
 410:	20 83       	st	Z, r18
        
      ScrollCount = LCD_SCROLLCOUNT_DEFAULT; 
      UpdateLCD = FALSE; 
   } 

   for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++) 
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	8b 83       	std	Y+3, r24	; 0x03
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	84 31       	cpi	r24, 0x14	; 20
 41c:	60 f3       	brcs	.-40     	; 0x3f6 <__vector_22+0xe2>
     *(pLCDREG + LCDChar) = SegBuffer[LCDChar]; 
 41e:	00 00       	nop
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	bf 91       	pop	r27
 430:	af 91       	pop	r26
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	7f 91       	pop	r23
 438:	6f 91       	pop	r22
 43a:	5f 91       	pop	r21
 43c:	4f 91       	pop	r20
 43e:	3f 91       	pop	r19
 440:	2f 91       	pop	r18
 442:	0f 90       	pop	r0
 444:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 448:	0f 90       	pop	r0
 44a:	1f 90       	pop	r1
 44c:	18 95       	reti

0000044e <main>:
									//initialize variables
unsigned char counter;
unsigned char str[];
unsigned char hold;

int main(void){
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
 456:	2e 97       	sbiw	r28, 0x0e	; 14
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	f8 94       	cli
 45c:	de bf       	out	0x3e, r29	; 62
 45e:	0f be       	out	0x3f, r0	; 63
 460:	cd bf       	out	0x3d, r28	; 61
	//PORTB |= (1<<4)|(1<<7)|(1<<6);	//PORTB for up down and center and pullup registers
	//PORTE |= (1<<2)|(1<<3);
	LCD_Init();						// initialize LCD screen
 462:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Init>

									//initialize port pins
	PORTB |= PINB_MASK;
 466:	85 e2       	ldi	r24, 0x25	; 37
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	25 e2       	ldi	r18, 0x25	; 37
 46c:	30 e0       	ldi	r19, 0x00	; 0
 46e:	f9 01       	movw	r30, r18
 470:	20 81       	ld	r18, Z
 472:	20 6d       	ori	r18, 0xD0	; 208
 474:	fc 01       	movw	r30, r24
 476:	20 83       	st	Z, r18
	DDRE = 0x00;
 478:	8d e2       	ldi	r24, 0x2D	; 45
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	fc 01       	movw	r30, r24
 47e:	10 82       	st	Z, r1
	PORTE |= PINE_MASK;				//pin change interrupt for ports B and E
 480:	8e e2       	ldi	r24, 0x2E	; 46
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	2e e2       	ldi	r18, 0x2E	; 46
 486:	30 e0       	ldi	r19, 0x00	; 0
 488:	f9 01       	movw	r30, r18
 48a:	20 81       	ld	r18, Z
 48c:	2c 60       	ori	r18, 0x0C	; 12
 48e:	fc 01       	movw	r30, r24
 490:	20 83       	st	Z, r18
	PCMSK0 = PINE_MASK;
 492:	8b e6       	ldi	r24, 0x6B	; 107
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	2c e0       	ldi	r18, 0x0C	; 12
 498:	fc 01       	movw	r30, r24
 49a:	20 83       	st	Z, r18
	PCMSK1 = PINB_MASK;
 49c:	8c e6       	ldi	r24, 0x6C	; 108
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	20 ed       	ldi	r18, 0xD0	; 208
 4a2:	fc 01       	movw	r30, r24
 4a4:	20 83       	st	Z, r18
	EIFR = (1<<6)|(1<<7);
 4a6:	8c e3       	ldi	r24, 0x3C	; 60
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	20 ec       	ldi	r18, 0xC0	; 192
 4ac:	fc 01       	movw	r30, r24
 4ae:	20 83       	st	Z, r18
	EIMSK = (1<<6)|(1<<7);
 4b0:	8d e3       	ldi	r24, 0x3D	; 61
 4b2:	90 e0       	ldi	r25, 0x00	; 0
 4b4:	20 ec       	ldi	r18, 0xC0	; 192
 4b6:	fc 01       	movw	r30, r24
 4b8:	20 83       	st	Z, r18
	DDRD = 0xFF;					//PORTD = output
 4ba:	8a e2       	ldi	r24, 0x2A	; 42
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	2f ef       	ldi	r18, 0xFF	; 255
 4c0:	fc 01       	movw	r30, r24
 4c2:	20 83       	st	Z, r18
	DDRB = 0X00;					//PORTB = input
 4c4:	84 e2       	ldi	r24, 0x24	; 36
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	fc 01       	movw	r30, r24
 4ca:	10 82       	st	Z, r1
	sei();							//set global interrupt
 4cc:	78 94       	sei
	counter = 0;					//set counter
 4ce:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <counter>
	while(1)
	{
		if(hold){}
 4d2:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <hold>
 4d6:	88 23       	and	r24, r24
 4d8:	29 f4       	brne	.+10     	; 0x4e4 <main+0x96>
		else{
			counter++;				//if hold=0, increment counter
 4da:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <counter>
 4de:	8f 5f       	subi	r24, 0xFF	; 255
 4e0:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <counter>
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	aa e7       	ldi	r26, 0x7A	; 122
 4ea:	b4 e4       	ldi	r27, 0x44	; 68
 4ec:	89 83       	std	Y+1, r24	; 0x01
 4ee:	9a 83       	std	Y+2, r25	; 0x02
 4f0:	ab 83       	std	Y+3, r26	; 0x03
 4f2:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 4f4:	20 e0       	ldi	r18, 0x00	; 0
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	4a e7       	ldi	r20, 0x7A	; 122
 4fa:	53 e4       	ldi	r21, 0x43	; 67
 4fc:	69 81       	ldd	r22, Y+1	; 0x01
 4fe:	7a 81       	ldd	r23, Y+2	; 0x02
 500:	8b 81       	ldd	r24, Y+3	; 0x03
 502:	9c 81       	ldd	r25, Y+4	; 0x04
 504:	0e 94 05 04 	call	0x80a	; 0x80a <__mulsf3>
 508:	dc 01       	movw	r26, r24
 50a:	cb 01       	movw	r24, r22
 50c:	8d 83       	std	Y+5, r24	; 0x05
 50e:	9e 83       	std	Y+6, r25	; 0x06
 510:	af 83       	std	Y+7, r26	; 0x07
 512:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
 514:	20 e0       	ldi	r18, 0x00	; 0
 516:	30 e0       	ldi	r19, 0x00	; 0
 518:	40 e8       	ldi	r20, 0x80	; 128
 51a:	5f e3       	ldi	r21, 0x3F	; 63
 51c:	6d 81       	ldd	r22, Y+5	; 0x05
 51e:	7e 81       	ldd	r23, Y+6	; 0x06
 520:	8f 81       	ldd	r24, Y+7	; 0x07
 522:	98 85       	ldd	r25, Y+8	; 0x08
 524:	0e 94 7f 03 	call	0x6fe	; 0x6fe <__cmpsf2>
 528:	88 23       	and	r24, r24
 52a:	2c f4       	brge	.+10     	; 0x536 <__stack+0x37>
		__ticks = 1;
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	9a 87       	std	Y+10, r25	; 0x0a
 532:	89 87       	std	Y+9, r24	; 0x09
 534:	3f c0       	rjmp	.+126    	; 0x5b4 <__stack+0xb5>
	else if (__tmp > 65535)
 536:	20 e0       	ldi	r18, 0x00	; 0
 538:	3f ef       	ldi	r19, 0xFF	; 255
 53a:	4f e7       	ldi	r20, 0x7F	; 127
 53c:	57 e4       	ldi	r21, 0x47	; 71
 53e:	6d 81       	ldd	r22, Y+5	; 0x05
 540:	7e 81       	ldd	r23, Y+6	; 0x06
 542:	8f 81       	ldd	r24, Y+7	; 0x07
 544:	98 85       	ldd	r25, Y+8	; 0x08
 546:	0e 94 00 04 	call	0x800	; 0x800 <__gesf2>
 54a:	18 16       	cp	r1, r24
 54c:	4c f5       	brge	.+82     	; 0x5a0 <__stack+0xa1>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 54e:	20 e0       	ldi	r18, 0x00	; 0
 550:	30 e0       	ldi	r19, 0x00	; 0
 552:	40 e2       	ldi	r20, 0x20	; 32
 554:	51 e4       	ldi	r21, 0x41	; 65
 556:	69 81       	ldd	r22, Y+1	; 0x01
 558:	7a 81       	ldd	r23, Y+2	; 0x02
 55a:	8b 81       	ldd	r24, Y+3	; 0x03
 55c:	9c 81       	ldd	r25, Y+4	; 0x04
 55e:	0e 94 05 04 	call	0x80a	; 0x80a <__mulsf3>
 562:	dc 01       	movw	r26, r24
 564:	cb 01       	movw	r24, r22
 566:	bc 01       	movw	r22, r24
 568:	cd 01       	movw	r24, r26
 56a:	0e 94 84 03 	call	0x708	; 0x708 <__fixunssfsi>
 56e:	dc 01       	movw	r26, r24
 570:	cb 01       	movw	r24, r22
 572:	9a 87       	std	Y+10, r25	; 0x0a
 574:	89 87       	std	Y+9, r24	; 0x09
 576:	0f c0       	rjmp	.+30     	; 0x596 <__stack+0x97>
 578:	89 e1       	ldi	r24, 0x19	; 25
 57a:	90 e0       	ldi	r25, 0x00	; 0
 57c:	9c 87       	std	Y+12, r25	; 0x0c
 57e:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 580:	8b 85       	ldd	r24, Y+11	; 0x0b
 582:	9c 85       	ldd	r25, Y+12	; 0x0c
 584:	01 97       	sbiw	r24, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <__stack+0x85>
 588:	9c 87       	std	Y+12, r25	; 0x0c
 58a:	8b 87       	std	Y+11, r24	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 58c:	89 85       	ldd	r24, Y+9	; 0x09
 58e:	9a 85       	ldd	r25, Y+10	; 0x0a
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	9a 87       	std	Y+10, r25	; 0x0a
 594:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 596:	89 85       	ldd	r24, Y+9	; 0x09
 598:	9a 85       	ldd	r25, Y+10	; 0x0a
 59a:	89 2b       	or	r24, r25
 59c:	69 f7       	brne	.-38     	; 0x578 <__stack+0x79>
 59e:	14 c0       	rjmp	.+40     	; 0x5c8 <__stack+0xc9>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 5a0:	6d 81       	ldd	r22, Y+5	; 0x05
 5a2:	7e 81       	ldd	r23, Y+6	; 0x06
 5a4:	8f 81       	ldd	r24, Y+7	; 0x07
 5a6:	98 85       	ldd	r25, Y+8	; 0x08
 5a8:	0e 94 84 03 	call	0x708	; 0x708 <__fixunssfsi>
 5ac:	dc 01       	movw	r26, r24
 5ae:	cb 01       	movw	r24, r22
 5b0:	9a 87       	std	Y+10, r25	; 0x0a
 5b2:	89 87       	std	Y+9, r24	; 0x09
 5b4:	89 85       	ldd	r24, Y+9	; 0x09
 5b6:	9a 85       	ldd	r25, Y+10	; 0x0a
 5b8:	9e 87       	std	Y+14, r25	; 0x0e
 5ba:	8d 87       	std	Y+13, r24	; 0x0d
 5bc:	8d 85       	ldd	r24, Y+13	; 0x0d
 5be:	9e 85       	ldd	r25, Y+14	; 0x0e
 5c0:	01 97       	sbiw	r24, 0x01	; 1
 5c2:	f1 f7       	brne	.-4      	; 0x5c0 <__stack+0xc1>
 5c4:	9e 87       	std	Y+14, r25	; 0x0e
 5c6:	8d 87       	std	Y+13, r24	; 0x0d
		}
		
		_delay_ms(1000);
		sprintf(str, "%d", counter);//print count
 5c8:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <counter>
 5cc:	88 2f       	mov	r24, r24
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	29 2f       	mov	r18, r25
 5d2:	2f 93       	push	r18
 5d4:	8f 93       	push	r24
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	91 e0       	ldi	r25, 0x01	; 1
 5da:	89 2f       	mov	r24, r25
 5dc:	8f 93       	push	r24
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	91 e0       	ldi	r25, 0x01	; 1
 5e2:	8f 93       	push	r24
 5e4:	8a e3       	ldi	r24, 0x3A	; 58
 5e6:	91 e0       	ldi	r25, 0x01	; 1
 5e8:	89 2f       	mov	r24, r25
 5ea:	8f 93       	push	r24
 5ec:	8a e3       	ldi	r24, 0x3A	; 58
 5ee:	91 e0       	ldi	r25, 0x01	; 1
 5f0:	8f 93       	push	r24
 5f2:	0e 94 9a 04 	call	0x934	; 0x934 <sprintf>
 5f6:	0f 90       	pop	r0
 5f8:	0f 90       	pop	r0
 5fa:	0f 90       	pop	r0
 5fc:	0f 90       	pop	r0
 5fe:	0f 90       	pop	r0
 600:	0f 90       	pop	r0
		LCD_puts(str);
 602:	8a e3       	ldi	r24, 0x3A	; 58
 604:	91 e0       	ldi	r25, 0x01	; 1
 606:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_puts>
		
		if(counter == 100){			//once counter gets to 100 reset to 0
 60a:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <counter>
 60e:	84 36       	cpi	r24, 0x64	; 100
 610:	09 f0       	breq	.+2      	; 0x614 <__stack+0x115>
 612:	5f cf       	rjmp	.-322    	; 0x4d2 <main+0x84>
			counter = 0;
 614:	10 92 39 01 	sts	0x0139, r1	; 0x800139 <counter>
		}
	}
 618:	5c cf       	rjmp	.-328    	; 0x4d2 <main+0x84>

0000061a <__vector_3>:
}
ISR(PCINT1_vect,ISR_BLOCK) {
 61a:	1f 92       	push	r1
 61c:	0f 92       	push	r0
 61e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	8f 93       	push	r24
 628:	9f 93       	push	r25
 62a:	ef 93       	push	r30
 62c:	ff 93       	push	r31
 62e:	cf 93       	push	r28
 630:	df 93       	push	r29
 632:	cd b7       	in	r28, 0x3d	; 61
 634:	de b7       	in	r29, 0x3e	; 62

	if (!(PINB &(1<<PINB6))) {		//up button disables hold
 636:	83 e2       	ldi	r24, 0x23	; 35
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	fc 01       	movw	r30, r24
 63c:	80 81       	ld	r24, Z
 63e:	88 2f       	mov	r24, r24
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	80 74       	andi	r24, 0x40	; 64
 644:	99 27       	eor	r25, r25
 646:	89 2b       	or	r24, r25
 648:	19 f4       	brne	.+6      	; 0x650 <__vector_3+0x36>
		hold = 0;
 64a:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <hold>
		return;
 64e:	17 c0       	rjmp	.+46     	; 0x67e <__vector_3+0x64>
	}
	if (!(PINB &(1<<PINB4))) {		//center button enables hold
 650:	83 e2       	ldi	r24, 0x23	; 35
 652:	90 e0       	ldi	r25, 0x00	; 0
 654:	fc 01       	movw	r30, r24
 656:	80 81       	ld	r24, Z
 658:	88 2f       	mov	r24, r24
 65a:	90 e0       	ldi	r25, 0x00	; 0
 65c:	80 71       	andi	r24, 0x10	; 16
 65e:	99 27       	eor	r25, r25
 660:	89 2b       	or	r24, r25
 662:	21 f4       	brne	.+8      	; 0x66c <__vector_3+0x52>
		hold = 1;
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <hold>
		return;
 66a:	09 c0       	rjmp	.+18     	; 0x67e <__vector_3+0x64>
	}
	if (!(PINB &(1<<PINB7))) {		//down button disables hold
 66c:	83 e2       	ldi	r24, 0x23	; 35
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	fc 01       	movw	r30, r24
 672:	80 81       	ld	r24, Z
 674:	88 23       	and	r24, r24
 676:	1c f0       	brlt	.+6      	; 0x67e <__vector_3+0x64>
		hold = 0;
 678:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <hold>
		return;
 67c:	00 00       	nop
	}

}
 67e:	df 91       	pop	r29
 680:	cf 91       	pop	r28
 682:	ff 91       	pop	r31
 684:	ef 91       	pop	r30
 686:	9f 91       	pop	r25
 688:	8f 91       	pop	r24
 68a:	0f 90       	pop	r0
 68c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 690:	0f 90       	pop	r0
 692:	1f 90       	pop	r1
 694:	18 95       	reti

00000696 <__vector_2>:
ISR(PCINT0_vect,ISR_BLOCK) {
 696:	1f 92       	push	r1
 698:	0f 92       	push	r0
 69a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 69e:	0f 92       	push	r0
 6a0:	11 24       	eor	r1, r1
 6a2:	8f 93       	push	r24
 6a4:	9f 93       	push	r25
 6a6:	ef 93       	push	r30
 6a8:	ff 93       	push	r31
 6aa:	cf 93       	push	r28
 6ac:	df 93       	push	r29
 6ae:	cd b7       	in	r28, 0x3d	; 61
 6b0:	de b7       	in	r29, 0x3e	; 62
	
	if(!(PINE &(1<<PINE3))){		//right button disables hold
 6b2:	8c e2       	ldi	r24, 0x2C	; 44
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	fc 01       	movw	r30, r24
 6b8:	80 81       	ld	r24, Z
 6ba:	88 2f       	mov	r24, r24
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	88 70       	andi	r24, 0x08	; 8
 6c0:	99 27       	eor	r25, r25
 6c2:	89 2b       	or	r24, r25
 6c4:	19 f4       	brne	.+6      	; 0x6cc <__vector_2+0x36>
		hold = 0;
 6c6:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <hold>
		return;
 6ca:	0d c0       	rjmp	.+26     	; 0x6e6 <__vector_2+0x50>
	}
	if(!(PINE &(1<<PINE2))){		//left button disables hold
 6cc:	8c e2       	ldi	r24, 0x2C	; 44
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	fc 01       	movw	r30, r24
 6d2:	80 81       	ld	r24, Z
 6d4:	88 2f       	mov	r24, r24
 6d6:	90 e0       	ldi	r25, 0x00	; 0
 6d8:	84 70       	andi	r24, 0x04	; 4
 6da:	99 27       	eor	r25, r25
 6dc:	89 2b       	or	r24, r25
 6de:	19 f4       	brne	.+6      	; 0x6e6 <__vector_2+0x50>
		hold = 0;
 6e0:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <hold>
		return;
 6e4:	00 00       	nop
	}

 6e6:	df 91       	pop	r29
 6e8:	cf 91       	pop	r28
 6ea:	ff 91       	pop	r31
 6ec:	ef 91       	pop	r30
 6ee:	9f 91       	pop	r25
 6f0:	8f 91       	pop	r24
 6f2:	0f 90       	pop	r0
 6f4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 6f8:	0f 90       	pop	r0
 6fa:	1f 90       	pop	r1
 6fc:	18 95       	reti

000006fe <__cmpsf2>:
 6fe:	0e 94 b3 03 	call	0x766	; 0x766 <__fp_cmp>
 702:	08 f4       	brcc	.+2      	; 0x706 <__cmpsf2+0x8>
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	08 95       	ret

00000708 <__fixunssfsi>:
 708:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_splitA>
 70c:	88 f0       	brcs	.+34     	; 0x730 <__fixunssfsi+0x28>
 70e:	9f 57       	subi	r25, 0x7F	; 127
 710:	98 f0       	brcs	.+38     	; 0x738 <__fixunssfsi+0x30>
 712:	b9 2f       	mov	r27, r25
 714:	99 27       	eor	r25, r25
 716:	b7 51       	subi	r27, 0x17	; 23
 718:	b0 f0       	brcs	.+44     	; 0x746 <__fixunssfsi+0x3e>
 71a:	e1 f0       	breq	.+56     	; 0x754 <__fixunssfsi+0x4c>
 71c:	66 0f       	add	r22, r22
 71e:	77 1f       	adc	r23, r23
 720:	88 1f       	adc	r24, r24
 722:	99 1f       	adc	r25, r25
 724:	1a f0       	brmi	.+6      	; 0x72c <__fixunssfsi+0x24>
 726:	ba 95       	dec	r27
 728:	c9 f7       	brne	.-14     	; 0x71c <__fixunssfsi+0x14>
 72a:	14 c0       	rjmp	.+40     	; 0x754 <__fixunssfsi+0x4c>
 72c:	b1 30       	cpi	r27, 0x01	; 1
 72e:	91 f0       	breq	.+36     	; 0x754 <__fixunssfsi+0x4c>
 730:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <__fp_zero>
 734:	b1 e0       	ldi	r27, 0x01	; 1
 736:	08 95       	ret
 738:	0c 94 f9 03 	jmp	0x7f2	; 0x7f2 <__fp_zero>
 73c:	67 2f       	mov	r22, r23
 73e:	78 2f       	mov	r23, r24
 740:	88 27       	eor	r24, r24
 742:	b8 5f       	subi	r27, 0xF8	; 248
 744:	39 f0       	breq	.+14     	; 0x754 <__fixunssfsi+0x4c>
 746:	b9 3f       	cpi	r27, 0xF9	; 249
 748:	cc f3       	brlt	.-14     	; 0x73c <__fixunssfsi+0x34>
 74a:	86 95       	lsr	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b3 95       	inc	r27
 752:	d9 f7       	brne	.-10     	; 0x74a <__fixunssfsi+0x42>
 754:	3e f4       	brtc	.+14     	; 0x764 <__fixunssfsi+0x5c>
 756:	90 95       	com	r25
 758:	80 95       	com	r24
 75a:	70 95       	com	r23
 75c:	61 95       	neg	r22
 75e:	7f 4f       	sbci	r23, 0xFF	; 255
 760:	8f 4f       	sbci	r24, 0xFF	; 255
 762:	9f 4f       	sbci	r25, 0xFF	; 255
 764:	08 95       	ret

00000766 <__fp_cmp>:
 766:	99 0f       	add	r25, r25
 768:	00 08       	sbc	r0, r0
 76a:	55 0f       	add	r21, r21
 76c:	aa 0b       	sbc	r26, r26
 76e:	e0 e8       	ldi	r30, 0x80	; 128
 770:	fe ef       	ldi	r31, 0xFE	; 254
 772:	16 16       	cp	r1, r22
 774:	17 06       	cpc	r1, r23
 776:	e8 07       	cpc	r30, r24
 778:	f9 07       	cpc	r31, r25
 77a:	c0 f0       	brcs	.+48     	; 0x7ac <__fp_cmp+0x46>
 77c:	12 16       	cp	r1, r18
 77e:	13 06       	cpc	r1, r19
 780:	e4 07       	cpc	r30, r20
 782:	f5 07       	cpc	r31, r21
 784:	98 f0       	brcs	.+38     	; 0x7ac <__fp_cmp+0x46>
 786:	62 1b       	sub	r22, r18
 788:	73 0b       	sbc	r23, r19
 78a:	84 0b       	sbc	r24, r20
 78c:	95 0b       	sbc	r25, r21
 78e:	39 f4       	brne	.+14     	; 0x79e <__fp_cmp+0x38>
 790:	0a 26       	eor	r0, r26
 792:	61 f0       	breq	.+24     	; 0x7ac <__fp_cmp+0x46>
 794:	23 2b       	or	r18, r19
 796:	24 2b       	or	r18, r20
 798:	25 2b       	or	r18, r21
 79a:	21 f4       	brne	.+8      	; 0x7a4 <__fp_cmp+0x3e>
 79c:	08 95       	ret
 79e:	0a 26       	eor	r0, r26
 7a0:	09 f4       	brne	.+2      	; 0x7a4 <__fp_cmp+0x3e>
 7a2:	a1 40       	sbci	r26, 0x01	; 1
 7a4:	a6 95       	lsr	r26
 7a6:	8f ef       	ldi	r24, 0xFF	; 255
 7a8:	81 1d       	adc	r24, r1
 7aa:	81 1d       	adc	r24, r1
 7ac:	08 95       	ret

000007ae <__fp_split3>:
 7ae:	57 fd       	sbrc	r21, 7
 7b0:	90 58       	subi	r25, 0x80	; 128
 7b2:	44 0f       	add	r20, r20
 7b4:	55 1f       	adc	r21, r21
 7b6:	59 f0       	breq	.+22     	; 0x7ce <__fp_splitA+0x10>
 7b8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ba:	71 f0       	breq	.+28     	; 0x7d8 <__fp_splitA+0x1a>
 7bc:	47 95       	ror	r20

000007be <__fp_splitA>:
 7be:	88 0f       	add	r24, r24
 7c0:	97 fb       	bst	r25, 7
 7c2:	99 1f       	adc	r25, r25
 7c4:	61 f0       	breq	.+24     	; 0x7de <__fp_splitA+0x20>
 7c6:	9f 3f       	cpi	r25, 0xFF	; 255
 7c8:	79 f0       	breq	.+30     	; 0x7e8 <__fp_splitA+0x2a>
 7ca:	87 95       	ror	r24
 7cc:	08 95       	ret
 7ce:	12 16       	cp	r1, r18
 7d0:	13 06       	cpc	r1, r19
 7d2:	14 06       	cpc	r1, r20
 7d4:	55 1f       	adc	r21, r21
 7d6:	f2 cf       	rjmp	.-28     	; 0x7bc <__fp_split3+0xe>
 7d8:	46 95       	lsr	r20
 7da:	f1 df       	rcall	.-30     	; 0x7be <__fp_splitA>
 7dc:	08 c0       	rjmp	.+16     	; 0x7ee <__fp_splitA+0x30>
 7de:	16 16       	cp	r1, r22
 7e0:	17 06       	cpc	r1, r23
 7e2:	18 06       	cpc	r1, r24
 7e4:	99 1f       	adc	r25, r25
 7e6:	f1 cf       	rjmp	.-30     	; 0x7ca <__fp_splitA+0xc>
 7e8:	86 95       	lsr	r24
 7ea:	71 05       	cpc	r23, r1
 7ec:	61 05       	cpc	r22, r1
 7ee:	08 94       	sec
 7f0:	08 95       	ret

000007f2 <__fp_zero>:
 7f2:	e8 94       	clt

000007f4 <__fp_szero>:
 7f4:	bb 27       	eor	r27, r27
 7f6:	66 27       	eor	r22, r22
 7f8:	77 27       	eor	r23, r23
 7fa:	cb 01       	movw	r24, r22
 7fc:	97 f9       	bld	r25, 7
 7fe:	08 95       	ret

00000800 <__gesf2>:
 800:	0e 94 b3 03 	call	0x766	; 0x766 <__fp_cmp>
 804:	08 f4       	brcc	.+2      	; 0x808 <__gesf2+0x8>
 806:	8f ef       	ldi	r24, 0xFF	; 255
 808:	08 95       	ret

0000080a <__mulsf3>:
 80a:	0e 94 18 04 	call	0x830	; 0x830 <__mulsf3x>
 80e:	0c 94 89 04 	jmp	0x912	; 0x912 <__fp_round>
 812:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <__fp_pscA>
 816:	38 f0       	brcs	.+14     	; 0x826 <__mulsf3+0x1c>
 818:	0e 94 82 04 	call	0x904	; 0x904 <__fp_pscB>
 81c:	20 f0       	brcs	.+8      	; 0x826 <__mulsf3+0x1c>
 81e:	95 23       	and	r25, r21
 820:	11 f0       	breq	.+4      	; 0x826 <__mulsf3+0x1c>
 822:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_inf>
 826:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <__fp_nan>
 82a:	11 24       	eor	r1, r1
 82c:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_szero>

00000830 <__mulsf3x>:
 830:	0e 94 d7 03 	call	0x7ae	; 0x7ae <__fp_split3>
 834:	70 f3       	brcs	.-36     	; 0x812 <__mulsf3+0x8>

00000836 <__mulsf3_pse>:
 836:	95 9f       	mul	r25, r21
 838:	c1 f3       	breq	.-16     	; 0x82a <__mulsf3+0x20>
 83a:	95 0f       	add	r25, r21
 83c:	50 e0       	ldi	r21, 0x00	; 0
 83e:	55 1f       	adc	r21, r21
 840:	62 9f       	mul	r22, r18
 842:	f0 01       	movw	r30, r0
 844:	72 9f       	mul	r23, r18
 846:	bb 27       	eor	r27, r27
 848:	f0 0d       	add	r31, r0
 84a:	b1 1d       	adc	r27, r1
 84c:	63 9f       	mul	r22, r19
 84e:	aa 27       	eor	r26, r26
 850:	f0 0d       	add	r31, r0
 852:	b1 1d       	adc	r27, r1
 854:	aa 1f       	adc	r26, r26
 856:	64 9f       	mul	r22, r20
 858:	66 27       	eor	r22, r22
 85a:	b0 0d       	add	r27, r0
 85c:	a1 1d       	adc	r26, r1
 85e:	66 1f       	adc	r22, r22
 860:	82 9f       	mul	r24, r18
 862:	22 27       	eor	r18, r18
 864:	b0 0d       	add	r27, r0
 866:	a1 1d       	adc	r26, r1
 868:	62 1f       	adc	r22, r18
 86a:	73 9f       	mul	r23, r19
 86c:	b0 0d       	add	r27, r0
 86e:	a1 1d       	adc	r26, r1
 870:	62 1f       	adc	r22, r18
 872:	83 9f       	mul	r24, r19
 874:	a0 0d       	add	r26, r0
 876:	61 1d       	adc	r22, r1
 878:	22 1f       	adc	r18, r18
 87a:	74 9f       	mul	r23, r20
 87c:	33 27       	eor	r19, r19
 87e:	a0 0d       	add	r26, r0
 880:	61 1d       	adc	r22, r1
 882:	23 1f       	adc	r18, r19
 884:	84 9f       	mul	r24, r20
 886:	60 0d       	add	r22, r0
 888:	21 1d       	adc	r18, r1
 88a:	82 2f       	mov	r24, r18
 88c:	76 2f       	mov	r23, r22
 88e:	6a 2f       	mov	r22, r26
 890:	11 24       	eor	r1, r1
 892:	9f 57       	subi	r25, 0x7F	; 127
 894:	50 40       	sbci	r21, 0x00	; 0
 896:	9a f0       	brmi	.+38     	; 0x8be <__mulsf3_pse+0x88>
 898:	f1 f0       	breq	.+60     	; 0x8d6 <__mulsf3_pse+0xa0>
 89a:	88 23       	and	r24, r24
 89c:	4a f0       	brmi	.+18     	; 0x8b0 <__mulsf3_pse+0x7a>
 89e:	ee 0f       	add	r30, r30
 8a0:	ff 1f       	adc	r31, r31
 8a2:	bb 1f       	adc	r27, r27
 8a4:	66 1f       	adc	r22, r22
 8a6:	77 1f       	adc	r23, r23
 8a8:	88 1f       	adc	r24, r24
 8aa:	91 50       	subi	r25, 0x01	; 1
 8ac:	50 40       	sbci	r21, 0x00	; 0
 8ae:	a9 f7       	brne	.-22     	; 0x89a <__mulsf3_pse+0x64>
 8b0:	9e 3f       	cpi	r25, 0xFE	; 254
 8b2:	51 05       	cpc	r21, r1
 8b4:	80 f0       	brcs	.+32     	; 0x8d6 <__mulsf3_pse+0xa0>
 8b6:	0c 94 72 04 	jmp	0x8e4	; 0x8e4 <__fp_inf>
 8ba:	0c 94 fa 03 	jmp	0x7f4	; 0x7f4 <__fp_szero>
 8be:	5f 3f       	cpi	r21, 0xFF	; 255
 8c0:	e4 f3       	brlt	.-8      	; 0x8ba <__mulsf3_pse+0x84>
 8c2:	98 3e       	cpi	r25, 0xE8	; 232
 8c4:	d4 f3       	brlt	.-12     	; 0x8ba <__mulsf3_pse+0x84>
 8c6:	86 95       	lsr	r24
 8c8:	77 95       	ror	r23
 8ca:	67 95       	ror	r22
 8cc:	b7 95       	ror	r27
 8ce:	f7 95       	ror	r31
 8d0:	e7 95       	ror	r30
 8d2:	9f 5f       	subi	r25, 0xFF	; 255
 8d4:	c1 f7       	brne	.-16     	; 0x8c6 <__mulsf3_pse+0x90>
 8d6:	fe 2b       	or	r31, r30
 8d8:	88 0f       	add	r24, r24
 8da:	91 1d       	adc	r25, r1
 8dc:	96 95       	lsr	r25
 8de:	87 95       	ror	r24
 8e0:	97 f9       	bld	r25, 7
 8e2:	08 95       	ret

000008e4 <__fp_inf>:
 8e4:	97 f9       	bld	r25, 7
 8e6:	9f 67       	ori	r25, 0x7F	; 127
 8e8:	80 e8       	ldi	r24, 0x80	; 128
 8ea:	70 e0       	ldi	r23, 0x00	; 0
 8ec:	60 e0       	ldi	r22, 0x00	; 0
 8ee:	08 95       	ret

000008f0 <__fp_nan>:
 8f0:	9f ef       	ldi	r25, 0xFF	; 255
 8f2:	80 ec       	ldi	r24, 0xC0	; 192
 8f4:	08 95       	ret

000008f6 <__fp_pscA>:
 8f6:	00 24       	eor	r0, r0
 8f8:	0a 94       	dec	r0
 8fa:	16 16       	cp	r1, r22
 8fc:	17 06       	cpc	r1, r23
 8fe:	18 06       	cpc	r1, r24
 900:	09 06       	cpc	r0, r25
 902:	08 95       	ret

00000904 <__fp_pscB>:
 904:	00 24       	eor	r0, r0
 906:	0a 94       	dec	r0
 908:	12 16       	cp	r1, r18
 90a:	13 06       	cpc	r1, r19
 90c:	14 06       	cpc	r1, r20
 90e:	05 06       	cpc	r0, r21
 910:	08 95       	ret

00000912 <__fp_round>:
 912:	09 2e       	mov	r0, r25
 914:	03 94       	inc	r0
 916:	00 0c       	add	r0, r0
 918:	11 f4       	brne	.+4      	; 0x91e <__fp_round+0xc>
 91a:	88 23       	and	r24, r24
 91c:	52 f0       	brmi	.+20     	; 0x932 <__fp_round+0x20>
 91e:	bb 0f       	add	r27, r27
 920:	40 f4       	brcc	.+16     	; 0x932 <__fp_round+0x20>
 922:	bf 2b       	or	r27, r31
 924:	11 f4       	brne	.+4      	; 0x92a <__fp_round+0x18>
 926:	60 ff       	sbrs	r22, 0
 928:	04 c0       	rjmp	.+8      	; 0x932 <__fp_round+0x20>
 92a:	6f 5f       	subi	r22, 0xFF	; 255
 92c:	7f 4f       	sbci	r23, 0xFF	; 255
 92e:	8f 4f       	sbci	r24, 0xFF	; 255
 930:	9f 4f       	sbci	r25, 0xFF	; 255
 932:	08 95       	ret

00000934 <sprintf>:
 934:	ae e0       	ldi	r26, 0x0E	; 14
 936:	b0 e0       	ldi	r27, 0x00	; 0
 938:	e0 ea       	ldi	r30, 0xA0	; 160
 93a:	f4 e0       	ldi	r31, 0x04	; 4
 93c:	0c 94 5b 07 	jmp	0xeb6	; 0xeb6 <__prologue_saves__+0x1c>
 940:	0d 89       	ldd	r16, Y+21	; 0x15
 942:	1e 89       	ldd	r17, Y+22	; 0x16
 944:	86 e0       	ldi	r24, 0x06	; 6
 946:	8c 83       	std	Y+4, r24	; 0x04
 948:	1a 83       	std	Y+2, r17	; 0x02
 94a:	09 83       	std	Y+1, r16	; 0x01
 94c:	8f ef       	ldi	r24, 0xFF	; 255
 94e:	9f e7       	ldi	r25, 0x7F	; 127
 950:	9e 83       	std	Y+6, r25	; 0x06
 952:	8d 83       	std	Y+5, r24	; 0x05
 954:	ae 01       	movw	r20, r28
 956:	47 5e       	subi	r20, 0xE7	; 231
 958:	5f 4f       	sbci	r21, 0xFF	; 255
 95a:	6f 89       	ldd	r22, Y+23	; 0x17
 95c:	78 8d       	ldd	r23, Y+24	; 0x18
 95e:	ce 01       	movw	r24, r28
 960:	01 96       	adiw	r24, 0x01	; 1
 962:	0e 94 bc 04 	call	0x978	; 0x978 <vfprintf>
 966:	ef 81       	ldd	r30, Y+7	; 0x07
 968:	f8 85       	ldd	r31, Y+8	; 0x08
 96a:	e0 0f       	add	r30, r16
 96c:	f1 1f       	adc	r31, r17
 96e:	10 82       	st	Z, r1
 970:	2e 96       	adiw	r28, 0x0e	; 14
 972:	e4 e0       	ldi	r30, 0x04	; 4
 974:	0c 94 77 07 	jmp	0xeee	; 0xeee <__epilogue_restores__+0x1c>

00000978 <vfprintf>:
 978:	ab e0       	ldi	r26, 0x0B	; 11
 97a:	b0 e0       	ldi	r27, 0x00	; 0
 97c:	e2 ec       	ldi	r30, 0xC2	; 194
 97e:	f4 e0       	ldi	r31, 0x04	; 4
 980:	0c 94 4d 07 	jmp	0xe9a	; 0xe9a <__prologue_saves__>
 984:	6c 01       	movw	r12, r24
 986:	7b 01       	movw	r14, r22
 988:	8a 01       	movw	r16, r20
 98a:	fc 01       	movw	r30, r24
 98c:	17 82       	std	Z+7, r1	; 0x07
 98e:	16 82       	std	Z+6, r1	; 0x06
 990:	83 81       	ldd	r24, Z+3	; 0x03
 992:	81 ff       	sbrs	r24, 1
 994:	cc c1       	rjmp	.+920    	; 0xd2e <vfprintf+0x3b6>
 996:	ce 01       	movw	r24, r28
 998:	01 96       	adiw	r24, 0x01	; 1
 99a:	3c 01       	movw	r6, r24
 99c:	f6 01       	movw	r30, r12
 99e:	93 81       	ldd	r25, Z+3	; 0x03
 9a0:	f7 01       	movw	r30, r14
 9a2:	93 fd       	sbrc	r25, 3
 9a4:	85 91       	lpm	r24, Z+
 9a6:	93 ff       	sbrs	r25, 3
 9a8:	81 91       	ld	r24, Z+
 9aa:	7f 01       	movw	r14, r30
 9ac:	88 23       	and	r24, r24
 9ae:	09 f4       	brne	.+2      	; 0x9b2 <vfprintf+0x3a>
 9b0:	ba c1       	rjmp	.+884    	; 0xd26 <vfprintf+0x3ae>
 9b2:	85 32       	cpi	r24, 0x25	; 37
 9b4:	39 f4       	brne	.+14     	; 0x9c4 <vfprintf+0x4c>
 9b6:	93 fd       	sbrc	r25, 3
 9b8:	85 91       	lpm	r24, Z+
 9ba:	93 ff       	sbrs	r25, 3
 9bc:	81 91       	ld	r24, Z+
 9be:	7f 01       	movw	r14, r30
 9c0:	85 32       	cpi	r24, 0x25	; 37
 9c2:	29 f4       	brne	.+10     	; 0x9ce <vfprintf+0x56>
 9c4:	b6 01       	movw	r22, r12
 9c6:	90 e0       	ldi	r25, 0x00	; 0
 9c8:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 9cc:	e7 cf       	rjmp	.-50     	; 0x99c <vfprintf+0x24>
 9ce:	91 2c       	mov	r9, r1
 9d0:	21 2c       	mov	r2, r1
 9d2:	31 2c       	mov	r3, r1
 9d4:	ff e1       	ldi	r31, 0x1F	; 31
 9d6:	f3 15       	cp	r31, r3
 9d8:	d8 f0       	brcs	.+54     	; 0xa10 <vfprintf+0x98>
 9da:	8b 32       	cpi	r24, 0x2B	; 43
 9dc:	79 f0       	breq	.+30     	; 0x9fc <vfprintf+0x84>
 9de:	38 f4       	brcc	.+14     	; 0x9ee <vfprintf+0x76>
 9e0:	80 32       	cpi	r24, 0x20	; 32
 9e2:	79 f0       	breq	.+30     	; 0xa02 <vfprintf+0x8a>
 9e4:	83 32       	cpi	r24, 0x23	; 35
 9e6:	a1 f4       	brne	.+40     	; 0xa10 <vfprintf+0x98>
 9e8:	23 2d       	mov	r18, r3
 9ea:	20 61       	ori	r18, 0x10	; 16
 9ec:	1d c0       	rjmp	.+58     	; 0xa28 <vfprintf+0xb0>
 9ee:	8d 32       	cpi	r24, 0x2D	; 45
 9f0:	61 f0       	breq	.+24     	; 0xa0a <vfprintf+0x92>
 9f2:	80 33       	cpi	r24, 0x30	; 48
 9f4:	69 f4       	brne	.+26     	; 0xa10 <vfprintf+0x98>
 9f6:	23 2d       	mov	r18, r3
 9f8:	21 60       	ori	r18, 0x01	; 1
 9fa:	16 c0       	rjmp	.+44     	; 0xa28 <vfprintf+0xb0>
 9fc:	83 2d       	mov	r24, r3
 9fe:	82 60       	ori	r24, 0x02	; 2
 a00:	38 2e       	mov	r3, r24
 a02:	e3 2d       	mov	r30, r3
 a04:	e4 60       	ori	r30, 0x04	; 4
 a06:	3e 2e       	mov	r3, r30
 a08:	2a c0       	rjmp	.+84     	; 0xa5e <vfprintf+0xe6>
 a0a:	f3 2d       	mov	r31, r3
 a0c:	f8 60       	ori	r31, 0x08	; 8
 a0e:	1d c0       	rjmp	.+58     	; 0xa4a <vfprintf+0xd2>
 a10:	37 fc       	sbrc	r3, 7
 a12:	2d c0       	rjmp	.+90     	; 0xa6e <vfprintf+0xf6>
 a14:	20 ed       	ldi	r18, 0xD0	; 208
 a16:	28 0f       	add	r18, r24
 a18:	2a 30       	cpi	r18, 0x0A	; 10
 a1a:	40 f0       	brcs	.+16     	; 0xa2c <vfprintf+0xb4>
 a1c:	8e 32       	cpi	r24, 0x2E	; 46
 a1e:	b9 f4       	brne	.+46     	; 0xa4e <vfprintf+0xd6>
 a20:	36 fc       	sbrc	r3, 6
 a22:	81 c1       	rjmp	.+770    	; 0xd26 <vfprintf+0x3ae>
 a24:	23 2d       	mov	r18, r3
 a26:	20 64       	ori	r18, 0x40	; 64
 a28:	32 2e       	mov	r3, r18
 a2a:	19 c0       	rjmp	.+50     	; 0xa5e <vfprintf+0xe6>
 a2c:	36 fe       	sbrs	r3, 6
 a2e:	06 c0       	rjmp	.+12     	; 0xa3c <vfprintf+0xc4>
 a30:	8a e0       	ldi	r24, 0x0A	; 10
 a32:	98 9e       	mul	r9, r24
 a34:	20 0d       	add	r18, r0
 a36:	11 24       	eor	r1, r1
 a38:	92 2e       	mov	r9, r18
 a3a:	11 c0       	rjmp	.+34     	; 0xa5e <vfprintf+0xe6>
 a3c:	ea e0       	ldi	r30, 0x0A	; 10
 a3e:	2e 9e       	mul	r2, r30
 a40:	20 0d       	add	r18, r0
 a42:	11 24       	eor	r1, r1
 a44:	22 2e       	mov	r2, r18
 a46:	f3 2d       	mov	r31, r3
 a48:	f0 62       	ori	r31, 0x20	; 32
 a4a:	3f 2e       	mov	r3, r31
 a4c:	08 c0       	rjmp	.+16     	; 0xa5e <vfprintf+0xe6>
 a4e:	8c 36       	cpi	r24, 0x6C	; 108
 a50:	21 f4       	brne	.+8      	; 0xa5a <vfprintf+0xe2>
 a52:	83 2d       	mov	r24, r3
 a54:	80 68       	ori	r24, 0x80	; 128
 a56:	38 2e       	mov	r3, r24
 a58:	02 c0       	rjmp	.+4      	; 0xa5e <vfprintf+0xe6>
 a5a:	88 36       	cpi	r24, 0x68	; 104
 a5c:	41 f4       	brne	.+16     	; 0xa6e <vfprintf+0xf6>
 a5e:	f7 01       	movw	r30, r14
 a60:	93 fd       	sbrc	r25, 3
 a62:	85 91       	lpm	r24, Z+
 a64:	93 ff       	sbrs	r25, 3
 a66:	81 91       	ld	r24, Z+
 a68:	7f 01       	movw	r14, r30
 a6a:	81 11       	cpse	r24, r1
 a6c:	b3 cf       	rjmp	.-154    	; 0x9d4 <vfprintf+0x5c>
 a6e:	98 2f       	mov	r25, r24
 a70:	9f 7d       	andi	r25, 0xDF	; 223
 a72:	95 54       	subi	r25, 0x45	; 69
 a74:	93 30       	cpi	r25, 0x03	; 3
 a76:	28 f4       	brcc	.+10     	; 0xa82 <vfprintf+0x10a>
 a78:	0c 5f       	subi	r16, 0xFC	; 252
 a7a:	1f 4f       	sbci	r17, 0xFF	; 255
 a7c:	9f e3       	ldi	r25, 0x3F	; 63
 a7e:	99 83       	std	Y+1, r25	; 0x01
 a80:	0d c0       	rjmp	.+26     	; 0xa9c <vfprintf+0x124>
 a82:	83 36       	cpi	r24, 0x63	; 99
 a84:	31 f0       	breq	.+12     	; 0xa92 <vfprintf+0x11a>
 a86:	83 37       	cpi	r24, 0x73	; 115
 a88:	71 f0       	breq	.+28     	; 0xaa6 <vfprintf+0x12e>
 a8a:	83 35       	cpi	r24, 0x53	; 83
 a8c:	09 f0       	breq	.+2      	; 0xa90 <vfprintf+0x118>
 a8e:	59 c0       	rjmp	.+178    	; 0xb42 <vfprintf+0x1ca>
 a90:	21 c0       	rjmp	.+66     	; 0xad4 <vfprintf+0x15c>
 a92:	f8 01       	movw	r30, r16
 a94:	80 81       	ld	r24, Z
 a96:	89 83       	std	Y+1, r24	; 0x01
 a98:	0e 5f       	subi	r16, 0xFE	; 254
 a9a:	1f 4f       	sbci	r17, 0xFF	; 255
 a9c:	88 24       	eor	r8, r8
 a9e:	83 94       	inc	r8
 aa0:	91 2c       	mov	r9, r1
 aa2:	53 01       	movw	r10, r6
 aa4:	13 c0       	rjmp	.+38     	; 0xacc <vfprintf+0x154>
 aa6:	28 01       	movw	r4, r16
 aa8:	f2 e0       	ldi	r31, 0x02	; 2
 aaa:	4f 0e       	add	r4, r31
 aac:	51 1c       	adc	r5, r1
 aae:	f8 01       	movw	r30, r16
 ab0:	a0 80       	ld	r10, Z
 ab2:	b1 80       	ldd	r11, Z+1	; 0x01
 ab4:	36 fe       	sbrs	r3, 6
 ab6:	03 c0       	rjmp	.+6      	; 0xabe <vfprintf+0x146>
 ab8:	69 2d       	mov	r22, r9
 aba:	70 e0       	ldi	r23, 0x00	; 0
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <vfprintf+0x14a>
 abe:	6f ef       	ldi	r22, 0xFF	; 255
 ac0:	7f ef       	ldi	r23, 0xFF	; 255
 ac2:	c5 01       	movw	r24, r10
 ac4:	0e 94 a8 06 	call	0xd50	; 0xd50 <strnlen>
 ac8:	4c 01       	movw	r8, r24
 aca:	82 01       	movw	r16, r4
 acc:	f3 2d       	mov	r31, r3
 ace:	ff 77       	andi	r31, 0x7F	; 127
 ad0:	3f 2e       	mov	r3, r31
 ad2:	16 c0       	rjmp	.+44     	; 0xb00 <vfprintf+0x188>
 ad4:	28 01       	movw	r4, r16
 ad6:	22 e0       	ldi	r18, 0x02	; 2
 ad8:	42 0e       	add	r4, r18
 ada:	51 1c       	adc	r5, r1
 adc:	f8 01       	movw	r30, r16
 ade:	a0 80       	ld	r10, Z
 ae0:	b1 80       	ldd	r11, Z+1	; 0x01
 ae2:	36 fe       	sbrs	r3, 6
 ae4:	03 c0       	rjmp	.+6      	; 0xaec <vfprintf+0x174>
 ae6:	69 2d       	mov	r22, r9
 ae8:	70 e0       	ldi	r23, 0x00	; 0
 aea:	02 c0       	rjmp	.+4      	; 0xaf0 <vfprintf+0x178>
 aec:	6f ef       	ldi	r22, 0xFF	; 255
 aee:	7f ef       	ldi	r23, 0xFF	; 255
 af0:	c5 01       	movw	r24, r10
 af2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <strnlen_P>
 af6:	4c 01       	movw	r8, r24
 af8:	f3 2d       	mov	r31, r3
 afa:	f0 68       	ori	r31, 0x80	; 128
 afc:	3f 2e       	mov	r3, r31
 afe:	82 01       	movw	r16, r4
 b00:	33 fc       	sbrc	r3, 3
 b02:	1b c0       	rjmp	.+54     	; 0xb3a <vfprintf+0x1c2>
 b04:	82 2d       	mov	r24, r2
 b06:	90 e0       	ldi	r25, 0x00	; 0
 b08:	88 16       	cp	r8, r24
 b0a:	99 06       	cpc	r9, r25
 b0c:	b0 f4       	brcc	.+44     	; 0xb3a <vfprintf+0x1c2>
 b0e:	b6 01       	movw	r22, r12
 b10:	80 e2       	ldi	r24, 0x20	; 32
 b12:	90 e0       	ldi	r25, 0x00	; 0
 b14:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 b18:	2a 94       	dec	r2
 b1a:	f4 cf       	rjmp	.-24     	; 0xb04 <vfprintf+0x18c>
 b1c:	f5 01       	movw	r30, r10
 b1e:	37 fc       	sbrc	r3, 7
 b20:	85 91       	lpm	r24, Z+
 b22:	37 fe       	sbrs	r3, 7
 b24:	81 91       	ld	r24, Z+
 b26:	5f 01       	movw	r10, r30
 b28:	b6 01       	movw	r22, r12
 b2a:	90 e0       	ldi	r25, 0x00	; 0
 b2c:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 b30:	21 10       	cpse	r2, r1
 b32:	2a 94       	dec	r2
 b34:	21 e0       	ldi	r18, 0x01	; 1
 b36:	82 1a       	sub	r8, r18
 b38:	91 08       	sbc	r9, r1
 b3a:	81 14       	cp	r8, r1
 b3c:	91 04       	cpc	r9, r1
 b3e:	71 f7       	brne	.-36     	; 0xb1c <vfprintf+0x1a4>
 b40:	e8 c0       	rjmp	.+464    	; 0xd12 <vfprintf+0x39a>
 b42:	84 36       	cpi	r24, 0x64	; 100
 b44:	11 f0       	breq	.+4      	; 0xb4a <vfprintf+0x1d2>
 b46:	89 36       	cpi	r24, 0x69	; 105
 b48:	41 f5       	brne	.+80     	; 0xb9a <vfprintf+0x222>
 b4a:	f8 01       	movw	r30, r16
 b4c:	37 fe       	sbrs	r3, 7
 b4e:	07 c0       	rjmp	.+14     	; 0xb5e <vfprintf+0x1e6>
 b50:	60 81       	ld	r22, Z
 b52:	71 81       	ldd	r23, Z+1	; 0x01
 b54:	82 81       	ldd	r24, Z+2	; 0x02
 b56:	93 81       	ldd	r25, Z+3	; 0x03
 b58:	0c 5f       	subi	r16, 0xFC	; 252
 b5a:	1f 4f       	sbci	r17, 0xFF	; 255
 b5c:	08 c0       	rjmp	.+16     	; 0xb6e <vfprintf+0x1f6>
 b5e:	60 81       	ld	r22, Z
 b60:	71 81       	ldd	r23, Z+1	; 0x01
 b62:	07 2e       	mov	r0, r23
 b64:	00 0c       	add	r0, r0
 b66:	88 0b       	sbc	r24, r24
 b68:	99 0b       	sbc	r25, r25
 b6a:	0e 5f       	subi	r16, 0xFE	; 254
 b6c:	1f 4f       	sbci	r17, 0xFF	; 255
 b6e:	f3 2d       	mov	r31, r3
 b70:	ff 76       	andi	r31, 0x6F	; 111
 b72:	3f 2e       	mov	r3, r31
 b74:	97 ff       	sbrs	r25, 7
 b76:	09 c0       	rjmp	.+18     	; 0xb8a <vfprintf+0x212>
 b78:	90 95       	com	r25
 b7a:	80 95       	com	r24
 b7c:	70 95       	com	r23
 b7e:	61 95       	neg	r22
 b80:	7f 4f       	sbci	r23, 0xFF	; 255
 b82:	8f 4f       	sbci	r24, 0xFF	; 255
 b84:	9f 4f       	sbci	r25, 0xFF	; 255
 b86:	f0 68       	ori	r31, 0x80	; 128
 b88:	3f 2e       	mov	r3, r31
 b8a:	2a e0       	ldi	r18, 0x0A	; 10
 b8c:	30 e0       	ldi	r19, 0x00	; 0
 b8e:	a3 01       	movw	r20, r6
 b90:	0e 94 ef 06 	call	0xdde	; 0xdde <__ultoa_invert>
 b94:	88 2e       	mov	r8, r24
 b96:	86 18       	sub	r8, r6
 b98:	45 c0       	rjmp	.+138    	; 0xc24 <vfprintf+0x2ac>
 b9a:	85 37       	cpi	r24, 0x75	; 117
 b9c:	31 f4       	brne	.+12     	; 0xbaa <vfprintf+0x232>
 b9e:	23 2d       	mov	r18, r3
 ba0:	2f 7e       	andi	r18, 0xEF	; 239
 ba2:	b2 2e       	mov	r11, r18
 ba4:	2a e0       	ldi	r18, 0x0A	; 10
 ba6:	30 e0       	ldi	r19, 0x00	; 0
 ba8:	25 c0       	rjmp	.+74     	; 0xbf4 <vfprintf+0x27c>
 baa:	93 2d       	mov	r25, r3
 bac:	99 7f       	andi	r25, 0xF9	; 249
 bae:	b9 2e       	mov	r11, r25
 bb0:	8f 36       	cpi	r24, 0x6F	; 111
 bb2:	c1 f0       	breq	.+48     	; 0xbe4 <vfprintf+0x26c>
 bb4:	18 f4       	brcc	.+6      	; 0xbbc <vfprintf+0x244>
 bb6:	88 35       	cpi	r24, 0x58	; 88
 bb8:	79 f0       	breq	.+30     	; 0xbd8 <vfprintf+0x260>
 bba:	b5 c0       	rjmp	.+362    	; 0xd26 <vfprintf+0x3ae>
 bbc:	80 37       	cpi	r24, 0x70	; 112
 bbe:	19 f0       	breq	.+6      	; 0xbc6 <vfprintf+0x24e>
 bc0:	88 37       	cpi	r24, 0x78	; 120
 bc2:	21 f0       	breq	.+8      	; 0xbcc <vfprintf+0x254>
 bc4:	b0 c0       	rjmp	.+352    	; 0xd26 <vfprintf+0x3ae>
 bc6:	e9 2f       	mov	r30, r25
 bc8:	e0 61       	ori	r30, 0x10	; 16
 bca:	be 2e       	mov	r11, r30
 bcc:	b4 fe       	sbrs	r11, 4
 bce:	0d c0       	rjmp	.+26     	; 0xbea <vfprintf+0x272>
 bd0:	fb 2d       	mov	r31, r11
 bd2:	f4 60       	ori	r31, 0x04	; 4
 bd4:	bf 2e       	mov	r11, r31
 bd6:	09 c0       	rjmp	.+18     	; 0xbea <vfprintf+0x272>
 bd8:	34 fe       	sbrs	r3, 4
 bda:	0a c0       	rjmp	.+20     	; 0xbf0 <vfprintf+0x278>
 bdc:	29 2f       	mov	r18, r25
 bde:	26 60       	ori	r18, 0x06	; 6
 be0:	b2 2e       	mov	r11, r18
 be2:	06 c0       	rjmp	.+12     	; 0xbf0 <vfprintf+0x278>
 be4:	28 e0       	ldi	r18, 0x08	; 8
 be6:	30 e0       	ldi	r19, 0x00	; 0
 be8:	05 c0       	rjmp	.+10     	; 0xbf4 <vfprintf+0x27c>
 bea:	20 e1       	ldi	r18, 0x10	; 16
 bec:	30 e0       	ldi	r19, 0x00	; 0
 bee:	02 c0       	rjmp	.+4      	; 0xbf4 <vfprintf+0x27c>
 bf0:	20 e1       	ldi	r18, 0x10	; 16
 bf2:	32 e0       	ldi	r19, 0x02	; 2
 bf4:	f8 01       	movw	r30, r16
 bf6:	b7 fe       	sbrs	r11, 7
 bf8:	07 c0       	rjmp	.+14     	; 0xc08 <vfprintf+0x290>
 bfa:	60 81       	ld	r22, Z
 bfc:	71 81       	ldd	r23, Z+1	; 0x01
 bfe:	82 81       	ldd	r24, Z+2	; 0x02
 c00:	93 81       	ldd	r25, Z+3	; 0x03
 c02:	0c 5f       	subi	r16, 0xFC	; 252
 c04:	1f 4f       	sbci	r17, 0xFF	; 255
 c06:	06 c0       	rjmp	.+12     	; 0xc14 <vfprintf+0x29c>
 c08:	60 81       	ld	r22, Z
 c0a:	71 81       	ldd	r23, Z+1	; 0x01
 c0c:	80 e0       	ldi	r24, 0x00	; 0
 c0e:	90 e0       	ldi	r25, 0x00	; 0
 c10:	0e 5f       	subi	r16, 0xFE	; 254
 c12:	1f 4f       	sbci	r17, 0xFF	; 255
 c14:	a3 01       	movw	r20, r6
 c16:	0e 94 ef 06 	call	0xdde	; 0xdde <__ultoa_invert>
 c1a:	88 2e       	mov	r8, r24
 c1c:	86 18       	sub	r8, r6
 c1e:	fb 2d       	mov	r31, r11
 c20:	ff 77       	andi	r31, 0x7F	; 127
 c22:	3f 2e       	mov	r3, r31
 c24:	36 fe       	sbrs	r3, 6
 c26:	0d c0       	rjmp	.+26     	; 0xc42 <vfprintf+0x2ca>
 c28:	23 2d       	mov	r18, r3
 c2a:	2e 7f       	andi	r18, 0xFE	; 254
 c2c:	a2 2e       	mov	r10, r18
 c2e:	89 14       	cp	r8, r9
 c30:	58 f4       	brcc	.+22     	; 0xc48 <vfprintf+0x2d0>
 c32:	34 fe       	sbrs	r3, 4
 c34:	0b c0       	rjmp	.+22     	; 0xc4c <vfprintf+0x2d4>
 c36:	32 fc       	sbrc	r3, 2
 c38:	09 c0       	rjmp	.+18     	; 0xc4c <vfprintf+0x2d4>
 c3a:	83 2d       	mov	r24, r3
 c3c:	8e 7e       	andi	r24, 0xEE	; 238
 c3e:	a8 2e       	mov	r10, r24
 c40:	05 c0       	rjmp	.+10     	; 0xc4c <vfprintf+0x2d4>
 c42:	b8 2c       	mov	r11, r8
 c44:	a3 2c       	mov	r10, r3
 c46:	03 c0       	rjmp	.+6      	; 0xc4e <vfprintf+0x2d6>
 c48:	b8 2c       	mov	r11, r8
 c4a:	01 c0       	rjmp	.+2      	; 0xc4e <vfprintf+0x2d6>
 c4c:	b9 2c       	mov	r11, r9
 c4e:	a4 fe       	sbrs	r10, 4
 c50:	0f c0       	rjmp	.+30     	; 0xc70 <vfprintf+0x2f8>
 c52:	fe 01       	movw	r30, r28
 c54:	e8 0d       	add	r30, r8
 c56:	f1 1d       	adc	r31, r1
 c58:	80 81       	ld	r24, Z
 c5a:	80 33       	cpi	r24, 0x30	; 48
 c5c:	21 f4       	brne	.+8      	; 0xc66 <vfprintf+0x2ee>
 c5e:	9a 2d       	mov	r25, r10
 c60:	99 7e       	andi	r25, 0xE9	; 233
 c62:	a9 2e       	mov	r10, r25
 c64:	09 c0       	rjmp	.+18     	; 0xc78 <vfprintf+0x300>
 c66:	a2 fe       	sbrs	r10, 2
 c68:	06 c0       	rjmp	.+12     	; 0xc76 <vfprintf+0x2fe>
 c6a:	b3 94       	inc	r11
 c6c:	b3 94       	inc	r11
 c6e:	04 c0       	rjmp	.+8      	; 0xc78 <vfprintf+0x300>
 c70:	8a 2d       	mov	r24, r10
 c72:	86 78       	andi	r24, 0x86	; 134
 c74:	09 f0       	breq	.+2      	; 0xc78 <vfprintf+0x300>
 c76:	b3 94       	inc	r11
 c78:	a3 fc       	sbrc	r10, 3
 c7a:	11 c0       	rjmp	.+34     	; 0xc9e <vfprintf+0x326>
 c7c:	a0 fe       	sbrs	r10, 0
 c7e:	06 c0       	rjmp	.+12     	; 0xc8c <vfprintf+0x314>
 c80:	b2 14       	cp	r11, r2
 c82:	88 f4       	brcc	.+34     	; 0xca6 <vfprintf+0x32e>
 c84:	28 0c       	add	r2, r8
 c86:	92 2c       	mov	r9, r2
 c88:	9b 18       	sub	r9, r11
 c8a:	0e c0       	rjmp	.+28     	; 0xca8 <vfprintf+0x330>
 c8c:	b2 14       	cp	r11, r2
 c8e:	60 f4       	brcc	.+24     	; 0xca8 <vfprintf+0x330>
 c90:	b6 01       	movw	r22, r12
 c92:	80 e2       	ldi	r24, 0x20	; 32
 c94:	90 e0       	ldi	r25, 0x00	; 0
 c96:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 c9a:	b3 94       	inc	r11
 c9c:	f7 cf       	rjmp	.-18     	; 0xc8c <vfprintf+0x314>
 c9e:	b2 14       	cp	r11, r2
 ca0:	18 f4       	brcc	.+6      	; 0xca8 <vfprintf+0x330>
 ca2:	2b 18       	sub	r2, r11
 ca4:	02 c0       	rjmp	.+4      	; 0xcaa <vfprintf+0x332>
 ca6:	98 2c       	mov	r9, r8
 ca8:	21 2c       	mov	r2, r1
 caa:	a4 fe       	sbrs	r10, 4
 cac:	10 c0       	rjmp	.+32     	; 0xcce <vfprintf+0x356>
 cae:	b6 01       	movw	r22, r12
 cb0:	80 e3       	ldi	r24, 0x30	; 48
 cb2:	90 e0       	ldi	r25, 0x00	; 0
 cb4:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 cb8:	a2 fe       	sbrs	r10, 2
 cba:	17 c0       	rjmp	.+46     	; 0xcea <vfprintf+0x372>
 cbc:	a1 fc       	sbrc	r10, 1
 cbe:	03 c0       	rjmp	.+6      	; 0xcc6 <vfprintf+0x34e>
 cc0:	88 e7       	ldi	r24, 0x78	; 120
 cc2:	90 e0       	ldi	r25, 0x00	; 0
 cc4:	02 c0       	rjmp	.+4      	; 0xcca <vfprintf+0x352>
 cc6:	88 e5       	ldi	r24, 0x58	; 88
 cc8:	90 e0       	ldi	r25, 0x00	; 0
 cca:	b6 01       	movw	r22, r12
 ccc:	0c c0       	rjmp	.+24     	; 0xce6 <vfprintf+0x36e>
 cce:	8a 2d       	mov	r24, r10
 cd0:	86 78       	andi	r24, 0x86	; 134
 cd2:	59 f0       	breq	.+22     	; 0xcea <vfprintf+0x372>
 cd4:	a1 fe       	sbrs	r10, 1
 cd6:	02 c0       	rjmp	.+4      	; 0xcdc <vfprintf+0x364>
 cd8:	8b e2       	ldi	r24, 0x2B	; 43
 cda:	01 c0       	rjmp	.+2      	; 0xcde <vfprintf+0x366>
 cdc:	80 e2       	ldi	r24, 0x20	; 32
 cde:	a7 fc       	sbrc	r10, 7
 ce0:	8d e2       	ldi	r24, 0x2D	; 45
 ce2:	b6 01       	movw	r22, r12
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 cea:	89 14       	cp	r8, r9
 cec:	38 f4       	brcc	.+14     	; 0xcfc <vfprintf+0x384>
 cee:	b6 01       	movw	r22, r12
 cf0:	80 e3       	ldi	r24, 0x30	; 48
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 cf8:	9a 94       	dec	r9
 cfa:	f7 cf       	rjmp	.-18     	; 0xcea <vfprintf+0x372>
 cfc:	8a 94       	dec	r8
 cfe:	f3 01       	movw	r30, r6
 d00:	e8 0d       	add	r30, r8
 d02:	f1 1d       	adc	r31, r1
 d04:	80 81       	ld	r24, Z
 d06:	b6 01       	movw	r22, r12
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 d0e:	81 10       	cpse	r8, r1
 d10:	f5 cf       	rjmp	.-22     	; 0xcfc <vfprintf+0x384>
 d12:	22 20       	and	r2, r2
 d14:	09 f4       	brne	.+2      	; 0xd18 <vfprintf+0x3a0>
 d16:	42 ce       	rjmp	.-892    	; 0x99c <vfprintf+0x24>
 d18:	b6 01       	movw	r22, r12
 d1a:	80 e2       	ldi	r24, 0x20	; 32
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	0e 94 b3 06 	call	0xd66	; 0xd66 <fputc>
 d22:	2a 94       	dec	r2
 d24:	f6 cf       	rjmp	.-20     	; 0xd12 <vfprintf+0x39a>
 d26:	f6 01       	movw	r30, r12
 d28:	86 81       	ldd	r24, Z+6	; 0x06
 d2a:	97 81       	ldd	r25, Z+7	; 0x07
 d2c:	02 c0       	rjmp	.+4      	; 0xd32 <vfprintf+0x3ba>
 d2e:	8f ef       	ldi	r24, 0xFF	; 255
 d30:	9f ef       	ldi	r25, 0xFF	; 255
 d32:	2b 96       	adiw	r28, 0x0b	; 11
 d34:	e2 e1       	ldi	r30, 0x12	; 18
 d36:	0c 94 69 07 	jmp	0xed2	; 0xed2 <__epilogue_restores__>

00000d3a <strnlen_P>:
 d3a:	fc 01       	movw	r30, r24
 d3c:	05 90       	lpm	r0, Z+
 d3e:	61 50       	subi	r22, 0x01	; 1
 d40:	70 40       	sbci	r23, 0x00	; 0
 d42:	01 10       	cpse	r0, r1
 d44:	d8 f7       	brcc	.-10     	; 0xd3c <strnlen_P+0x2>
 d46:	80 95       	com	r24
 d48:	90 95       	com	r25
 d4a:	8e 0f       	add	r24, r30
 d4c:	9f 1f       	adc	r25, r31
 d4e:	08 95       	ret

00000d50 <strnlen>:
 d50:	fc 01       	movw	r30, r24
 d52:	61 50       	subi	r22, 0x01	; 1
 d54:	70 40       	sbci	r23, 0x00	; 0
 d56:	01 90       	ld	r0, Z+
 d58:	01 10       	cpse	r0, r1
 d5a:	d8 f7       	brcc	.-10     	; 0xd52 <strnlen+0x2>
 d5c:	80 95       	com	r24
 d5e:	90 95       	com	r25
 d60:	8e 0f       	add	r24, r30
 d62:	9f 1f       	adc	r25, r31
 d64:	08 95       	ret

00000d66 <fputc>:
 d66:	0f 93       	push	r16
 d68:	1f 93       	push	r17
 d6a:	cf 93       	push	r28
 d6c:	df 93       	push	r29
 d6e:	fb 01       	movw	r30, r22
 d70:	23 81       	ldd	r18, Z+3	; 0x03
 d72:	21 fd       	sbrc	r18, 1
 d74:	03 c0       	rjmp	.+6      	; 0xd7c <fputc+0x16>
 d76:	8f ef       	ldi	r24, 0xFF	; 255
 d78:	9f ef       	ldi	r25, 0xFF	; 255
 d7a:	2c c0       	rjmp	.+88     	; 0xdd4 <fputc+0x6e>
 d7c:	22 ff       	sbrs	r18, 2
 d7e:	16 c0       	rjmp	.+44     	; 0xdac <fputc+0x46>
 d80:	46 81       	ldd	r20, Z+6	; 0x06
 d82:	57 81       	ldd	r21, Z+7	; 0x07
 d84:	24 81       	ldd	r18, Z+4	; 0x04
 d86:	35 81       	ldd	r19, Z+5	; 0x05
 d88:	42 17       	cp	r20, r18
 d8a:	53 07       	cpc	r21, r19
 d8c:	44 f4       	brge	.+16     	; 0xd9e <fputc+0x38>
 d8e:	a0 81       	ld	r26, Z
 d90:	b1 81       	ldd	r27, Z+1	; 0x01
 d92:	9d 01       	movw	r18, r26
 d94:	2f 5f       	subi	r18, 0xFF	; 255
 d96:	3f 4f       	sbci	r19, 0xFF	; 255
 d98:	31 83       	std	Z+1, r19	; 0x01
 d9a:	20 83       	st	Z, r18
 d9c:	8c 93       	st	X, r24
 d9e:	26 81       	ldd	r18, Z+6	; 0x06
 da0:	37 81       	ldd	r19, Z+7	; 0x07
 da2:	2f 5f       	subi	r18, 0xFF	; 255
 da4:	3f 4f       	sbci	r19, 0xFF	; 255
 da6:	37 83       	std	Z+7, r19	; 0x07
 da8:	26 83       	std	Z+6, r18	; 0x06
 daa:	14 c0       	rjmp	.+40     	; 0xdd4 <fputc+0x6e>
 dac:	8b 01       	movw	r16, r22
 dae:	ec 01       	movw	r28, r24
 db0:	fb 01       	movw	r30, r22
 db2:	00 84       	ldd	r0, Z+8	; 0x08
 db4:	f1 85       	ldd	r31, Z+9	; 0x09
 db6:	e0 2d       	mov	r30, r0
 db8:	09 95       	icall
 dba:	89 2b       	or	r24, r25
 dbc:	e1 f6       	brne	.-72     	; 0xd76 <fputc+0x10>
 dbe:	d8 01       	movw	r26, r16
 dc0:	16 96       	adiw	r26, 0x06	; 6
 dc2:	8d 91       	ld	r24, X+
 dc4:	9c 91       	ld	r25, X
 dc6:	17 97       	sbiw	r26, 0x07	; 7
 dc8:	01 96       	adiw	r24, 0x01	; 1
 dca:	17 96       	adiw	r26, 0x07	; 7
 dcc:	9c 93       	st	X, r25
 dce:	8e 93       	st	-X, r24
 dd0:	16 97       	sbiw	r26, 0x06	; 6
 dd2:	ce 01       	movw	r24, r28
 dd4:	df 91       	pop	r29
 dd6:	cf 91       	pop	r28
 dd8:	1f 91       	pop	r17
 dda:	0f 91       	pop	r16
 ddc:	08 95       	ret

00000dde <__ultoa_invert>:
 dde:	fa 01       	movw	r30, r20
 de0:	aa 27       	eor	r26, r26
 de2:	28 30       	cpi	r18, 0x08	; 8
 de4:	51 f1       	breq	.+84     	; 0xe3a <__ultoa_invert+0x5c>
 de6:	20 31       	cpi	r18, 0x10	; 16
 de8:	81 f1       	breq	.+96     	; 0xe4a <__ultoa_invert+0x6c>
 dea:	e8 94       	clt
 dec:	6f 93       	push	r22
 dee:	6e 7f       	andi	r22, 0xFE	; 254
 df0:	6e 5f       	subi	r22, 0xFE	; 254
 df2:	7f 4f       	sbci	r23, 0xFF	; 255
 df4:	8f 4f       	sbci	r24, 0xFF	; 255
 df6:	9f 4f       	sbci	r25, 0xFF	; 255
 df8:	af 4f       	sbci	r26, 0xFF	; 255
 dfa:	b1 e0       	ldi	r27, 0x01	; 1
 dfc:	3e d0       	rcall	.+124    	; 0xe7a <__ultoa_invert+0x9c>
 dfe:	b4 e0       	ldi	r27, 0x04	; 4
 e00:	3c d0       	rcall	.+120    	; 0xe7a <__ultoa_invert+0x9c>
 e02:	67 0f       	add	r22, r23
 e04:	78 1f       	adc	r23, r24
 e06:	89 1f       	adc	r24, r25
 e08:	9a 1f       	adc	r25, r26
 e0a:	a1 1d       	adc	r26, r1
 e0c:	68 0f       	add	r22, r24
 e0e:	79 1f       	adc	r23, r25
 e10:	8a 1f       	adc	r24, r26
 e12:	91 1d       	adc	r25, r1
 e14:	a1 1d       	adc	r26, r1
 e16:	6a 0f       	add	r22, r26
 e18:	71 1d       	adc	r23, r1
 e1a:	81 1d       	adc	r24, r1
 e1c:	91 1d       	adc	r25, r1
 e1e:	a1 1d       	adc	r26, r1
 e20:	20 d0       	rcall	.+64     	; 0xe62 <__ultoa_invert+0x84>
 e22:	09 f4       	brne	.+2      	; 0xe26 <__ultoa_invert+0x48>
 e24:	68 94       	set
 e26:	3f 91       	pop	r19
 e28:	2a e0       	ldi	r18, 0x0A	; 10
 e2a:	26 9f       	mul	r18, r22
 e2c:	11 24       	eor	r1, r1
 e2e:	30 19       	sub	r19, r0
 e30:	30 5d       	subi	r19, 0xD0	; 208
 e32:	31 93       	st	Z+, r19
 e34:	de f6       	brtc	.-74     	; 0xdec <__ultoa_invert+0xe>
 e36:	cf 01       	movw	r24, r30
 e38:	08 95       	ret
 e3a:	46 2f       	mov	r20, r22
 e3c:	47 70       	andi	r20, 0x07	; 7
 e3e:	40 5d       	subi	r20, 0xD0	; 208
 e40:	41 93       	st	Z+, r20
 e42:	b3 e0       	ldi	r27, 0x03	; 3
 e44:	0f d0       	rcall	.+30     	; 0xe64 <__ultoa_invert+0x86>
 e46:	c9 f7       	brne	.-14     	; 0xe3a <__ultoa_invert+0x5c>
 e48:	f6 cf       	rjmp	.-20     	; 0xe36 <__ultoa_invert+0x58>
 e4a:	46 2f       	mov	r20, r22
 e4c:	4f 70       	andi	r20, 0x0F	; 15
 e4e:	40 5d       	subi	r20, 0xD0	; 208
 e50:	4a 33       	cpi	r20, 0x3A	; 58
 e52:	18 f0       	brcs	.+6      	; 0xe5a <__ultoa_invert+0x7c>
 e54:	49 5d       	subi	r20, 0xD9	; 217
 e56:	31 fd       	sbrc	r19, 1
 e58:	40 52       	subi	r20, 0x20	; 32
 e5a:	41 93       	st	Z+, r20
 e5c:	02 d0       	rcall	.+4      	; 0xe62 <__ultoa_invert+0x84>
 e5e:	a9 f7       	brne	.-22     	; 0xe4a <__ultoa_invert+0x6c>
 e60:	ea cf       	rjmp	.-44     	; 0xe36 <__ultoa_invert+0x58>
 e62:	b4 e0       	ldi	r27, 0x04	; 4
 e64:	a6 95       	lsr	r26
 e66:	97 95       	ror	r25
 e68:	87 95       	ror	r24
 e6a:	77 95       	ror	r23
 e6c:	67 95       	ror	r22
 e6e:	ba 95       	dec	r27
 e70:	c9 f7       	brne	.-14     	; 0xe64 <__ultoa_invert+0x86>
 e72:	00 97       	sbiw	r24, 0x00	; 0
 e74:	61 05       	cpc	r22, r1
 e76:	71 05       	cpc	r23, r1
 e78:	08 95       	ret
 e7a:	9b 01       	movw	r18, r22
 e7c:	ac 01       	movw	r20, r24
 e7e:	0a 2e       	mov	r0, r26
 e80:	06 94       	lsr	r0
 e82:	57 95       	ror	r21
 e84:	47 95       	ror	r20
 e86:	37 95       	ror	r19
 e88:	27 95       	ror	r18
 e8a:	ba 95       	dec	r27
 e8c:	c9 f7       	brne	.-14     	; 0xe80 <__ultoa_invert+0xa2>
 e8e:	62 0f       	add	r22, r18
 e90:	73 1f       	adc	r23, r19
 e92:	84 1f       	adc	r24, r20
 e94:	95 1f       	adc	r25, r21
 e96:	a0 1d       	adc	r26, r0
 e98:	08 95       	ret

00000e9a <__prologue_saves__>:
 e9a:	2f 92       	push	r2
 e9c:	3f 92       	push	r3
 e9e:	4f 92       	push	r4
 ea0:	5f 92       	push	r5
 ea2:	6f 92       	push	r6
 ea4:	7f 92       	push	r7
 ea6:	8f 92       	push	r8
 ea8:	9f 92       	push	r9
 eaa:	af 92       	push	r10
 eac:	bf 92       	push	r11
 eae:	cf 92       	push	r12
 eb0:	df 92       	push	r13
 eb2:	ef 92       	push	r14
 eb4:	ff 92       	push	r15
 eb6:	0f 93       	push	r16
 eb8:	1f 93       	push	r17
 eba:	cf 93       	push	r28
 ebc:	df 93       	push	r29
 ebe:	cd b7       	in	r28, 0x3d	; 61
 ec0:	de b7       	in	r29, 0x3e	; 62
 ec2:	ca 1b       	sub	r28, r26
 ec4:	db 0b       	sbc	r29, r27
 ec6:	0f b6       	in	r0, 0x3f	; 63
 ec8:	f8 94       	cli
 eca:	de bf       	out	0x3e, r29	; 62
 ecc:	0f be       	out	0x3f, r0	; 63
 ece:	cd bf       	out	0x3d, r28	; 61
 ed0:	09 94       	ijmp

00000ed2 <__epilogue_restores__>:
 ed2:	2a 88       	ldd	r2, Y+18	; 0x12
 ed4:	39 88       	ldd	r3, Y+17	; 0x11
 ed6:	48 88       	ldd	r4, Y+16	; 0x10
 ed8:	5f 84       	ldd	r5, Y+15	; 0x0f
 eda:	6e 84       	ldd	r6, Y+14	; 0x0e
 edc:	7d 84       	ldd	r7, Y+13	; 0x0d
 ede:	8c 84       	ldd	r8, Y+12	; 0x0c
 ee0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ee2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ee4:	b9 84       	ldd	r11, Y+9	; 0x09
 ee6:	c8 84       	ldd	r12, Y+8	; 0x08
 ee8:	df 80       	ldd	r13, Y+7	; 0x07
 eea:	ee 80       	ldd	r14, Y+6	; 0x06
 eec:	fd 80       	ldd	r15, Y+5	; 0x05
 eee:	0c 81       	ldd	r16, Y+4	; 0x04
 ef0:	1b 81       	ldd	r17, Y+3	; 0x03
 ef2:	aa 81       	ldd	r26, Y+2	; 0x02
 ef4:	b9 81       	ldd	r27, Y+1	; 0x01
 ef6:	ce 0f       	add	r28, r30
 ef8:	d1 1d       	adc	r29, r1
 efa:	0f b6       	in	r0, 0x3f	; 63
 efc:	f8 94       	cli
 efe:	de bf       	out	0x3e, r29	; 62
 f00:	0f be       	out	0x3f, r0	; 63
 f02:	cd bf       	out	0x3d, r28	; 61
 f04:	ed 01       	movw	r28, r26
 f06:	08 95       	ret

00000f08 <_exit>:
 f08:	f8 94       	cli

00000f0a <__stop_program>:
 f0a:	ff cf       	rjmp	.-2      	; 0xf0a <__stop_program>
