
final_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000ca0  00000d34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013a  00800104  00800104  00000d38  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d40  00000000  00000000  00000e8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000096b  00000000  00000000  00001bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000812  00000000  00000000  00002537  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000304  00000000  00000000  00002d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ca  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000060b  00000000  00000000  0000361a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  00003c25  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 b8 02 	jmp	0x570	; 0x570 <__vector_3>
  10:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__vector_4>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_22>

0000005c <LCD_SegTable>:
  5c:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
  6c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
  7c:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
  8c:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
  9c:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
  ac:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
  bc:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d4 e0       	ldi	r29, 0x04	; 4
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e0 ea       	ldi	r30, 0xA0	; 160
  dc:	fc e0       	ldi	r31, 0x0C	; 12
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a4 30       	cpi	r26, 0x04	; 4
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	22 e0       	ldi	r18, 0x02	; 2
  ec:	a4 e0       	ldi	r26, 0x04	; 4
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	ae 33       	cpi	r26, 0x3E	; 62
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 27 02 	call	0x44e	; 0x44e <main>
  fe:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <LCD_Init>:
{ 
   uint8_t StrBuff[LCD_TEXTBUFFER_SIZE]; 

   strcpy_P(StrBuff, FlashData); 
   LCD_puts(StrBuff); 
} 
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	87 ee       	ldi	r24, 0xE7	; 231
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	2f e0       	ldi	r18, 0x0F	; 15
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
 118:	85 ee       	ldi	r24, 0xE5	; 229
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	27 eb       	ldi	r18, 0xB7	; 183
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
 122:	86 ee       	ldi	r24, 0xE6	; 230
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	27 e0       	ldi	r18, 0x07	; 7
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
 12c:	84 ee       	ldi	r24, 0xE4	; 228
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	20 ec       	ldi	r18, 0xC0	; 192
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
 136:	84 ee       	ldi	r24, 0xE4	; 228
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	24 ee       	ldi	r18, 0xE4	; 228
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	20 81       	ld	r18, Z
 142:	28 60       	ori	r18, 0x08	; 8
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
 148:	00 00       	nop
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <LCD_puts>:

void LCD_puts(uint8_t *Data) 
{ 
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	00 d0       	rcall	.+0      	; 0x156 <LCD_puts+0x6>
 156:	00 d0       	rcall	.+0      	; 0x158 <LCD_puts+0x8>
 158:	1f 92       	push	r1
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	9d 83       	std	Y+5, r25	; 0x05
 160:	8c 83       	std	Y+4, r24	; 0x04
   uint8_t LoadB; 
    
   for (LoadB = 0; LoadB < 20; LoadB++) 
 162:	19 82       	std	Y+1, r1	; 0x01
 164:	2d c0       	rjmp	.+90     	; 0x1c0 <LCD_puts+0x70>
   { 
      uint8_t CByte = *(Data++); 
 166:	8c 81       	ldd	r24, Y+4	; 0x04
 168:	9d 81       	ldd	r25, Y+5	; 0x05
 16a:	9c 01       	movw	r18, r24
 16c:	2f 5f       	subi	r18, 0xFF	; 255
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
 170:	3d 83       	std	Y+5, r19	; 0x05
 172:	2c 83       	std	Y+4, r18	; 0x04
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	8b 83       	std	Y+3, r24	; 0x03
    
      if ((CByte >= '*') && (CByte <= 'z')) 
 17a:	8b 81       	ldd	r24, Y+3	; 0x03
 17c:	8a 32       	cpi	r24, 0x2A	; 42
 17e:	90 f0       	brcs	.+36     	; 0x1a4 <LCD_puts+0x54>
 180:	8b 81       	ldd	r24, Y+3	; 0x03
 182:	8b 37       	cpi	r24, 0x7B	; 123
 184:	78 f4       	brcc	.+30     	; 0x1a4 <LCD_puts+0x54>
        TextBuffer[LoadB] = ((CByte == ' ')? 0xFF : (CByte - '*')); 
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	88 2f       	mov	r24, r24
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	2b 81       	ldd	r18, Y+3	; 0x03
 18e:	20 32       	cpi	r18, 0x20	; 32
 190:	19 f0       	breq	.+6      	; 0x198 <LCD_puts+0x48>
 192:	2b 81       	ldd	r18, Y+3	; 0x03
 194:	2a 52       	subi	r18, 0x2A	; 42
 196:	01 c0       	rjmp	.+2      	; 0x19a <LCD_puts+0x4a>
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	87 5f       	subi	r24, 0xF7	; 247
 19c:	9e 4f       	sbci	r25, 0xFE	; 254
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
 1a2:	0b c0       	rjmp	.+22     	; 0x1ba <LCD_puts+0x6a>
      else if (CByte == 0x00) 
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	88 23       	and	r24, r24
 1a8:	79 f0       	breq	.+30     	; 0x1c8 <LCD_puts+0x78>
        break; 
      else 
        TextBuffer[LoadB] = 0xFF;        
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	87 5f       	subi	r24, 0xF7	; 247
 1b2:	9e 4f       	sbci	r25, 0xFE	; 254
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18

void LCD_puts(uint8_t *Data) 
{ 
   uint8_t LoadB; 
    
   for (LoadB = 0; LoadB < 20; LoadB++) 
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	89 83       	std	Y+1, r24	; 0x01
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	84 31       	cpi	r24, 0x14	; 20
 1c4:	80 f2       	brcs	.-96     	; 0x166 <LCD_puts+0x16>
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <LCD_puts+0x7a>
      uint8_t CByte = *(Data++); 
    
      if ((CByte >= '*') && (CByte <= 'z')) 
        TextBuffer[LoadB] = ((CByte == ' ')? 0xFF : (CByte - '*')); 
      else if (CByte == 0x00) 
        break; 
 1c8:	00 00       	nop
      else 
        TextBuffer[LoadB] = 0xFF;        
   } 

   ScrollMode  = ((LoadB > 6)? TRUE : FALSE); 
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	99 81       	ldd	r25, Y+1	; 0x01
 1ce:	97 30       	cpi	r25, 0x07	; 7
 1d0:	08 f4       	brcc	.+2      	; 0x1d4 <LCD_puts+0x84>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ScrollMode>
   ScrollCount = LCD_DELAYCOUNT_DEFAULT; 
 1d8:	8a e0       	ldi	r24, 0x0A	; 10
 1da:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ScrollCount>

   for (uint8_t Nulls = 0; Nulls < 7; Nulls++) 
 1de:	1a 82       	std	Y+2, r1	; 0x02
 1e0:	0e c0       	rjmp	.+28     	; 0x1fe <LCD_puts+0xae>
      TextBuffer[LoadB++] = 0xFF; 
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	98 0f       	add	r25, r24
 1e8:	99 83       	std	Y+1, r25	; 0x01
 1ea:	88 2f       	mov	r24, r24
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	87 5f       	subi	r24, 0xF7	; 247
 1f0:	9e 4f       	sbci	r25, 0xFE	; 254
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
   } 

   ScrollMode  = ((LoadB > 6)? TRUE : FALSE); 
   ScrollCount = LCD_DELAYCOUNT_DEFAULT; 

   for (uint8_t Nulls = 0; Nulls < 7; Nulls++) 
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	8a 83       	std	Y+2, r24	; 0x02
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	87 30       	cpi	r24, 0x07	; 7
 202:	78 f3       	brcs	.-34     	; 0x1e2 <LCD_puts+0x92>
      TextBuffer[LoadB++] = 0xFF; 
    
   TextBuffer[LoadB] = 0x00; 
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	88 2f       	mov	r24, r24
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	87 5f       	subi	r24, 0xF7	; 247
 20c:	9e 4f       	sbci	r25, 0xFE	; 254
 20e:	fc 01       	movw	r30, r24
 210:	10 82       	st	Z, r1
   StrStart   = 0; 
 212:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <StrStart>
   StrEnd     = LoadB;    
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <StrEnd>

   UpdateLCD  = TRUE; 
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <UpdateLCD>
} 
 222:	00 00       	nop
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <LCD_WriteChar>:

void LCD_WriteChar(uint8_t Byte, uint8_t Digit) 
{ 
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	2d 97       	sbiw	r28, 0x0d	; 13
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	8c 87       	std	Y+12, r24	; 0x0c
 24a:	6d 87       	std	Y+13, r22	; 0x0d
   uint16_t SegData  = 0x00; 
 24c:	1a 82       	std	Y+2, r1	; 0x02
 24e:	19 82       	std	Y+1, r1	; 0x01
   uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1)); 
 250:	8d 85       	ldd	r24, Y+13	; 0x0d
 252:	86 95       	lsr	r24
 254:	88 2f       	mov	r24, r24
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	8b 5d       	subi	r24, 0xDB	; 219
 25a:	9e 4f       	sbci	r25, 0xFE	; 254
 25c:	9c 83       	std	Y+4, r25	; 0x04
 25e:	8b 83       	std	Y+3, r24	; 0x03

   if (Byte != 0xFF) 
 260:	8c 85       	ldd	r24, Y+12	; 0x0c
 262:	8f 3f       	cpi	r24, 0xFF	; 255
 264:	b9 f0       	breq	.+46     	; 0x294 <LCD_WriteChar+0x60>
     SegData = pgm_read_word(&LCD_SegTable[Byte]);    
 266:	8c 85       	ldd	r24, Y+12	; 0x0c
 268:	88 2f       	mov	r24, r24
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	84 5a       	subi	r24, 0xA4	; 164
 272:	9f 4f       	sbci	r25, 0xFF	; 255
 274:	99 87       	std	Y+9, r25	; 0x09
 276:	88 87       	std	Y+8, r24	; 0x08
 278:	88 85       	ldd	r24, Y+8	; 0x08
 27a:	99 85       	ldd	r25, Y+9	; 0x09
 27c:	fc 01       	movw	r30, r24
 27e:	25 91       	lpm	r18, Z+
 280:	34 91       	lpm	r19, Z
 282:	cf 01       	movw	r24, r30
 284:	3b 87       	std	Y+11, r19	; 0x0b
 286:	2a 87       	std	Y+10, r18	; 0x0a
 288:	99 87       	std	Y+9, r25	; 0x09
 28a:	88 87       	std	Y+8, r24	; 0x08
 28c:	8a 85       	ldd	r24, Y+10	; 0x0a
 28e:	9b 85       	ldd	r25, Y+11	; 0x0b
 290:	9a 83       	std	Y+2, r25	; 0x02
 292:	89 83       	std	Y+1, r24	; 0x01

   for (uint8_t BNib = 0; BNib < 4; BNib++) 
 294:	1d 82       	std	Y+5, r1	; 0x05
 296:	31 c0       	rjmp	.+98     	; 0x2fa <LCD_WriteChar+0xc6>
   { 
      uint8_t Mask          = 0xF0; 
 298:	80 ef       	ldi	r24, 0xF0	; 240
 29a:	8e 83       	std	Y+6, r24	; 0x06
      uint8_t MaskedSegData = (SegData & 0x0000F); 
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	8f 70       	andi	r24, 0x0F	; 15
 2a0:	8f 83       	std	Y+7, r24	; 0x07
    
      if (Digit & 0x01) 
 2a2:	8d 85       	ldd	r24, Y+13	; 0x0d
 2a4:	88 2f       	mov	r24, r24
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	81 70       	andi	r24, 0x01	; 1
 2aa:	99 27       	eor	r25, r25
 2ac:	89 2b       	or	r24, r25
 2ae:	31 f0       	breq	.+12     	; 0x2bc <LCD_WriteChar+0x88>
      { 
         Mask = 0x0F; 
 2b0:	8f e0       	ldi	r24, 0x0F	; 15
 2b2:	8e 83       	std	Y+6, r24	; 0x06
         MaskedSegData <<= 4; 
 2b4:	8f 81       	ldd	r24, Y+7	; 0x07
 2b6:	82 95       	swap	r24
 2b8:	80 7f       	andi	r24, 0xF0	; 240
 2ba:	8f 83       	std	Y+7, r24	; 0x07
      } 
        
      *BuffPtr = ((*BuffPtr & Mask) | MaskedSegData); 
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	9c 81       	ldd	r25, Y+4	; 0x04
 2c0:	fc 01       	movw	r30, r24
 2c2:	90 81       	ld	r25, Z
 2c4:	8e 81       	ldd	r24, Y+6	; 0x06
 2c6:	98 23       	and	r25, r24
 2c8:	8f 81       	ldd	r24, Y+7	; 0x07
 2ca:	29 2f       	mov	r18, r25
 2cc:	28 2b       	or	r18, r24
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	9c 81       	ldd	r25, Y+4	; 0x04
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18

      SegData >>= 4; 
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	9a 81       	ldd	r25, Y+2	; 0x02
 2da:	92 95       	swap	r25
 2dc:	82 95       	swap	r24
 2de:	8f 70       	andi	r24, 0x0F	; 15
 2e0:	89 27       	eor	r24, r25
 2e2:	9f 70       	andi	r25, 0x0F	; 15
 2e4:	89 27       	eor	r24, r25
 2e6:	9a 83       	std	Y+2, r25	; 0x02
 2e8:	89 83       	std	Y+1, r24	; 0x01
      BuffPtr  += 5; 
 2ea:	8b 81       	ldd	r24, Y+3	; 0x03
 2ec:	9c 81       	ldd	r25, Y+4	; 0x04
 2ee:	05 96       	adiw	r24, 0x05	; 5
 2f0:	9c 83       	std	Y+4, r25	; 0x04
 2f2:	8b 83       	std	Y+3, r24	; 0x03
   uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1)); 

   if (Byte != 0xFF) 
     SegData = pgm_read_word(&LCD_SegTable[Byte]);    

   for (uint8_t BNib = 0; BNib < 4; BNib++) 
 2f4:	8d 81       	ldd	r24, Y+5	; 0x05
 2f6:	8f 5f       	subi	r24, 0xFF	; 255
 2f8:	8d 83       	std	Y+5, r24	; 0x05
 2fa:	8d 81       	ldd	r24, Y+5	; 0x05
 2fc:	84 30       	cpi	r24, 0x04	; 4
 2fe:	60 f2       	brcs	.-104    	; 0x298 <LCD_WriteChar+0x64>
      *BuffPtr = ((*BuffPtr & Mask) | MaskedSegData); 

      SegData >>= 4; 
      BuffPtr  += 5; 
   } 
} 
 300:	00 00       	nop
 302:	2d 96       	adiw	r28, 0x0d	; 13
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <__vector_22>:

ISR(LCD_vect) 
{ 
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	00 d0       	rcall	.+0      	; 0x33e <__vector_22+0x2a>
 33e:	1f 92       	push	r1
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
   if (ScrollMode) 
 344:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <ScrollMode>
 348:	88 23       	and	r24, r24
 34a:	69 f0       	breq	.+26     	; 0x366 <__vector_22+0x52>
   { 
      if (!(ScrollCount)) 
 34c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ScrollCount>
 350:	88 23       	and	r24, r24
 352:	21 f4       	brne	.+8      	; 0x35c <__vector_22+0x48>
        UpdateLCD = TRUE; 
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <UpdateLCD>
 35a:	05 c0       	rjmp	.+10     	; 0x366 <__vector_22+0x52>
      else 
        ScrollCount--; 
 35c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ScrollCount>
 360:	81 50       	subi	r24, 0x01	; 1
 362:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ScrollCount>
   } 

   if (UpdateLCD) 
 366:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <UpdateLCD>
 36a:	88 23       	and	r24, r24
 36c:	09 f4       	brne	.+2      	; 0x370 <__vector_22+0x5c>
 36e:	41 c0       	rjmp	.+130    	; 0x3f2 <__vector_22+0xde>
   { 
      for (uint8_t Character = 0; Character < 6; Character++)
 370:	19 82       	std	Y+1, r1	; 0x01
 372:	2a c0       	rjmp	.+84     	; 0x3c8 <__vector_22+0xb4>
      { 
         uint8_t Byte = (StrStart + Character); 
 374:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <StrStart>
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	89 0f       	add	r24, r25
 37c:	8a 83       	std	Y+2, r24	; 0x02

         if (Byte >= StrEnd) 
 37e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <StrEnd>
 382:	9a 81       	ldd	r25, Y+2	; 0x02
 384:	98 17       	cp	r25, r24
 386:	88 f0       	brcs	.+34     	; 0x3aa <__vector_22+0x96>
           Byte = TextBuffer[Byte - StrEnd]; 
 388:	8a 81       	ldd	r24, Y+2	; 0x02
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <StrEnd>
 392:	88 2f       	mov	r24, r24
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	a9 01       	movw	r20, r18
 398:	48 1b       	sub	r20, r24
 39a:	59 0b       	sbc	r21, r25
 39c:	ca 01       	movw	r24, r20
 39e:	87 5f       	subi	r24, 0xF7	; 247
 3a0:	9e 4f       	sbci	r25, 0xFE	; 254
 3a2:	fc 01       	movw	r30, r24
 3a4:	80 81       	ld	r24, Z
 3a6:	8a 83       	std	Y+2, r24	; 0x02
 3a8:	08 c0       	rjmp	.+16     	; 0x3ba <__vector_22+0xa6>
         else 
           Byte = TextBuffer[Byte]; 
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	88 2f       	mov	r24, r24
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	87 5f       	subi	r24, 0xF7	; 247
 3b2:	9e 4f       	sbci	r25, 0xFE	; 254
 3b4:	fc 01       	movw	r30, r24
 3b6:	80 81       	ld	r24, Z
 3b8:	8a 83       	std	Y+2, r24	; 0x02
          
         LCD_WriteChar(Byte, Character); 
 3ba:	69 81       	ldd	r22, Y+1	; 0x01
 3bc:	8a 81       	ldd	r24, Y+2	; 0x02
 3be:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_WriteChar>
        ScrollCount--; 
   } 

   if (UpdateLCD) 
   { 
      for (uint8_t Character = 0; Character < 6; Character++)
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	8f 5f       	subi	r24, 0xFF	; 255
 3c6:	89 83       	std	Y+1, r24	; 0x01
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	86 30       	cpi	r24, 0x06	; 6
 3cc:	98 f2       	brcs	.-90     	; 0x374 <__vector_22+0x60>
           Byte = TextBuffer[Byte]; 
          
         LCD_WriteChar(Byte, Character); 
      } 
        
      if (StrStart++ == StrEnd) 
 3ce:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <StrStart>
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	98 0f       	add	r25, r24
 3d6:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <StrStart>
 3da:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <StrEnd>
 3de:	89 17       	cp	r24, r25
 3e0:	19 f4       	brne	.+6      	; 0x3e8 <__vector_22+0xd4>
        StrStart = 1; 
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <StrStart>
        
      ScrollCount = LCD_SCROLLCOUNT_DEFAULT; 
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ScrollCount>
      UpdateLCD = FALSE; 
 3ee:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UpdateLCD>
   } 

   for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++) 
 3f2:	1b 82       	std	Y+3, r1	; 0x03
 3f4:	11 c0       	rjmp	.+34     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     *(pLCDREG + LCDChar) = SegBuffer[LCDChar]; 
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
 3f8:	88 2f       	mov	r24, r24
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	84 51       	subi	r24, 0x14	; 20
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	2b 81       	ldd	r18, Y+3	; 0x03
 402:	22 2f       	mov	r18, r18
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	2b 5d       	subi	r18, 0xDB	; 219
 408:	3e 4f       	sbci	r19, 0xFE	; 254
 40a:	f9 01       	movw	r30, r18
 40c:	20 81       	ld	r18, Z
 40e:	fc 01       	movw	r30, r24
 410:	20 83       	st	Z, r18
        
      ScrollCount = LCD_SCROLLCOUNT_DEFAULT; 
      UpdateLCD = FALSE; 
   } 

   for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++) 
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	8b 83       	std	Y+3, r24	; 0x03
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	84 31       	cpi	r24, 0x14	; 20
 41c:	60 f3       	brcs	.-40     	; 0x3f6 <__vector_22+0xe2>
     *(pLCDREG + LCDChar) = SegBuffer[LCDChar]; 
 41e:	00 00       	nop
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	bf 91       	pop	r27
 430:	af 91       	pop	r26
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	7f 91       	pop	r23
 438:	6f 91       	pop	r22
 43a:	5f 91       	pop	r21
 43c:	4f 91       	pop	r20
 43e:	3f 91       	pop	r19
 440:	2f 91       	pop	r18
 442:	0f 90       	pop	r0
 444:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 448:	0f 90       	pop	r0
 44a:	1f 90       	pop	r1
 44c:	18 95       	reti

0000044e <main>:
	OCR0A = 0x50;
	while (TIFR0 << OCF0A == 0){
	}
	TCCR0A = 0;
	TIFR0 = 1<<OCF0A;
}
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
 456:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Init>
 45a:	84 e2       	ldi	r24, 0x24	; 36
 45c:	90 e0       	ldi	r25, 0x00	; 0
 45e:	22 e0       	ldi	r18, 0x02	; 2
 460:	fc 01       	movw	r30, r24
 462:	20 83       	st	Z, r18
 464:	85 e2       	ldi	r24, 0x25	; 37
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	21 e0       	ldi	r18, 0x01	; 1
 46a:	fc 01       	movw	r30, r24
 46c:	20 83       	st	Z, r18
 46e:	8c e6       	ldi	r24, 0x6C	; 108
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	21 e0       	ldi	r18, 0x01	; 1
 474:	fc 01       	movw	r30, r24
 476:	20 83       	st	Z, r18
 478:	8d e3       	ldi	r24, 0x3D	; 61
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	20 e8       	ldi	r18, 0x80	; 128
 47e:	fc 01       	movw	r30, r24
 480:	20 83       	st	Z, r18
 482:	80 eb       	ldi	r24, 0xB0	; 176
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	2a e0       	ldi	r18, 0x0A	; 10
 488:	fc 01       	movw	r30, r24
 48a:	20 83       	st	Z, r18
 48c:	83 eb       	ldi	r24, 0xB3	; 179
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	23 ef       	ldi	r18, 0xF3	; 243
 492:	fc 01       	movw	r30, r24
 494:	20 83       	st	Z, r18
 496:	82 eb       	ldi	r24, 0xB2	; 178
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	fc 01       	movw	r30, r24
 49c:	10 82       	st	Z, r1
 49e:	80 e7       	ldi	r24, 0x70	; 112
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	22 e0       	ldi	r18, 0x02	; 2
 4a4:	fc 01       	movw	r30, r24
 4a6:	20 83       	st	Z, r18
 4a8:	78 94       	sei
 4aa:	85 e2       	ldi	r24, 0x25	; 37
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	23 e0       	ldi	r18, 0x03	; 3
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 83       	st	Z, r18
 4b4:	0e 94 64 02 	call	0x4c8	; 0x4c8 <TenPWM>
 4b8:	85 e2       	ldi	r24, 0x25	; 37
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	21 e0       	ldi	r18, 0x01	; 1
 4be:	fc 01       	movw	r30, r24
 4c0:	20 83       	st	Z, r18
 4c2:	0e 94 8e 02 	call	0x51c	; 0x51c <NinePWM>
 4c6:	f1 cf       	rjmp	.-30     	; 0x4aa <main+0x5c>

000004c8 <TenPWM>:
 4c8:	cf 93       	push	r28
 4ca:	df 93       	push	r29
 4cc:	cd b7       	in	r28, 0x3d	; 61
 4ce:	de b7       	in	r29, 0x3e	; 62
 4d0:	84 e4       	ldi	r24, 0x44	; 68
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	2a e0       	ldi	r18, 0x0A	; 10
 4d6:	fc 01       	movw	r30, r24
 4d8:	20 83       	st	Z, r18
 4da:	86 e4       	ldi	r24, 0x46	; 70
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	fc 01       	movw	r30, r24
 4e0:	10 82       	st	Z, r1
 4e2:	87 e4       	ldi	r24, 0x47	; 71
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	2a e0       	ldi	r18, 0x0A	; 10
 4e8:	fc 01       	movw	r30, r24
 4ea:	20 83       	st	Z, r18
 4ec:	00 00       	nop
 4ee:	85 e3       	ldi	r24, 0x35	; 53
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	fc 01       	movw	r30, r24
 4f4:	80 81       	ld	r24, Z
 4f6:	88 2f       	mov	r24, r24
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	88 0f       	add	r24, r24
 4fc:	99 1f       	adc	r25, r25
 4fe:	89 2b       	or	r24, r25
 500:	b1 f3       	breq	.-20     	; 0x4ee <TenPWM+0x26>
 502:	84 e4       	ldi	r24, 0x44	; 68
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	fc 01       	movw	r30, r24
 508:	10 82       	st	Z, r1
 50a:	85 e3       	ldi	r24, 0x35	; 53
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	22 e0       	ldi	r18, 0x02	; 2
 510:	fc 01       	movw	r30, r24
 512:	20 83       	st	Z, r18
 514:	00 00       	nop
 516:	df 91       	pop	r29
 518:	cf 91       	pop	r28
 51a:	08 95       	ret

0000051c <NinePWM>:

int NinePWM(){
 51c:	cf 93       	push	r28
 51e:	df 93       	push	r29
 520:	cd b7       	in	r28, 0x3d	; 61
 522:	de b7       	in	r29, 0x3e	; 62
	TCCR0A = (1<<1)|(1<<3);
 524:	84 e4       	ldi	r24, 0x44	; 68
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	2a e0       	ldi	r18, 0x0A	; 10
 52a:	fc 01       	movw	r30, r24
 52c:	20 83       	st	Z, r18
	TCNT0 = 0;
 52e:	86 e4       	ldi	r24, 0x46	; 70
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	fc 01       	movw	r30, r24
 534:	10 82       	st	Z, r1
	OCR0A = 0x5A;
 536:	87 e4       	ldi	r24, 0x47	; 71
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	2a e5       	ldi	r18, 0x5A	; 90
 53c:	fc 01       	movw	r30, r24
 53e:	20 83       	st	Z, r18
	while (TIFR0 << OCF0A == 0){
 540:	00 00       	nop
 542:	85 e3       	ldi	r24, 0x35	; 53
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	fc 01       	movw	r30, r24
 548:	80 81       	ld	r24, Z
 54a:	88 2f       	mov	r24, r24
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	88 0f       	add	r24, r24
 550:	99 1f       	adc	r25, r25
 552:	89 2b       	or	r24, r25
 554:	b1 f3       	breq	.-20     	; 0x542 <NinePWM+0x26>
	}
	TCCR0A = 0;
 556:	84 e4       	ldi	r24, 0x44	; 68
 558:	90 e0       	ldi	r25, 0x00	; 0
 55a:	fc 01       	movw	r30, r24
 55c:	10 82       	st	Z, r1
	TIFR0 = 1<<OCF0A;
 55e:	85 e3       	ldi	r24, 0x35	; 53
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	22 e0       	ldi	r18, 0x02	; 2
 564:	fc 01       	movw	r30, r24
 566:	20 83       	st	Z, r18
}
 568:	00 00       	nop
 56a:	df 91       	pop	r29
 56c:	cf 91       	pop	r28
 56e:	08 95       	ret

00000570 <__vector_3>:

ISR(PCINT1_vect,ISR_BLOCK){							//function that works the display
 570:	1f 92       	push	r1
 572:	0f 92       	push	r0
 574:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 578:	0f 92       	push	r0
 57a:	11 24       	eor	r1, r1
 57c:	2f 93       	push	r18
 57e:	3f 93       	push	r19
 580:	4f 93       	push	r20
 582:	5f 93       	push	r21
 584:	6f 93       	push	r22
 586:	7f 93       	push	r23
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	af 93       	push	r26
 58e:	bf 93       	push	r27
 590:	ef 93       	push	r30
 592:	ff 93       	push	r31
 594:	cf 93       	push	r28
 596:	df 93       	push	r29
 598:	cd b7       	in	r28, 0x3d	; 61
 59a:	de b7       	in	r29, 0x3e	; 62
	counter++;										//number of rotations
 59c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 5a0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 5aa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	sprintf(str,"%d",rpm);
 5ae:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <rpm>
 5b2:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <rpm+0x1>
 5b6:	29 2f       	mov	r18, r25
 5b8:	2f 93       	push	r18
 5ba:	8f 93       	push	r24
 5bc:	80 e0       	ldi	r24, 0x00	; 0
 5be:	91 e0       	ldi	r25, 0x01	; 1
 5c0:	89 2f       	mov	r24, r25
 5c2:	8f 93       	push	r24
 5c4:	80 e0       	ldi	r24, 0x00	; 0
 5c6:	91 e0       	ldi	r25, 0x01	; 1
 5c8:	8f 93       	push	r24
 5ca:	8e e3       	ldi	r24, 0x3E	; 62
 5cc:	91 e0       	ldi	r25, 0x01	; 1
 5ce:	89 2f       	mov	r24, r25
 5d0:	8f 93       	push	r24
 5d2:	8e e3       	ldi	r24, 0x3E	; 62
 5d4:	91 e0       	ldi	r25, 0x01	; 1
 5d6:	8f 93       	push	r24
 5d8:	0e 94 64 03 	call	0x6c8	; 0x6c8 <sprintf>
 5dc:	0f 90       	pop	r0
 5de:	0f 90       	pop	r0
 5e0:	0f 90       	pop	r0
 5e2:	0f 90       	pop	r0
 5e4:	0f 90       	pop	r0
 5e6:	0f 90       	pop	r0
	LCD_puts(str);
 5e8:	8e e3       	ldi	r24, 0x3E	; 62
 5ea:	91 e0       	ldi	r25, 0x01	; 1
 5ec:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_puts>
	return;
 5f0:	00 00       	nop
}
 5f2:	df 91       	pop	r29
 5f4:	cf 91       	pop	r28
 5f6:	ff 91       	pop	r31
 5f8:	ef 91       	pop	r30
 5fa:	bf 91       	pop	r27
 5fc:	af 91       	pop	r26
 5fe:	9f 91       	pop	r25
 600:	8f 91       	pop	r24
 602:	7f 91       	pop	r23
 604:	6f 91       	pop	r22
 606:	5f 91       	pop	r21
 608:	4f 91       	pop	r20
 60a:	3f 91       	pop	r19
 60c:	2f 91       	pop	r18
 60e:	0f 90       	pop	r0
 610:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 614:	0f 90       	pop	r0
 616:	1f 90       	pop	r1
 618:	18 95       	reti

0000061a <__vector_4>:

ISR(TIMER2_COMP_vect,ISR_BLOCK){					//converting from microseconds to 1 minute intervals
 61a:	1f 92       	push	r1
 61c:	0f 92       	push	r0
 61e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 622:	0f 92       	push	r0
 624:	11 24       	eor	r1, r1
 626:	2f 93       	push	r18
 628:	3f 93       	push	r19
 62a:	4f 93       	push	r20
 62c:	5f 93       	push	r21
 62e:	8f 93       	push	r24
 630:	9f 93       	push	r25
 632:	ef 93       	push	r30
 634:	ff 93       	push	r31
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
	intervals++;
 63e:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <intervals>
 642:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <intervals+0x1>
 646:	01 96       	adiw	r24, 0x01	; 1
 648:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <intervals+0x1>
 64c:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <intervals>
	if (intervals == 1000){
 650:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <intervals>
 654:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <intervals+0x1>
 658:	88 3e       	cpi	r24, 0xE8	; 232
 65a:	93 40       	sbci	r25, 0x03	; 3
 65c:	21 f5       	brne	.+72     	; 0x6a6 <__vector_4+0x8c>
		rpm = counter/2 * 600;
 65e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 662:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 666:	99 23       	and	r25, r25
 668:	0c f4       	brge	.+2      	; 0x66c <__vector_4+0x52>
 66a:	01 96       	adiw	r24, 0x01	; 1
 66c:	95 95       	asr	r25
 66e:	87 95       	ror	r24
 670:	ac 01       	movw	r20, r24
 672:	28 e5       	ldi	r18, 0x58	; 88
 674:	32 e0       	ldi	r19, 0x02	; 2
 676:	42 9f       	mul	r20, r18
 678:	c0 01       	movw	r24, r0
 67a:	43 9f       	mul	r20, r19
 67c:	90 0d       	add	r25, r0
 67e:	52 9f       	mul	r21, r18
 680:	90 0d       	add	r25, r0
 682:	11 24       	eor	r1, r1
 684:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <rpm+0x1>
 688:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <rpm>
		intervals = 0;								//Resets interval counter
 68c:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <intervals+0x1>
 690:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <intervals>
		TCNT2 = 0;									//Resets timer
 694:	82 eb       	ldi	r24, 0xB2	; 178
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	fc 01       	movw	r30, r24
 69a:	10 82       	st	Z, r1
		counter = 0;								//Resets counter
 69c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 6a0:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	}
	return;
 6a4:	00 00       	nop
 6a6:	00 00       	nop
 6a8:	df 91       	pop	r29
 6aa:	cf 91       	pop	r28
 6ac:	ff 91       	pop	r31
 6ae:	ef 91       	pop	r30
 6b0:	9f 91       	pop	r25
 6b2:	8f 91       	pop	r24
 6b4:	5f 91       	pop	r21
 6b6:	4f 91       	pop	r20
 6b8:	3f 91       	pop	r19
 6ba:	2f 91       	pop	r18
 6bc:	0f 90       	pop	r0
 6be:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 6c2:	0f 90       	pop	r0
 6c4:	1f 90       	pop	r1
 6c6:	18 95       	reti

000006c8 <sprintf>:
 6c8:	ae e0       	ldi	r26, 0x0E	; 14
 6ca:	b0 e0       	ldi	r27, 0x00	; 0
 6cc:	ea e6       	ldi	r30, 0x6A	; 106
 6ce:	f3 e0       	ldi	r31, 0x03	; 3
 6d0:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <__prologue_saves__+0x1c>
 6d4:	0d 89       	ldd	r16, Y+21	; 0x15
 6d6:	1e 89       	ldd	r17, Y+22	; 0x16
 6d8:	86 e0       	ldi	r24, 0x06	; 6
 6da:	8c 83       	std	Y+4, r24	; 0x04
 6dc:	1a 83       	std	Y+2, r17	; 0x02
 6de:	09 83       	std	Y+1, r16	; 0x01
 6e0:	8f ef       	ldi	r24, 0xFF	; 255
 6e2:	9f e7       	ldi	r25, 0x7F	; 127
 6e4:	9e 83       	std	Y+6, r25	; 0x06
 6e6:	8d 83       	std	Y+5, r24	; 0x05
 6e8:	ae 01       	movw	r20, r28
 6ea:	47 5e       	subi	r20, 0xE7	; 231
 6ec:	5f 4f       	sbci	r21, 0xFF	; 255
 6ee:	6f 89       	ldd	r22, Y+23	; 0x17
 6f0:	78 8d       	ldd	r23, Y+24	; 0x18
 6f2:	ce 01       	movw	r24, r28
 6f4:	01 96       	adiw	r24, 0x01	; 1
 6f6:	0e 94 86 03 	call	0x70c	; 0x70c <vfprintf>
 6fa:	ef 81       	ldd	r30, Y+7	; 0x07
 6fc:	f8 85       	ldd	r31, Y+8	; 0x08
 6fe:	e0 0f       	add	r30, r16
 700:	f1 1f       	adc	r31, r17
 702:	10 82       	st	Z, r1
 704:	2e 96       	adiw	r28, 0x0e	; 14
 706:	e4 e0       	ldi	r30, 0x04	; 4
 708:	0c 94 41 06 	jmp	0xc82	; 0xc82 <__epilogue_restores__+0x1c>

0000070c <vfprintf>:
 70c:	ab e0       	ldi	r26, 0x0B	; 11
 70e:	b0 e0       	ldi	r27, 0x00	; 0
 710:	ec e8       	ldi	r30, 0x8C	; 140
 712:	f3 e0       	ldi	r31, 0x03	; 3
 714:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__prologue_saves__>
 718:	6c 01       	movw	r12, r24
 71a:	7b 01       	movw	r14, r22
 71c:	8a 01       	movw	r16, r20
 71e:	fc 01       	movw	r30, r24
 720:	17 82       	std	Z+7, r1	; 0x07
 722:	16 82       	std	Z+6, r1	; 0x06
 724:	83 81       	ldd	r24, Z+3	; 0x03
 726:	81 ff       	sbrs	r24, 1
 728:	cc c1       	rjmp	.+920    	; 0xac2 <vfprintf+0x3b6>
 72a:	ce 01       	movw	r24, r28
 72c:	01 96       	adiw	r24, 0x01	; 1
 72e:	3c 01       	movw	r6, r24
 730:	f6 01       	movw	r30, r12
 732:	93 81       	ldd	r25, Z+3	; 0x03
 734:	f7 01       	movw	r30, r14
 736:	93 fd       	sbrc	r25, 3
 738:	85 91       	lpm	r24, Z+
 73a:	93 ff       	sbrs	r25, 3
 73c:	81 91       	ld	r24, Z+
 73e:	7f 01       	movw	r14, r30
 740:	88 23       	and	r24, r24
 742:	09 f4       	brne	.+2      	; 0x746 <vfprintf+0x3a>
 744:	ba c1       	rjmp	.+884    	; 0xaba <vfprintf+0x3ae>
 746:	85 32       	cpi	r24, 0x25	; 37
 748:	39 f4       	brne	.+14     	; 0x758 <vfprintf+0x4c>
 74a:	93 fd       	sbrc	r25, 3
 74c:	85 91       	lpm	r24, Z+
 74e:	93 ff       	sbrs	r25, 3
 750:	81 91       	ld	r24, Z+
 752:	7f 01       	movw	r14, r30
 754:	85 32       	cpi	r24, 0x25	; 37
 756:	29 f4       	brne	.+10     	; 0x762 <vfprintf+0x56>
 758:	b6 01       	movw	r22, r12
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 7d 05 	call	0xafa	; 0xafa <fputc>
 760:	e7 cf       	rjmp	.-50     	; 0x730 <vfprintf+0x24>
 762:	91 2c       	mov	r9, r1
 764:	21 2c       	mov	r2, r1
 766:	31 2c       	mov	r3, r1
 768:	ff e1       	ldi	r31, 0x1F	; 31
 76a:	f3 15       	cp	r31, r3
 76c:	d8 f0       	brcs	.+54     	; 0x7a4 <vfprintf+0x98>
 76e:	8b 32       	cpi	r24, 0x2B	; 43
 770:	79 f0       	breq	.+30     	; 0x790 <vfprintf+0x84>
 772:	38 f4       	brcc	.+14     	; 0x782 <vfprintf+0x76>
 774:	80 32       	cpi	r24, 0x20	; 32
 776:	79 f0       	breq	.+30     	; 0x796 <vfprintf+0x8a>
 778:	83 32       	cpi	r24, 0x23	; 35
 77a:	a1 f4       	brne	.+40     	; 0x7a4 <vfprintf+0x98>
 77c:	23 2d       	mov	r18, r3
 77e:	20 61       	ori	r18, 0x10	; 16
 780:	1d c0       	rjmp	.+58     	; 0x7bc <vfprintf+0xb0>
 782:	8d 32       	cpi	r24, 0x2D	; 45
 784:	61 f0       	breq	.+24     	; 0x79e <vfprintf+0x92>
 786:	80 33       	cpi	r24, 0x30	; 48
 788:	69 f4       	brne	.+26     	; 0x7a4 <vfprintf+0x98>
 78a:	23 2d       	mov	r18, r3
 78c:	21 60       	ori	r18, 0x01	; 1
 78e:	16 c0       	rjmp	.+44     	; 0x7bc <vfprintf+0xb0>
 790:	83 2d       	mov	r24, r3
 792:	82 60       	ori	r24, 0x02	; 2
 794:	38 2e       	mov	r3, r24
 796:	e3 2d       	mov	r30, r3
 798:	e4 60       	ori	r30, 0x04	; 4
 79a:	3e 2e       	mov	r3, r30
 79c:	2a c0       	rjmp	.+84     	; 0x7f2 <vfprintf+0xe6>
 79e:	f3 2d       	mov	r31, r3
 7a0:	f8 60       	ori	r31, 0x08	; 8
 7a2:	1d c0       	rjmp	.+58     	; 0x7de <vfprintf+0xd2>
 7a4:	37 fc       	sbrc	r3, 7
 7a6:	2d c0       	rjmp	.+90     	; 0x802 <vfprintf+0xf6>
 7a8:	20 ed       	ldi	r18, 0xD0	; 208
 7aa:	28 0f       	add	r18, r24
 7ac:	2a 30       	cpi	r18, 0x0A	; 10
 7ae:	40 f0       	brcs	.+16     	; 0x7c0 <vfprintf+0xb4>
 7b0:	8e 32       	cpi	r24, 0x2E	; 46
 7b2:	b9 f4       	brne	.+46     	; 0x7e2 <vfprintf+0xd6>
 7b4:	36 fc       	sbrc	r3, 6
 7b6:	81 c1       	rjmp	.+770    	; 0xaba <vfprintf+0x3ae>
 7b8:	23 2d       	mov	r18, r3
 7ba:	20 64       	ori	r18, 0x40	; 64
 7bc:	32 2e       	mov	r3, r18
 7be:	19 c0       	rjmp	.+50     	; 0x7f2 <vfprintf+0xe6>
 7c0:	36 fe       	sbrs	r3, 6
 7c2:	06 c0       	rjmp	.+12     	; 0x7d0 <vfprintf+0xc4>
 7c4:	8a e0       	ldi	r24, 0x0A	; 10
 7c6:	98 9e       	mul	r9, r24
 7c8:	20 0d       	add	r18, r0
 7ca:	11 24       	eor	r1, r1
 7cc:	92 2e       	mov	r9, r18
 7ce:	11 c0       	rjmp	.+34     	; 0x7f2 <vfprintf+0xe6>
 7d0:	ea e0       	ldi	r30, 0x0A	; 10
 7d2:	2e 9e       	mul	r2, r30
 7d4:	20 0d       	add	r18, r0
 7d6:	11 24       	eor	r1, r1
 7d8:	22 2e       	mov	r2, r18
 7da:	f3 2d       	mov	r31, r3
 7dc:	f0 62       	ori	r31, 0x20	; 32
 7de:	3f 2e       	mov	r3, r31
 7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <vfprintf+0xe6>
 7e2:	8c 36       	cpi	r24, 0x6C	; 108
 7e4:	21 f4       	brne	.+8      	; 0x7ee <vfprintf+0xe2>
 7e6:	83 2d       	mov	r24, r3
 7e8:	80 68       	ori	r24, 0x80	; 128
 7ea:	38 2e       	mov	r3, r24
 7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <vfprintf+0xe6>
 7ee:	88 36       	cpi	r24, 0x68	; 104
 7f0:	41 f4       	brne	.+16     	; 0x802 <vfprintf+0xf6>
 7f2:	f7 01       	movw	r30, r14
 7f4:	93 fd       	sbrc	r25, 3
 7f6:	85 91       	lpm	r24, Z+
 7f8:	93 ff       	sbrs	r25, 3
 7fa:	81 91       	ld	r24, Z+
 7fc:	7f 01       	movw	r14, r30
 7fe:	81 11       	cpse	r24, r1
 800:	b3 cf       	rjmp	.-154    	; 0x768 <vfprintf+0x5c>
 802:	98 2f       	mov	r25, r24
 804:	9f 7d       	andi	r25, 0xDF	; 223
 806:	95 54       	subi	r25, 0x45	; 69
 808:	93 30       	cpi	r25, 0x03	; 3
 80a:	28 f4       	brcc	.+10     	; 0x816 <vfprintf+0x10a>
 80c:	0c 5f       	subi	r16, 0xFC	; 252
 80e:	1f 4f       	sbci	r17, 0xFF	; 255
 810:	9f e3       	ldi	r25, 0x3F	; 63
 812:	99 83       	std	Y+1, r25	; 0x01
 814:	0d c0       	rjmp	.+26     	; 0x830 <vfprintf+0x124>
 816:	83 36       	cpi	r24, 0x63	; 99
 818:	31 f0       	breq	.+12     	; 0x826 <vfprintf+0x11a>
 81a:	83 37       	cpi	r24, 0x73	; 115
 81c:	71 f0       	breq	.+28     	; 0x83a <vfprintf+0x12e>
 81e:	83 35       	cpi	r24, 0x53	; 83
 820:	09 f0       	breq	.+2      	; 0x824 <vfprintf+0x118>
 822:	59 c0       	rjmp	.+178    	; 0x8d6 <vfprintf+0x1ca>
 824:	21 c0       	rjmp	.+66     	; 0x868 <vfprintf+0x15c>
 826:	f8 01       	movw	r30, r16
 828:	80 81       	ld	r24, Z
 82a:	89 83       	std	Y+1, r24	; 0x01
 82c:	0e 5f       	subi	r16, 0xFE	; 254
 82e:	1f 4f       	sbci	r17, 0xFF	; 255
 830:	88 24       	eor	r8, r8
 832:	83 94       	inc	r8
 834:	91 2c       	mov	r9, r1
 836:	53 01       	movw	r10, r6
 838:	13 c0       	rjmp	.+38     	; 0x860 <vfprintf+0x154>
 83a:	28 01       	movw	r4, r16
 83c:	f2 e0       	ldi	r31, 0x02	; 2
 83e:	4f 0e       	add	r4, r31
 840:	51 1c       	adc	r5, r1
 842:	f8 01       	movw	r30, r16
 844:	a0 80       	ld	r10, Z
 846:	b1 80       	ldd	r11, Z+1	; 0x01
 848:	36 fe       	sbrs	r3, 6
 84a:	03 c0       	rjmp	.+6      	; 0x852 <vfprintf+0x146>
 84c:	69 2d       	mov	r22, r9
 84e:	70 e0       	ldi	r23, 0x00	; 0
 850:	02 c0       	rjmp	.+4      	; 0x856 <vfprintf+0x14a>
 852:	6f ef       	ldi	r22, 0xFF	; 255
 854:	7f ef       	ldi	r23, 0xFF	; 255
 856:	c5 01       	movw	r24, r10
 858:	0e 94 72 05 	call	0xae4	; 0xae4 <strnlen>
 85c:	4c 01       	movw	r8, r24
 85e:	82 01       	movw	r16, r4
 860:	f3 2d       	mov	r31, r3
 862:	ff 77       	andi	r31, 0x7F	; 127
 864:	3f 2e       	mov	r3, r31
 866:	16 c0       	rjmp	.+44     	; 0x894 <vfprintf+0x188>
 868:	28 01       	movw	r4, r16
 86a:	22 e0       	ldi	r18, 0x02	; 2
 86c:	42 0e       	add	r4, r18
 86e:	51 1c       	adc	r5, r1
 870:	f8 01       	movw	r30, r16
 872:	a0 80       	ld	r10, Z
 874:	b1 80       	ldd	r11, Z+1	; 0x01
 876:	36 fe       	sbrs	r3, 6
 878:	03 c0       	rjmp	.+6      	; 0x880 <vfprintf+0x174>
 87a:	69 2d       	mov	r22, r9
 87c:	70 e0       	ldi	r23, 0x00	; 0
 87e:	02 c0       	rjmp	.+4      	; 0x884 <vfprintf+0x178>
 880:	6f ef       	ldi	r22, 0xFF	; 255
 882:	7f ef       	ldi	r23, 0xFF	; 255
 884:	c5 01       	movw	r24, r10
 886:	0e 94 67 05 	call	0xace	; 0xace <strnlen_P>
 88a:	4c 01       	movw	r8, r24
 88c:	f3 2d       	mov	r31, r3
 88e:	f0 68       	ori	r31, 0x80	; 128
 890:	3f 2e       	mov	r3, r31
 892:	82 01       	movw	r16, r4
 894:	33 fc       	sbrc	r3, 3
 896:	1b c0       	rjmp	.+54     	; 0x8ce <vfprintf+0x1c2>
 898:	82 2d       	mov	r24, r2
 89a:	90 e0       	ldi	r25, 0x00	; 0
 89c:	88 16       	cp	r8, r24
 89e:	99 06       	cpc	r9, r25
 8a0:	b0 f4       	brcc	.+44     	; 0x8ce <vfprintf+0x1c2>
 8a2:	b6 01       	movw	r22, r12
 8a4:	80 e2       	ldi	r24, 0x20	; 32
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	0e 94 7d 05 	call	0xafa	; 0xafa <fputc>
 8ac:	2a 94       	dec	r2
 8ae:	f4 cf       	rjmp	.-24     	; 0x898 <vfprintf+0x18c>
 8b0:	f5 01       	movw	r30, r10
 8b2:	37 fc       	sbrc	r3, 7
 8b4:	85 91       	lpm	r24, Z+
 8b6:	37 fe       	sbrs	r3, 7
 8b8:	81 91       	ld	r24, Z+
 8ba:	5f 01       	movw	r10, r30
 8bc:	b6 01       	movw	r22, r12
 8be:	90 e0       	ldi	r25, 0x00	; 0
 8c0:	0e 94 7d 05 	call	0xafa	; 0xafa <fputc>
 8c4:	21 10       	cpse	r2, r1
 8c6:	2a 94       	dec	r2
 8c8:	21 e0       	ldi	r18, 0x01	; 1
 8ca:	82 1a       	sub	r8, r18
 8cc:	91 08       	sbc	r9, r1
 8ce:	81 14       	cp	r8, r1
 8d0:	91 04       	cpc	r9, r1
 8d2:	71 f7       	brne	.-36     	; 0x8b0 <vfprintf+0x1a4>
 8d4:	e8 c0       	rjmp	.+464    	; 0xaa6 <vfprintf+0x39a>
 8d6:	84 36       	cpi	r24, 0x64	; 100
 8d8:	11 f0       	breq	.+4      	; 0x8de <vfprintf+0x1d2>
 8da:	89 36       	cpi	r24, 0x69	; 105
 8dc:	41 f5       	brne	.+80     	; 0x92e <vfprintf+0x222>
 8de:	f8 01       	movw	r30, r16
 8e0:	37 fe       	sbrs	r3, 7
 8e2:	07 c0       	rjmp	.+14     	; 0x8f2 <vfprintf+0x1e6>
 8e4:	60 81       	ld	r22, Z
 8e6:	71 81       	ldd	r23, Z+1	; 0x01
 8e8:	82 81       	ldd	r24, Z+2	; 0x02
 8ea:	93 81       	ldd	r25, Z+3	; 0x03
 8ec:	0c 5f       	subi	r16, 0xFC	; 252
 8ee:	1f 4f       	sbci	r17, 0xFF	; 255
 8f0:	08 c0       	rjmp	.+16     	; 0x902 <vfprintf+0x1f6>
 8f2:	60 81       	ld	r22, Z
 8f4:	71 81       	ldd	r23, Z+1	; 0x01
 8f6:	07 2e       	mov	r0, r23
 8f8:	00 0c       	add	r0, r0
 8fa:	88 0b       	sbc	r24, r24
 8fc:	99 0b       	sbc	r25, r25
 8fe:	0e 5f       	subi	r16, 0xFE	; 254
 900:	1f 4f       	sbci	r17, 0xFF	; 255
 902:	f3 2d       	mov	r31, r3
 904:	ff 76       	andi	r31, 0x6F	; 111
 906:	3f 2e       	mov	r3, r31
 908:	97 ff       	sbrs	r25, 7
 90a:	09 c0       	rjmp	.+18     	; 0x91e <vfprintf+0x212>
 90c:	90 95       	com	r25
 90e:	80 95       	com	r24
 910:	70 95       	com	r23
 912:	61 95       	neg	r22
 914:	7f 4f       	sbci	r23, 0xFF	; 255
 916:	8f 4f       	sbci	r24, 0xFF	; 255
 918:	9f 4f       	sbci	r25, 0xFF	; 255
 91a:	f0 68       	ori	r31, 0x80	; 128
 91c:	3f 2e       	mov	r3, r31
 91e:	2a e0       	ldi	r18, 0x0A	; 10
 920:	30 e0       	ldi	r19, 0x00	; 0
 922:	a3 01       	movw	r20, r6
 924:	0e 94 b9 05 	call	0xb72	; 0xb72 <__ultoa_invert>
 928:	88 2e       	mov	r8, r24
 92a:	86 18       	sub	r8, r6
 92c:	45 c0       	rjmp	.+138    	; 0x9b8 <vfprintf+0x2ac>
 92e:	85 37       	cpi	r24, 0x75	; 117
 930:	31 f4       	brne	.+12     	; 0x93e <vfprintf+0x232>
 932:	23 2d       	mov	r18, r3
 934:	2f 7e       	andi	r18, 0xEF	; 239
 936:	b2 2e       	mov	r11, r18
 938:	2a e0       	ldi	r18, 0x0A	; 10
 93a:	30 e0       	ldi	r19, 0x00	; 0
 93c:	25 c0       	rjmp	.+74     	; 0x988 <vfprintf+0x27c>
 93e:	93 2d       	mov	r25, r3
 940:	99 7f       	andi	r25, 0xF9	; 249
 942:	b9 2e       	mov	r11, r25
 944:	8f 36       	cpi	r24, 0x6F	; 111
 946:	c1 f0       	breq	.+48     	; 0x978 <vfprintf+0x26c>
 948:	18 f4       	brcc	.+6      	; 0x950 <vfprintf+0x244>
 94a:	88 35       	cpi	r24, 0x58	; 88
 94c:	79 f0       	breq	.+30     	; 0x96c <vfprintf+0x260>
 94e:	b5 c0       	rjmp	.+362    	; 0xaba <vfprintf+0x3ae>
 950:	80 37       	cpi	r24, 0x70	; 112
 952:	19 f0       	breq	.+6      	; 0x95a <vfprintf+0x24e>
 954:	88 37       	cpi	r24, 0x78	; 120
 956:	21 f0       	breq	.+8      	; 0x960 <vfprintf+0x254>
 958:	b0 c0       	rjmp	.+352    	; 0xaba <vfprintf+0x3ae>
 95a:	e9 2f       	mov	r30, r25
 95c:	e0 61       	ori	r30, 0x10	; 16
 95e:	be 2e       	mov	r11, r30
 960:	b4 fe       	sbrs	r11, 4
 962:	0d c0       	rjmp	.+26     	; 0x97e <vfprintf+0x272>
 964:	fb 2d       	mov	r31, r11
 966:	f4 60       	ori	r31, 0x04	; 4
 968:	bf 2e       	mov	r11, r31
 96a:	09 c0       	rjmp	.+18     	; 0x97e <vfprintf+0x272>
 96c:	34 fe       	sbrs	r3, 4
 96e:	0a c0       	rjmp	.+20     	; 0x984 <vfprintf+0x278>
 970:	29 2f       	mov	r18, r25
 972:	26 60       	ori	r18, 0x06	; 6
 974:	b2 2e       	mov	r11, r18
 976:	06 c0       	rjmp	.+12     	; 0x984 <vfprintf+0x278>
 978:	28 e0       	ldi	r18, 0x08	; 8
 97a:	30 e0       	ldi	r19, 0x00	; 0
 97c:	05 c0       	rjmp	.+10     	; 0x988 <vfprintf+0x27c>
 97e:	20 e1       	ldi	r18, 0x10	; 16
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	02 c0       	rjmp	.+4      	; 0x988 <vfprintf+0x27c>
 984:	20 e1       	ldi	r18, 0x10	; 16
 986:	32 e0       	ldi	r19, 0x02	; 2
 988:	f8 01       	movw	r30, r16
 98a:	b7 fe       	sbrs	r11, 7
 98c:	07 c0       	rjmp	.+14     	; 0x99c <vfprintf+0x290>
 98e:	60 81       	ld	r22, Z
 990:	71 81       	ldd	r23, Z+1	; 0x01
 992:	82 81       	ldd	r24, Z+2	; 0x02
 994:	93 81       	ldd	r25, Z+3	; 0x03
 996:	0c 5f       	subi	r16, 0xFC	; 252
 998:	1f 4f       	sbci	r17, 0xFF	; 255
 99a:	06 c0       	rjmp	.+12     	; 0x9a8 <vfprintf+0x29c>
 99c:	60 81       	ld	r22, Z
 99e:	71 81       	ldd	r23, Z+1	; 0x01
 9a0:	80 e0       	ldi	r24, 0x00	; 0
 9a2:	90 e0       	ldi	r25, 0x00	; 0
 9a4:	0e 5f       	subi	r16, 0xFE	; 254
 9a6:	1f 4f       	sbci	r17, 0xFF	; 255
 9a8:	a3 01       	movw	r20, r6
 9aa:	0e 94 b9 05 	call	0xb72	; 0xb72 <__ultoa_invert>
 9ae:	88 2e       	mov	r8, r24
 9b0:	86 18       	sub	r8, r6
 9b2:	fb 2d       	mov	r31, r11
 9b4:	ff 77       	andi	r31, 0x7F	; 127
 9b6:	3f 2e       	mov	r3, r31
 9b8:	36 fe       	sbrs	r3, 6
 9ba:	0d c0       	rjmp	.+26     	; 0x9d6 <vfprintf+0x2ca>
 9bc:	23 2d       	mov	r18, r3
 9be:	2e 7f       	andi	r18, 0xFE	; 254
 9c0:	a2 2e       	mov	r10, r18
 9c2:	89 14       	cp	r8, r9
 9c4:	58 f4       	brcc	.+22     	; 0x9dc <vfprintf+0x2d0>
 9c6:	34 fe       	sbrs	r3, 4
 9c8:	0b c0       	rjmp	.+22     	; 0x9e0 <vfprintf+0x2d4>
 9ca:	32 fc       	sbrc	r3, 2
 9cc:	09 c0       	rjmp	.+18     	; 0x9e0 <vfprintf+0x2d4>
 9ce:	83 2d       	mov	r24, r3
 9d0:	8e 7e       	andi	r24, 0xEE	; 238
 9d2:	a8 2e       	mov	r10, r24
 9d4:	05 c0       	rjmp	.+10     	; 0x9e0 <vfprintf+0x2d4>
 9d6:	b8 2c       	mov	r11, r8
 9d8:	a3 2c       	mov	r10, r3
 9da:	03 c0       	rjmp	.+6      	; 0x9e2 <vfprintf+0x2d6>
 9dc:	b8 2c       	mov	r11, r8
 9de:	01 c0       	rjmp	.+2      	; 0x9e2 <vfprintf+0x2d6>
 9e0:	b9 2c       	mov	r11, r9
 9e2:	a4 fe       	sbrs	r10, 4
 9e4:	0f c0       	rjmp	.+30     	; 0xa04 <vfprintf+0x2f8>
 9e6:	fe 01       	movw	r30, r28
 9e8:	e8 0d       	add	r30, r8
 9ea:	f1 1d       	adc	r31, r1
 9ec:	80 81       	ld	r24, Z
 9ee:	80 33       	cpi	r24, 0x30	; 48
 9f0:	21 f4       	brne	.+8      	; 0x9fa <vfprintf+0x2ee>
 9f2:	9a 2d       	mov	r25, r10
 9f4:	99 7e       	andi	r25, 0xE9	; 233
 9f6:	a9 2e       	mov	r10, r25
 9f8:	09 c0       	rjmp	.+18     	; 0xa0c <vfprintf+0x300>
 9fa:	a2 fe       	sbrs	r10, 2
 9fc:	06 c0       	rjmp	.+12     	; 0xa0a <vfprintf+0x2fe>
 9fe:	b3 94       	inc	r11
 a00:	b3 94       	inc	r11
 a02:	04 c0       	rjmp	.+8      	; 0xa0c <vfprintf+0x300>
 a04:	8a 2d       	mov	r24, r10
 a06:	86 78       	andi	r24, 0x86	; 134
 a08:	09 f0       	breq	.+2      	; 0xa0c <vfprintf+0x300>
 a0a:	b3 94       	inc	r11
 a0c:	a3 fc       	sbrc	r10, 3
 a0e:	11 c0       	rjmp	.+34     	; 0xa32 <vfprintf+0x326>
 a10:	a0 fe       	sbrs	r10, 0
 a12:	06 c0       	rjmp	.+12     	; 0xa20 <vfprintf+0x314>
 a14:	b2 14       	cp	r11, r2
 a16:	88 f4       	brcc	.+34     	; 0xa3a <vfprintf+0x32e>
 a18:	28 0c       	add	r2, r8
 a1a:	92 2c       	mov	r9, r2
 a1c:	9b 18       	sub	r9, r11
 a1e:	0e c0       	rjmp	.+28     	; 0xa3c <vfprintf+0x330>
 a20:	b2 14       	cp	r11, r2
 a22:	60 f4       	brcc	.+24     	; 0xa3c <vfprintf+0x330>
 a24:	b6 01       	movw	r22, r12
 a26:	80 e2       	ldi	r24, 0x20	; 32
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	0e 94 7d 05 	call	0xafa	; 0xafa <fputc>
 a2e:	b3 94       	inc	r11
 a30:	f7 cf       	rjmp	.-18     	; 0xa20 <vfprintf+0x314>
 a32:	b2 14       	cp	r11, r2
 a34:	18 f4       	brcc	.+6      	; 0xa3c <vfprintf+0x330>
 a36:	2b 18       	sub	r2, r11
 a38:	02 c0       	rjmp	.+4      	; 0xa3e <vfprintf+0x332>
 a3a:	98 2c       	mov	r9, r8
 a3c:	21 2c       	mov	r2, r1
 a3e:	a4 fe       	sbrs	r10, 4
 a40:	10 c0       	rjmp	.+32     	; 0xa62 <vfprintf+0x356>
 a42:	b6 01       	movw	r22, r12
 a44:	80 e3       	ldi	r24, 0x30	; 48
 a46:	90 e0       	ldi	r25, 0x00	; 0
 a48:	0e 94 7d 05 	call	0xafa	; 0xafa <fputc>
 a4c:	a2 fe       	sbrs	r10, 2
 a4e:	17 c0       	rjmp	.+46     	; 0xa7e <vfprintf+0x372>
 a50:	a1 fc       	sbrc	r10, 1
 a52:	03 c0       	rjmp	.+6      	; 0xa5a <vfprintf+0x34e>
 a54:	88 e7       	ldi	r24, 0x78	; 120
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	02 c0       	rjmp	.+4      	; 0xa5e <vfprintf+0x352>
 a5a:	88 e5       	ldi	r24, 0x58	; 88
 a5c:	90 e0       	ldi	r25, 0x00	; 0
 a5e:	b6 01       	movw	r22, r12
 a60:	0c c0       	rjmp	.+24     	; 0xa7a <vfprintf+0x36e>
 a62:	8a 2d       	mov	r24, r10
 a64:	86 78       	andi	r24, 0x86	; 134
 a66:	59 f0       	breq	.+22     	; 0xa7e <vfprintf+0x372>
 a68:	a1 fe       	sbrs	r10, 1
 a6a:	02 c0       	rjmp	.+4      	; 0xa70 <vfprintf+0x364>
 a6c:	8b e2       	ldi	r24, 0x2B	; 43
 a6e:	01 c0       	rjmp	.+2      	; 0xa72 <vfprintf+0x366>
 a70:	80 e2       	ldi	r24, 0x20	; 32
 a72:	a7 fc       	sbrc	r10, 7
 a74:	8d e2       	ldi	r24, 0x2D	; 45
 a76:	b6 01       	movw	r22, r12
 a78:	90 e0       	ldi	r25, 0x00	; 0
 a7a:	0e 94 7d 05 	call	0xafa	; 0xafa <fputc>
 a7e:	89 14       	cp	r8, r9
 a80:	38 f4       	brcc	.+14     	; 0xa90 <vfprintf+0x384>
 a82:	b6 01       	movw	r22, r12
 a84:	80 e3       	ldi	r24, 0x30	; 48
 a86:	90 e0       	ldi	r25, 0x00	; 0
 a88:	0e 94 7d 05 	call	0xafa	; 0xafa <fputc>
 a8c:	9a 94       	dec	r9
 a8e:	f7 cf       	rjmp	.-18     	; 0xa7e <vfprintf+0x372>
 a90:	8a 94       	dec	r8
 a92:	f3 01       	movw	r30, r6
 a94:	e8 0d       	add	r30, r8
 a96:	f1 1d       	adc	r31, r1
 a98:	80 81       	ld	r24, Z
 a9a:	b6 01       	movw	r22, r12
 a9c:	90 e0       	ldi	r25, 0x00	; 0
 a9e:	0e 94 7d 05 	call	0xafa	; 0xafa <fputc>
 aa2:	81 10       	cpse	r8, r1
 aa4:	f5 cf       	rjmp	.-22     	; 0xa90 <vfprintf+0x384>
 aa6:	22 20       	and	r2, r2
 aa8:	09 f4       	brne	.+2      	; 0xaac <vfprintf+0x3a0>
 aaa:	42 ce       	rjmp	.-892    	; 0x730 <vfprintf+0x24>
 aac:	b6 01       	movw	r22, r12
 aae:	80 e2       	ldi	r24, 0x20	; 32
 ab0:	90 e0       	ldi	r25, 0x00	; 0
 ab2:	0e 94 7d 05 	call	0xafa	; 0xafa <fputc>
 ab6:	2a 94       	dec	r2
 ab8:	f6 cf       	rjmp	.-20     	; 0xaa6 <vfprintf+0x39a>
 aba:	f6 01       	movw	r30, r12
 abc:	86 81       	ldd	r24, Z+6	; 0x06
 abe:	97 81       	ldd	r25, Z+7	; 0x07
 ac0:	02 c0       	rjmp	.+4      	; 0xac6 <vfprintf+0x3ba>
 ac2:	8f ef       	ldi	r24, 0xFF	; 255
 ac4:	9f ef       	ldi	r25, 0xFF	; 255
 ac6:	2b 96       	adiw	r28, 0x0b	; 11
 ac8:	e2 e1       	ldi	r30, 0x12	; 18
 aca:	0c 94 33 06 	jmp	0xc66	; 0xc66 <__epilogue_restores__>

00000ace <strnlen_P>:
 ace:	fc 01       	movw	r30, r24
 ad0:	05 90       	lpm	r0, Z+
 ad2:	61 50       	subi	r22, 0x01	; 1
 ad4:	70 40       	sbci	r23, 0x00	; 0
 ad6:	01 10       	cpse	r0, r1
 ad8:	d8 f7       	brcc	.-10     	; 0xad0 <strnlen_P+0x2>
 ada:	80 95       	com	r24
 adc:	90 95       	com	r25
 ade:	8e 0f       	add	r24, r30
 ae0:	9f 1f       	adc	r25, r31
 ae2:	08 95       	ret

00000ae4 <strnlen>:
 ae4:	fc 01       	movw	r30, r24
 ae6:	61 50       	subi	r22, 0x01	; 1
 ae8:	70 40       	sbci	r23, 0x00	; 0
 aea:	01 90       	ld	r0, Z+
 aec:	01 10       	cpse	r0, r1
 aee:	d8 f7       	brcc	.-10     	; 0xae6 <strnlen+0x2>
 af0:	80 95       	com	r24
 af2:	90 95       	com	r25
 af4:	8e 0f       	add	r24, r30
 af6:	9f 1f       	adc	r25, r31
 af8:	08 95       	ret

00000afa <fputc>:
 afa:	0f 93       	push	r16
 afc:	1f 93       	push	r17
 afe:	cf 93       	push	r28
 b00:	df 93       	push	r29
 b02:	fb 01       	movw	r30, r22
 b04:	23 81       	ldd	r18, Z+3	; 0x03
 b06:	21 fd       	sbrc	r18, 1
 b08:	03 c0       	rjmp	.+6      	; 0xb10 <fputc+0x16>
 b0a:	8f ef       	ldi	r24, 0xFF	; 255
 b0c:	9f ef       	ldi	r25, 0xFF	; 255
 b0e:	2c c0       	rjmp	.+88     	; 0xb68 <fputc+0x6e>
 b10:	22 ff       	sbrs	r18, 2
 b12:	16 c0       	rjmp	.+44     	; 0xb40 <fputc+0x46>
 b14:	46 81       	ldd	r20, Z+6	; 0x06
 b16:	57 81       	ldd	r21, Z+7	; 0x07
 b18:	24 81       	ldd	r18, Z+4	; 0x04
 b1a:	35 81       	ldd	r19, Z+5	; 0x05
 b1c:	42 17       	cp	r20, r18
 b1e:	53 07       	cpc	r21, r19
 b20:	44 f4       	brge	.+16     	; 0xb32 <fputc+0x38>
 b22:	a0 81       	ld	r26, Z
 b24:	b1 81       	ldd	r27, Z+1	; 0x01
 b26:	9d 01       	movw	r18, r26
 b28:	2f 5f       	subi	r18, 0xFF	; 255
 b2a:	3f 4f       	sbci	r19, 0xFF	; 255
 b2c:	31 83       	std	Z+1, r19	; 0x01
 b2e:	20 83       	st	Z, r18
 b30:	8c 93       	st	X, r24
 b32:	26 81       	ldd	r18, Z+6	; 0x06
 b34:	37 81       	ldd	r19, Z+7	; 0x07
 b36:	2f 5f       	subi	r18, 0xFF	; 255
 b38:	3f 4f       	sbci	r19, 0xFF	; 255
 b3a:	37 83       	std	Z+7, r19	; 0x07
 b3c:	26 83       	std	Z+6, r18	; 0x06
 b3e:	14 c0       	rjmp	.+40     	; 0xb68 <fputc+0x6e>
 b40:	8b 01       	movw	r16, r22
 b42:	ec 01       	movw	r28, r24
 b44:	fb 01       	movw	r30, r22
 b46:	00 84       	ldd	r0, Z+8	; 0x08
 b48:	f1 85       	ldd	r31, Z+9	; 0x09
 b4a:	e0 2d       	mov	r30, r0
 b4c:	09 95       	icall
 b4e:	89 2b       	or	r24, r25
 b50:	e1 f6       	brne	.-72     	; 0xb0a <fputc+0x10>
 b52:	d8 01       	movw	r26, r16
 b54:	16 96       	adiw	r26, 0x06	; 6
 b56:	8d 91       	ld	r24, X+
 b58:	9c 91       	ld	r25, X
 b5a:	17 97       	sbiw	r26, 0x07	; 7
 b5c:	01 96       	adiw	r24, 0x01	; 1
 b5e:	17 96       	adiw	r26, 0x07	; 7
 b60:	9c 93       	st	X, r25
 b62:	8e 93       	st	-X, r24
 b64:	16 97       	sbiw	r26, 0x06	; 6
 b66:	ce 01       	movw	r24, r28
 b68:	df 91       	pop	r29
 b6a:	cf 91       	pop	r28
 b6c:	1f 91       	pop	r17
 b6e:	0f 91       	pop	r16
 b70:	08 95       	ret

00000b72 <__ultoa_invert>:
 b72:	fa 01       	movw	r30, r20
 b74:	aa 27       	eor	r26, r26
 b76:	28 30       	cpi	r18, 0x08	; 8
 b78:	51 f1       	breq	.+84     	; 0xbce <__ultoa_invert+0x5c>
 b7a:	20 31       	cpi	r18, 0x10	; 16
 b7c:	81 f1       	breq	.+96     	; 0xbde <__ultoa_invert+0x6c>
 b7e:	e8 94       	clt
 b80:	6f 93       	push	r22
 b82:	6e 7f       	andi	r22, 0xFE	; 254
 b84:	6e 5f       	subi	r22, 0xFE	; 254
 b86:	7f 4f       	sbci	r23, 0xFF	; 255
 b88:	8f 4f       	sbci	r24, 0xFF	; 255
 b8a:	9f 4f       	sbci	r25, 0xFF	; 255
 b8c:	af 4f       	sbci	r26, 0xFF	; 255
 b8e:	b1 e0       	ldi	r27, 0x01	; 1
 b90:	3e d0       	rcall	.+124    	; 0xc0e <__ultoa_invert+0x9c>
 b92:	b4 e0       	ldi	r27, 0x04	; 4
 b94:	3c d0       	rcall	.+120    	; 0xc0e <__ultoa_invert+0x9c>
 b96:	67 0f       	add	r22, r23
 b98:	78 1f       	adc	r23, r24
 b9a:	89 1f       	adc	r24, r25
 b9c:	9a 1f       	adc	r25, r26
 b9e:	a1 1d       	adc	r26, r1
 ba0:	68 0f       	add	r22, r24
 ba2:	79 1f       	adc	r23, r25
 ba4:	8a 1f       	adc	r24, r26
 ba6:	91 1d       	adc	r25, r1
 ba8:	a1 1d       	adc	r26, r1
 baa:	6a 0f       	add	r22, r26
 bac:	71 1d       	adc	r23, r1
 bae:	81 1d       	adc	r24, r1
 bb0:	91 1d       	adc	r25, r1
 bb2:	a1 1d       	adc	r26, r1
 bb4:	20 d0       	rcall	.+64     	; 0xbf6 <__ultoa_invert+0x84>
 bb6:	09 f4       	brne	.+2      	; 0xbba <__ultoa_invert+0x48>
 bb8:	68 94       	set
 bba:	3f 91       	pop	r19
 bbc:	2a e0       	ldi	r18, 0x0A	; 10
 bbe:	26 9f       	mul	r18, r22
 bc0:	11 24       	eor	r1, r1
 bc2:	30 19       	sub	r19, r0
 bc4:	30 5d       	subi	r19, 0xD0	; 208
 bc6:	31 93       	st	Z+, r19
 bc8:	de f6       	brtc	.-74     	; 0xb80 <__ultoa_invert+0xe>
 bca:	cf 01       	movw	r24, r30
 bcc:	08 95       	ret
 bce:	46 2f       	mov	r20, r22
 bd0:	47 70       	andi	r20, 0x07	; 7
 bd2:	40 5d       	subi	r20, 0xD0	; 208
 bd4:	41 93       	st	Z+, r20
 bd6:	b3 e0       	ldi	r27, 0x03	; 3
 bd8:	0f d0       	rcall	.+30     	; 0xbf8 <__ultoa_invert+0x86>
 bda:	c9 f7       	brne	.-14     	; 0xbce <__ultoa_invert+0x5c>
 bdc:	f6 cf       	rjmp	.-20     	; 0xbca <__ultoa_invert+0x58>
 bde:	46 2f       	mov	r20, r22
 be0:	4f 70       	andi	r20, 0x0F	; 15
 be2:	40 5d       	subi	r20, 0xD0	; 208
 be4:	4a 33       	cpi	r20, 0x3A	; 58
 be6:	18 f0       	brcs	.+6      	; 0xbee <__ultoa_invert+0x7c>
 be8:	49 5d       	subi	r20, 0xD9	; 217
 bea:	31 fd       	sbrc	r19, 1
 bec:	40 52       	subi	r20, 0x20	; 32
 bee:	41 93       	st	Z+, r20
 bf0:	02 d0       	rcall	.+4      	; 0xbf6 <__ultoa_invert+0x84>
 bf2:	a9 f7       	brne	.-22     	; 0xbde <__ultoa_invert+0x6c>
 bf4:	ea cf       	rjmp	.-44     	; 0xbca <__ultoa_invert+0x58>
 bf6:	b4 e0       	ldi	r27, 0x04	; 4
 bf8:	a6 95       	lsr	r26
 bfa:	97 95       	ror	r25
 bfc:	87 95       	ror	r24
 bfe:	77 95       	ror	r23
 c00:	67 95       	ror	r22
 c02:	ba 95       	dec	r27
 c04:	c9 f7       	brne	.-14     	; 0xbf8 <__ultoa_invert+0x86>
 c06:	00 97       	sbiw	r24, 0x00	; 0
 c08:	61 05       	cpc	r22, r1
 c0a:	71 05       	cpc	r23, r1
 c0c:	08 95       	ret
 c0e:	9b 01       	movw	r18, r22
 c10:	ac 01       	movw	r20, r24
 c12:	0a 2e       	mov	r0, r26
 c14:	06 94       	lsr	r0
 c16:	57 95       	ror	r21
 c18:	47 95       	ror	r20
 c1a:	37 95       	ror	r19
 c1c:	27 95       	ror	r18
 c1e:	ba 95       	dec	r27
 c20:	c9 f7       	brne	.-14     	; 0xc14 <__ultoa_invert+0xa2>
 c22:	62 0f       	add	r22, r18
 c24:	73 1f       	adc	r23, r19
 c26:	84 1f       	adc	r24, r20
 c28:	95 1f       	adc	r25, r21
 c2a:	a0 1d       	adc	r26, r0
 c2c:	08 95       	ret

00000c2e <__prologue_saves__>:
 c2e:	2f 92       	push	r2
 c30:	3f 92       	push	r3
 c32:	4f 92       	push	r4
 c34:	5f 92       	push	r5
 c36:	6f 92       	push	r6
 c38:	7f 92       	push	r7
 c3a:	8f 92       	push	r8
 c3c:	9f 92       	push	r9
 c3e:	af 92       	push	r10
 c40:	bf 92       	push	r11
 c42:	cf 92       	push	r12
 c44:	df 92       	push	r13
 c46:	ef 92       	push	r14
 c48:	ff 92       	push	r15
 c4a:	0f 93       	push	r16
 c4c:	1f 93       	push	r17
 c4e:	cf 93       	push	r28
 c50:	df 93       	push	r29
 c52:	cd b7       	in	r28, 0x3d	; 61
 c54:	de b7       	in	r29, 0x3e	; 62
 c56:	ca 1b       	sub	r28, r26
 c58:	db 0b       	sbc	r29, r27
 c5a:	0f b6       	in	r0, 0x3f	; 63
 c5c:	f8 94       	cli
 c5e:	de bf       	out	0x3e, r29	; 62
 c60:	0f be       	out	0x3f, r0	; 63
 c62:	cd bf       	out	0x3d, r28	; 61
 c64:	09 94       	ijmp

00000c66 <__epilogue_restores__>:
 c66:	2a 88       	ldd	r2, Y+18	; 0x12
 c68:	39 88       	ldd	r3, Y+17	; 0x11
 c6a:	48 88       	ldd	r4, Y+16	; 0x10
 c6c:	5f 84       	ldd	r5, Y+15	; 0x0f
 c6e:	6e 84       	ldd	r6, Y+14	; 0x0e
 c70:	7d 84       	ldd	r7, Y+13	; 0x0d
 c72:	8c 84       	ldd	r8, Y+12	; 0x0c
 c74:	9b 84       	ldd	r9, Y+11	; 0x0b
 c76:	aa 84       	ldd	r10, Y+10	; 0x0a
 c78:	b9 84       	ldd	r11, Y+9	; 0x09
 c7a:	c8 84       	ldd	r12, Y+8	; 0x08
 c7c:	df 80       	ldd	r13, Y+7	; 0x07
 c7e:	ee 80       	ldd	r14, Y+6	; 0x06
 c80:	fd 80       	ldd	r15, Y+5	; 0x05
 c82:	0c 81       	ldd	r16, Y+4	; 0x04
 c84:	1b 81       	ldd	r17, Y+3	; 0x03
 c86:	aa 81       	ldd	r26, Y+2	; 0x02
 c88:	b9 81       	ldd	r27, Y+1	; 0x01
 c8a:	ce 0f       	add	r28, r30
 c8c:	d1 1d       	adc	r29, r1
 c8e:	0f b6       	in	r0, 0x3f	; 63
 c90:	f8 94       	cli
 c92:	de bf       	out	0x3e, r29	; 62
 c94:	0f be       	out	0x3f, r0	; 63
 c96:	cd bf       	out	0x3d, r28	; 61
 c98:	ed 01       	movw	r28, r26
 c9a:	08 95       	ret

00000c9c <_exit>:
 c9c:	f8 94       	cli

00000c9e <__stop_program>:
 c9e:	ff cf       	rjmp	.-2      	; 0xc9e <__stop_program>
