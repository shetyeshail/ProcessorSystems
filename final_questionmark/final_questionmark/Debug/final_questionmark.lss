
final_questionmark.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000a20  00000ab4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a20  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000013a  00800104  00800104  00000ab8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000ab8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000b14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e1b  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e0  00000000  00000000  00001a27  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c5  00000000  00000000  00002407  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000218  00000000  00000000  00002bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000593  00000000  00000000  00002de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000572  00000000  00000000  00003377  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000098  00000000  00000000  000038e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 a2 01 	jmp	0x344	; 0x344 <__vector_3>
  10:	0c 94 e7 01 	jmp	0x3ce	; 0x3ce <__vector_4>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_22>

0000005c <LCD_SegTable>:
  5c:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
  6c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
  7c:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
  8c:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
  9c:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
  ac:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
  bc:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d4 e0       	ldi	r29, 0x04	; 4
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	e0 e2       	ldi	r30, 0x20	; 32
  dc:	fa e0       	ldi	r31, 0x0A	; 10
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a4 30       	cpi	r26, 0x04	; 4
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	22 e0       	ldi	r18, 0x02	; 2
  ec:	a4 e0       	ldi	r26, 0x04	; 4
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	ae 33       	cpi	r26, 0x3E	; 62
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 84 01 	call	0x308	; 0x308 <main>
  fe:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <LCD_Init>:
{ 
   uint8_t StrBuff[LCD_TEXTBUFFER_SIZE]; 

   strcpy_P(StrBuff, FlashData); 
   LCD_puts(StrBuff); 
} 
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7e00e7>
 10c:	87 eb       	ldi	r24, 0xB7	; 183
 10e:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7e00e5>
 112:	87 e0       	ldi	r24, 0x07	; 7
 114:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7e00e6>
 118:	e4 ee       	ldi	r30, 0xE4	; 228
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	80 ec       	ldi	r24, 0xC0	; 192
 11e:	80 83       	st	Z, r24
 120:	80 81       	ld	r24, Z
 122:	88 60       	ori	r24, 0x08	; 8
 124:	80 83       	st	Z, r24
 126:	08 95       	ret

00000128 <LCD_puts>:
 128:	dc 01       	movw	r26, r24
 12a:	e9 e0       	ldi	r30, 0x09	; 9
 12c:	f1 e0       	ldi	r31, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	8f ef       	ldi	r24, 0xFF	; 255
 132:	2d 91       	ld	r18, X+
 134:	36 ed       	ldi	r19, 0xD6	; 214
 136:	32 0f       	add	r19, r18
 138:	31 35       	cpi	r19, 0x51	; 81
 13a:	28 f4       	brcc	.+10     	; 0x146 <LCD_puts+0x1e>
 13c:	20 32       	cpi	r18, 0x20	; 32
 13e:	09 f4       	brne	.+2      	; 0x142 <LCD_puts+0x1a>
 140:	38 2f       	mov	r19, r24
 142:	30 83       	st	Z, r19
 144:	03 c0       	rjmp	.+6      	; 0x14c <LCD_puts+0x24>
 146:	22 23       	and	r18, r18
 148:	29 f0       	breq	.+10     	; 0x154 <LCD_puts+0x2c>
 14a:	80 83       	st	Z, r24
 14c:	9f 5f       	subi	r25, 0xFF	; 255
 14e:	31 96       	adiw	r30, 0x01	; 1
 150:	94 31       	cpi	r25, 0x14	; 20
 152:	79 f7       	brne	.-34     	; 0x132 <LCD_puts+0xa>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	97 30       	cpi	r25, 0x07	; 7
 158:	08 f4       	brcc	.+2      	; 0x15c <LCD_puts+0x34>
 15a:	80 e0       	ldi	r24, 0x00	; 0
 15c:	80 93 39 01 	sts	0x0139, r24	; 0x800139 <ScrollMode>
 160:	8a e0       	ldi	r24, 0x0A	; 10
 162:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ScrollCount>
 166:	87 e0       	ldi	r24, 0x07	; 7
 168:	89 0f       	add	r24, r25
 16a:	2f ef       	ldi	r18, 0xFF	; 255
 16c:	e9 2f       	mov	r30, r25
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	e7 5f       	subi	r30, 0xF7	; 247
 172:	fe 4f       	sbci	r31, 0xFE	; 254
 174:	20 83       	st	Z, r18
 176:	9f 5f       	subi	r25, 0xFF	; 255
 178:	98 13       	cpse	r25, r24
 17a:	f8 cf       	rjmp	.-16     	; 0x16c <LCD_puts+0x44>
 17c:	e8 2f       	mov	r30, r24
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	e7 5f       	subi	r30, 0xF7	; 247
 182:	fe 4f       	sbci	r31, 0xFE	; 254
 184:	10 82       	st	Z, r1
 186:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <StrStart>
 18a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <StrEnd>
 18e:	81 e0       	ldi	r24, 0x01	; 1
 190:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <UpdateLCD>
 194:	08 95       	ret

00000196 <LCD_WriteChar>:
} 

void LCD_WriteChar(uint8_t Byte, uint8_t Digit) 
{ 
   uint16_t SegData  = 0x00; 
   uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1)); 
 196:	a6 2f       	mov	r26, r22
 198:	a6 95       	lsr	r26
 19a:	b0 e0       	ldi	r27, 0x00	; 0
 19c:	ab 5d       	subi	r26, 0xDB	; 219
 19e:	be 4f       	sbci	r27, 0xFE	; 254

   if (Byte != 0xFF) 
 1a0:	8f 3f       	cpi	r24, 0xFF	; 255
 1a2:	f1 f0       	breq	.+60     	; 0x1e0 <LCD_WriteChar+0x4a>
     SegData = pgm_read_word(&LCD_SegTable[Byte]);    
 1a4:	e8 2f       	mov	r30, r24
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	ee 0f       	add	r30, r30
 1aa:	ff 1f       	adc	r31, r31
 1ac:	e4 5a       	subi	r30, 0xA4	; 164
 1ae:	ff 4f       	sbci	r31, 0xFF	; 255
 1b0:	25 91       	lpm	r18, Z+
 1b2:	34 91       	lpm	r19, Z
 1b4:	17 c0       	rjmp	.+46     	; 0x1e4 <LCD_WriteChar+0x4e>

   for (uint8_t BNib = 0; BNib < 4; BNib++) 
   { 
      uint8_t Mask          = 0xF0; 
      uint8_t MaskedSegData = (SegData & 0x0000F); 
 1b6:	82 2f       	mov	r24, r18
 1b8:	8f 70       	andi	r24, 0x0F	; 15
    
      if (Digit & 0x01) 
 1ba:	55 23       	and	r21, r21
 1bc:	11 f0       	breq	.+4      	; 0x1c2 <LCD_WriteChar+0x2c>
      { 
         Mask = 0x0F; 
         MaskedSegData <<= 4; 
 1be:	82 95       	swap	r24
 1c0:	80 7f       	andi	r24, 0xF0	; 240
      } 
        
      *BuffPtr = ((*BuffPtr & Mask) | MaskedSegData); 
 1c2:	9c 91       	ld	r25, X
 1c4:	94 23       	and	r25, r20
 1c6:	89 2b       	or	r24, r25
 1c8:	8c 93       	st	X, r24

      SegData >>= 4; 
 1ca:	32 95       	swap	r19
 1cc:	22 95       	swap	r18
 1ce:	2f 70       	andi	r18, 0x0F	; 15
 1d0:	23 27       	eor	r18, r19
 1d2:	3f 70       	andi	r19, 0x0F	; 15
 1d4:	23 27       	eor	r18, r19
      BuffPtr  += 5; 
 1d6:	15 96       	adiw	r26, 0x05	; 5
   uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1)); 

   if (Byte != 0xFF) 
     SegData = pgm_read_word(&LCD_SegTable[Byte]);    

   for (uint8_t BNib = 0; BNib < 4; BNib++) 
 1d8:	6a 17       	cp	r22, r26
 1da:	7b 07       	cpc	r23, r27
 1dc:	61 f7       	brne	.-40     	; 0x1b6 <LCD_WriteChar+0x20>
 1de:	08 95       	ret
   UpdateLCD  = TRUE; 
} 

void LCD_WriteChar(uint8_t Byte, uint8_t Digit) 
{ 
   uint16_t SegData  = 0x00; 
 1e0:	20 e0       	ldi	r18, 0x00	; 0
 1e2:	30 e0       	ldi	r19, 0x00	; 0
 1e4:	56 2f       	mov	r21, r22
 1e6:	51 70       	andi	r21, 0x01	; 1
 1e8:	60 ff       	sbrs	r22, 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <LCD_WriteChar+0x5a>
 1ec:	4f e0       	ldi	r20, 0x0F	; 15
 1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <LCD_WriteChar+0x5c>
 1f0:	40 ef       	ldi	r20, 0xF0	; 240
 1f2:	bd 01       	movw	r22, r26
 1f4:	6c 5e       	subi	r22, 0xEC	; 236
 1f6:	7f 4f       	sbci	r23, 0xFF	; 255
 1f8:	de cf       	rjmp	.-68     	; 0x1b6 <LCD_WriteChar+0x20>

000001fa <__vector_22>:
      BuffPtr  += 5; 
   } 
} 

ISR(LCD_vect) 
{ 
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	cf 93       	push	r28
 21a:	ef 93       	push	r30
 21c:	ff 93       	push	r31
   if (ScrollMode) 
 21e:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <ScrollMode>
 222:	88 23       	and	r24, r24
 224:	09 f4       	brne	.+2      	; 0x228 <__vector_22+0x2e>
 226:	42 c0       	rjmp	.+132    	; 0x2ac <__vector_22+0xb2>
   { 
      if (!(ScrollCount)) 
 228:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <ScrollCount>
 22c:	81 11       	cpse	r24, r1
 22e:	04 c0       	rjmp	.+8      	; 0x238 <__vector_22+0x3e>
        UpdateLCD = TRUE; 
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <UpdateLCD>
 236:	04 c0       	rjmp	.+8      	; 0x240 <__vector_22+0x46>
      else 
        ScrollCount--; 
 238:	81 50       	subi	r24, 0x01	; 1
 23a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ScrollCount>
 23e:	36 c0       	rjmp	.+108    	; 0x2ac <__vector_22+0xb2>
      BuffPtr  += 5; 
   } 
} 

ISR(LCD_vect) 
{ 
 240:	c0 e0       	ldi	r28, 0x00	; 0

   if (UpdateLCD) 
   { 
      for (uint8_t Character = 0; Character < 6; Character++)
      { 
         uint8_t Byte = (StrStart + Character); 
 242:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <StrStart>
 246:	ec 0f       	add	r30, r28

         if (Byte >= StrEnd) 
 248:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <StrEnd>
 24c:	e8 17       	cp	r30, r24
 24e:	38 f0       	brcs	.+14     	; 0x25e <__vector_22+0x64>
           Byte = TextBuffer[Byte - StrEnd]; 
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	e8 1b       	sub	r30, r24
 254:	f1 09       	sbc	r31, r1
 256:	e7 5f       	subi	r30, 0xF7	; 247
 258:	fe 4f       	sbci	r31, 0xFE	; 254
 25a:	80 81       	ld	r24, Z
 25c:	04 c0       	rjmp	.+8      	; 0x266 <__vector_22+0x6c>
         else 
           Byte = TextBuffer[Byte]; 
 25e:	f0 e0       	ldi	r31, 0x00	; 0
 260:	e7 5f       	subi	r30, 0xF7	; 247
 262:	fe 4f       	sbci	r31, 0xFE	; 254
 264:	80 81       	ld	r24, Z
          
         LCD_WriteChar(Byte, Character); 
 266:	6c 2f       	mov	r22, r28
 268:	0e 94 cb 00 	call	0x196	; 0x196 <LCD_WriteChar>
        ScrollCount--; 
   } 

   if (UpdateLCD) 
   { 
      for (uint8_t Character = 0; Character < 6; Character++)
 26c:	cf 5f       	subi	r28, 0xFF	; 255
 26e:	c6 30       	cpi	r28, 0x06	; 6
 270:	41 f7       	brne	.-48     	; 0x242 <__vector_22+0x48>
           Byte = TextBuffer[Byte]; 
          
         LCD_WriteChar(Byte, Character); 
      } 
        
      if (StrStart++ == StrEnd) 
 272:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <StrStart>
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	98 0f       	add	r25, r24
 27a:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <StrStart>
 27e:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <StrEnd>
 282:	89 13       	cpse	r24, r25
 284:	03 c0       	rjmp	.+6      	; 0x28c <__vector_22+0x92>
        StrStart = 1; 
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <StrStart>
        
      ScrollCount = LCD_SCROLLCOUNT_DEFAULT; 
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <ScrollCount>
      UpdateLCD = FALSE; 
 292:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <UpdateLCD>
 296:	a5 e2       	ldi	r26, 0x25	; 37
 298:	b1 e0       	ldi	r27, 0x01	; 1
      BuffPtr  += 5; 
   } 
} 

ISR(LCD_vect) 
{ 
 29a:	ec ee       	ldi	r30, 0xEC	; 236
 29c:	f0 e0       	ldi	r31, 0x00	; 0
      ScrollCount = LCD_SCROLLCOUNT_DEFAULT; 
      UpdateLCD = FALSE; 
   } 

   for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++) 
     *(pLCDREG + LCDChar) = SegBuffer[LCDChar]; 
 29e:	8d 91       	ld	r24, X+
 2a0:	81 93       	st	Z+, r24
        
      ScrollCount = LCD_SCROLLCOUNT_DEFAULT; 
      UpdateLCD = FALSE; 
   } 

   for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++) 
 2a2:	e1 15       	cp	r30, r1
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	f8 07       	cpc	r31, r24
 2a8:	d1 f7       	brne	.-12     	; 0x29e <__vector_22+0xa4>
 2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <__vector_22+0xbc>
        UpdateLCD = TRUE; 
      else 
        ScrollCount--; 
   } 

   if (UpdateLCD) 
 2ac:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <UpdateLCD>
 2b0:	88 23       	and	r24, r24
 2b2:	89 f3       	breq	.-30     	; 0x296 <__vector_22+0x9c>
 2b4:	c5 cf       	rjmp	.-118    	; 0x240 <__vector_22+0x46>
      UpdateLCD = FALSE; 
   } 

   for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++) 
     *(pLCDREG + LCDChar) = SegBuffer[LCDChar]; 
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	cf 91       	pop	r28
 2bc:	bf 91       	pop	r27
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <TenPWM>:
	OCR0A = 0x50;//Verified
	while (TIFR0 << OCF0A == 0){
	}
	TCCR0A = 0;
	TIFR0 = 1<<OCF0A;
}
 2da:	8a e0       	ldi	r24, 0x0A	; 10
 2dc:	84 bd       	out	0x24, r24	; 36
 2de:	16 bc       	out	0x26, r1	; 38
 2e0:	87 bd       	out	0x27, r24	; 39
 2e2:	85 b3       	in	r24, 0x15	; 21
 2e4:	88 23       	and	r24, r24
 2e6:	e9 f3       	breq	.-6      	; 0x2e2 <TenPWM+0x8>
 2e8:	14 bc       	out	0x24, r1	; 36
 2ea:	82 e0       	ldi	r24, 0x02	; 2
 2ec:	85 bb       	out	0x15, r24	; 21
 2ee:	08 95       	ret

000002f0 <NinePWM>:

int NinePWM(){
	TCCR0A = (1<<1)|(1<<3); // CTC MODE with 8 pre-scaler
 2f0:	8a e0       	ldi	r24, 0x0A	; 10
 2f2:	84 bd       	out	0x24, r24	; 36
	TCNT0 = 0;
 2f4:	16 bc       	out	0x26, r1	; 38
	OCR0A = 0x5A;//Verified
 2f6:	8a e5       	ldi	r24, 0x5A	; 90
 2f8:	87 bd       	out	0x27, r24	; 39
	while (TIFR0 << OCF0A == 0){
 2fa:	85 b3       	in	r24, 0x15	; 21
 2fc:	88 23       	and	r24, r24
 2fe:	e9 f3       	breq	.-6      	; 0x2fa <NinePWM+0xa>
	}
	TCCR0A = 0;
 300:	14 bc       	out	0x24, r1	; 36
	TIFR0 = 1<<OCF0A;
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	85 bb       	out	0x15, r24	; 21
}
 306:	08 95       	ret

00000308 <main>:
// char DEFAULT = 0b0101111; ---- With 4 switches
// char DEFAULT = 0b0100000; ---- No switches
// Assume motor is controlled by the 5th pin!

int main(){
	LCD_Init();
 308:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Init>
	
	DDRB =	(1<<1); ///////////////////////TESTER LED
 30c:	82 e0       	ldi	r24, 0x02	; 2
 30e:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<0);/////TESTERd
 310:	91 e0       	ldi	r25, 0x01	; 1
 312:	95 b9       	out	0x05, r25	; 5
	
	//PORTB = (1<<6)|(1<<0)|(1<<1)|(1<<2)|(1<<3); //Switches and Sensor control
	PCMSK1 = (1<<PINB0); //Interrupt Pin
 314:	90 93 6c 00 	sts	0x006C, r25	; 0x80006c <__TEXT_REGION_LENGTH__+0x7e006c>
	EIMSK = (1<<PCIE1);
 318:	90 e8       	ldi	r25, 0x80	; 128
 31a:	9d bb       	out	0x1d, r25	; 29
	
	TCCR2A = (1<<CS01)|(1<<3);
 31c:	9a e0       	ldi	r25, 0x0A	; 10
 31e:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	OCR2A = 0xF3;
 322:	93 ef       	ldi	r25, 0xF3	; 243
 324:	90 93 b3 00 	sts	0x00B3, r25	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7e00b3>
	TCNT2 = 0;
 328:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TIMSK2 = (1<<OCIE2A);
 32c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
	
	//Incorporate switches eventually.....
	sei(); //Set Global Interrupt
 330:	78 94       	sei
	
	while(1){
		//Different pulses use the different functions.. MUST ADD TO 100 BETWEEN DELAY AND PULSE
		PORTB = (1<<0)|(1<<1);
 332:	d3 e0       	ldi	r29, 0x03	; 3
		TenPWM();
		PORTB = (1<<0)|(0<<1);
 334:	c1 e0       	ldi	r28, 0x01	; 1
	//Incorporate switches eventually.....
	sei(); //Set Global Interrupt
	
	while(1){
		//Different pulses use the different functions.. MUST ADD TO 100 BETWEEN DELAY AND PULSE
		PORTB = (1<<0)|(1<<1);
 336:	d5 b9       	out	0x05, r29	; 5
		TenPWM();
 338:	0e 94 6d 01 	call	0x2da	; 0x2da <TenPWM>
		PORTB = (1<<0)|(0<<1);
 33c:	c5 b9       	out	0x05, r28	; 5
		NinePWM();
 33e:	0e 94 78 01 	call	0x2f0	; 0x2f0 <NinePWM>
 342:	f9 cf       	rjmp	.-14     	; 0x336 <main+0x2e>

00000344 <__vector_3>:
	}
	TCCR0A = 0;
	TIFR0 = 1<<OCF0A;
}

ISR(PCINT1_vect,ISR_BLOCK){
 344:	1f 92       	push	r1
 346:	0f 92       	push	r0
 348:	0f b6       	in	r0, 0x3f	; 63
 34a:	0f 92       	push	r0
 34c:	11 24       	eor	r1, r1
 34e:	2f 93       	push	r18
 350:	3f 93       	push	r19
 352:	4f 93       	push	r20
 354:	5f 93       	push	r21
 356:	6f 93       	push	r22
 358:	7f 93       	push	r23
 35a:	8f 93       	push	r24
 35c:	9f 93       	push	r25
 35e:	af 93       	push	r26
 360:	bf 93       	push	r27
 362:	ef 93       	push	r30
 364:	ff 93       	push	r31
	counter++;//Count the number of rotations
 366:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
 36a:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
 36e:	01 96       	adiw	r24, 0x01	; 1
 370:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 374:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	sprintf(str,"%d",rpm);//Display
 378:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <rpm+0x1>
 37c:	8f 93       	push	r24
 37e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <rpm>
 382:	8f 93       	push	r24
 384:	80 e0       	ldi	r24, 0x00	; 0
 386:	91 e0       	ldi	r25, 0x01	; 1
 388:	9f 93       	push	r25
 38a:	8f 93       	push	r24
 38c:	8e e3       	ldi	r24, 0x3E	; 62
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	9f 93       	push	r25
 392:	8f 93       	push	r24
 394:	0e 94 24 02 	call	0x448	; 0x448 <sprintf>
	LCD_puts(str);//Display RPM
 398:	8e e3       	ldi	r24, 0x3E	; 62
 39a:	91 e0       	ldi	r25, 0x01	; 1
 39c:	0e 94 94 00 	call	0x128	; 0x128 <LCD_puts>
	return;
 3a0:	0f 90       	pop	r0
 3a2:	0f 90       	pop	r0
 3a4:	0f 90       	pop	r0
 3a6:	0f 90       	pop	r0
 3a8:	0f 90       	pop	r0
 3aa:	0f 90       	pop	r0
}
 3ac:	ff 91       	pop	r31
 3ae:	ef 91       	pop	r30
 3b0:	bf 91       	pop	r27
 3b2:	af 91       	pop	r26
 3b4:	9f 91       	pop	r25
 3b6:	8f 91       	pop	r24
 3b8:	7f 91       	pop	r23
 3ba:	6f 91       	pop	r22
 3bc:	5f 91       	pop	r21
 3be:	4f 91       	pop	r20
 3c0:	3f 91       	pop	r19
 3c2:	2f 91       	pop	r18
 3c4:	0f 90       	pop	r0
 3c6:	0f be       	out	0x3f, r0	; 63
 3c8:	0f 90       	pop	r0
 3ca:	1f 90       	pop	r1
 3cc:	18 95       	reti

000003ce <__vector_4>:

ISR(TIMER2_COMP_vect,ISR_BLOCK){
 3ce:	1f 92       	push	r1
 3d0:	0f 92       	push	r0
 3d2:	0f b6       	in	r0, 0x3f	; 63
 3d4:	0f 92       	push	r0
 3d6:	11 24       	eor	r1, r1
 3d8:	2f 93       	push	r18
 3da:	3f 93       	push	r19
 3dc:	4f 93       	push	r20
 3de:	5f 93       	push	r21
 3e0:	8f 93       	push	r24
 3e2:	9f 93       	push	r25
	x++;
 3e4:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <x>
 3e8:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <x+0x1>
 3ec:	01 96       	adiw	r24, 0x01	; 1
 3ee:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <x+0x1>
 3f2:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <x>
	if (x == 1000){//100 microsecond routine * 1000 intervals = .1 seconds
 3f6:	88 3e       	cpi	r24, 0xE8	; 232
 3f8:	93 40       	sbci	r25, 0x03	; 3
 3fa:	d9 f4       	brne	.+54     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		rpm = counter * 600; // .1 seconds * 600 equals 60 seconds/ 1 minute RPM
 3fc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__data_end>
 400:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__data_end+0x1>
 404:	28 e5       	ldi	r18, 0x58	; 88
 406:	32 e0       	ldi	r19, 0x02	; 2
 408:	42 9f       	mul	r20, r18
 40a:	c0 01       	movw	r24, r0
 40c:	43 9f       	mul	r20, r19
 40e:	90 0d       	add	r25, r0
 410:	52 9f       	mul	r21, r18
 412:	90 0d       	add	r25, r0
 414:	11 24       	eor	r1, r1
 416:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <rpm+0x1>
 41a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <rpm>
		//calculate the RPM HERE
		x = 0; //Reset the counter
 41e:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <x+0x1>
 422:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <x>
		TCNT2 = 0; //Reset the timer
 426:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
		counter = 0; //Reset the counter
 42a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__data_end+0x1>
 42e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <__data_end>
	}
	return;
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	5f 91       	pop	r21
 438:	4f 91       	pop	r20
 43a:	3f 91       	pop	r19
 43c:	2f 91       	pop	r18
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <sprintf>:
 448:	ae e0       	ldi	r26, 0x0E	; 14
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	ea e2       	ldi	r30, 0x2A	; 42
 44e:	f2 e0       	ldi	r31, 0x02	; 2
 450:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__prologue_saves__+0x1c>
 454:	0d 89       	ldd	r16, Y+21	; 0x15
 456:	1e 89       	ldd	r17, Y+22	; 0x16
 458:	86 e0       	ldi	r24, 0x06	; 6
 45a:	8c 83       	std	Y+4, r24	; 0x04
 45c:	1a 83       	std	Y+2, r17	; 0x02
 45e:	09 83       	std	Y+1, r16	; 0x01
 460:	8f ef       	ldi	r24, 0xFF	; 255
 462:	9f e7       	ldi	r25, 0x7F	; 127
 464:	9e 83       	std	Y+6, r25	; 0x06
 466:	8d 83       	std	Y+5, r24	; 0x05
 468:	ae 01       	movw	r20, r28
 46a:	47 5e       	subi	r20, 0xE7	; 231
 46c:	5f 4f       	sbci	r21, 0xFF	; 255
 46e:	6f 89       	ldd	r22, Y+23	; 0x17
 470:	78 8d       	ldd	r23, Y+24	; 0x18
 472:	ce 01       	movw	r24, r28
 474:	01 96       	adiw	r24, 0x01	; 1
 476:	0e 94 46 02 	call	0x48c	; 0x48c <vfprintf>
 47a:	ef 81       	ldd	r30, Y+7	; 0x07
 47c:	f8 85       	ldd	r31, Y+8	; 0x08
 47e:	e0 0f       	add	r30, r16
 480:	f1 1f       	adc	r31, r17
 482:	10 82       	st	Z, r1
 484:	2e 96       	adiw	r28, 0x0e	; 14
 486:	e4 e0       	ldi	r30, 0x04	; 4
 488:	0c 94 01 05 	jmp	0xa02	; 0xa02 <__epilogue_restores__+0x1c>

0000048c <vfprintf>:
 48c:	ab e0       	ldi	r26, 0x0B	; 11
 48e:	b0 e0       	ldi	r27, 0x00	; 0
 490:	ec e4       	ldi	r30, 0x4C	; 76
 492:	f2 e0       	ldi	r31, 0x02	; 2
 494:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__prologue_saves__>
 498:	6c 01       	movw	r12, r24
 49a:	7b 01       	movw	r14, r22
 49c:	8a 01       	movw	r16, r20
 49e:	fc 01       	movw	r30, r24
 4a0:	17 82       	std	Z+7, r1	; 0x07
 4a2:	16 82       	std	Z+6, r1	; 0x06
 4a4:	83 81       	ldd	r24, Z+3	; 0x03
 4a6:	81 ff       	sbrs	r24, 1
 4a8:	cc c1       	rjmp	.+920    	; 0x842 <__stack+0x343>
 4aa:	ce 01       	movw	r24, r28
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	3c 01       	movw	r6, r24
 4b0:	f6 01       	movw	r30, r12
 4b2:	93 81       	ldd	r25, Z+3	; 0x03
 4b4:	f7 01       	movw	r30, r14
 4b6:	93 fd       	sbrc	r25, 3
 4b8:	85 91       	lpm	r24, Z+
 4ba:	93 ff       	sbrs	r25, 3
 4bc:	81 91       	ld	r24, Z+
 4be:	7f 01       	movw	r14, r30
 4c0:	88 23       	and	r24, r24
 4c2:	09 f4       	brne	.+2      	; 0x4c6 <vfprintf+0x3a>
 4c4:	ba c1       	rjmp	.+884    	; 0x83a <__stack+0x33b>
 4c6:	85 32       	cpi	r24, 0x25	; 37
 4c8:	39 f4       	brne	.+14     	; 0x4d8 <vfprintf+0x4c>
 4ca:	93 fd       	sbrc	r25, 3
 4cc:	85 91       	lpm	r24, Z+
 4ce:	93 ff       	sbrs	r25, 3
 4d0:	81 91       	ld	r24, Z+
 4d2:	7f 01       	movw	r14, r30
 4d4:	85 32       	cpi	r24, 0x25	; 37
 4d6:	29 f4       	brne	.+10     	; 0x4e2 <vfprintf+0x56>
 4d8:	b6 01       	movw	r22, r12
 4da:	90 e0       	ldi	r25, 0x00	; 0
 4dc:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 4e0:	e7 cf       	rjmp	.-50     	; 0x4b0 <vfprintf+0x24>
 4e2:	91 2c       	mov	r9, r1
 4e4:	21 2c       	mov	r2, r1
 4e6:	31 2c       	mov	r3, r1
 4e8:	ff e1       	ldi	r31, 0x1F	; 31
 4ea:	f3 15       	cp	r31, r3
 4ec:	d8 f0       	brcs	.+54     	; 0x524 <__stack+0x25>
 4ee:	8b 32       	cpi	r24, 0x2B	; 43
 4f0:	79 f0       	breq	.+30     	; 0x510 <__stack+0x11>
 4f2:	38 f4       	brcc	.+14     	; 0x502 <__stack+0x3>
 4f4:	80 32       	cpi	r24, 0x20	; 32
 4f6:	79 f0       	breq	.+30     	; 0x516 <__stack+0x17>
 4f8:	83 32       	cpi	r24, 0x23	; 35
 4fa:	a1 f4       	brne	.+40     	; 0x524 <__stack+0x25>
 4fc:	23 2d       	mov	r18, r3
 4fe:	20 61       	ori	r18, 0x10	; 16
 500:	1d c0       	rjmp	.+58     	; 0x53c <__stack+0x3d>
 502:	8d 32       	cpi	r24, 0x2D	; 45
 504:	61 f0       	breq	.+24     	; 0x51e <__stack+0x1f>
 506:	80 33       	cpi	r24, 0x30	; 48
 508:	69 f4       	brne	.+26     	; 0x524 <__stack+0x25>
 50a:	23 2d       	mov	r18, r3
 50c:	21 60       	ori	r18, 0x01	; 1
 50e:	16 c0       	rjmp	.+44     	; 0x53c <__stack+0x3d>
 510:	83 2d       	mov	r24, r3
 512:	82 60       	ori	r24, 0x02	; 2
 514:	38 2e       	mov	r3, r24
 516:	e3 2d       	mov	r30, r3
 518:	e4 60       	ori	r30, 0x04	; 4
 51a:	3e 2e       	mov	r3, r30
 51c:	2a c0       	rjmp	.+84     	; 0x572 <__stack+0x73>
 51e:	f3 2d       	mov	r31, r3
 520:	f8 60       	ori	r31, 0x08	; 8
 522:	1d c0       	rjmp	.+58     	; 0x55e <__stack+0x5f>
 524:	37 fc       	sbrc	r3, 7
 526:	2d c0       	rjmp	.+90     	; 0x582 <__stack+0x83>
 528:	20 ed       	ldi	r18, 0xD0	; 208
 52a:	28 0f       	add	r18, r24
 52c:	2a 30       	cpi	r18, 0x0A	; 10
 52e:	40 f0       	brcs	.+16     	; 0x540 <__stack+0x41>
 530:	8e 32       	cpi	r24, 0x2E	; 46
 532:	b9 f4       	brne	.+46     	; 0x562 <__stack+0x63>
 534:	36 fc       	sbrc	r3, 6
 536:	81 c1       	rjmp	.+770    	; 0x83a <__stack+0x33b>
 538:	23 2d       	mov	r18, r3
 53a:	20 64       	ori	r18, 0x40	; 64
 53c:	32 2e       	mov	r3, r18
 53e:	19 c0       	rjmp	.+50     	; 0x572 <__stack+0x73>
 540:	36 fe       	sbrs	r3, 6
 542:	06 c0       	rjmp	.+12     	; 0x550 <__stack+0x51>
 544:	8a e0       	ldi	r24, 0x0A	; 10
 546:	98 9e       	mul	r9, r24
 548:	20 0d       	add	r18, r0
 54a:	11 24       	eor	r1, r1
 54c:	92 2e       	mov	r9, r18
 54e:	11 c0       	rjmp	.+34     	; 0x572 <__stack+0x73>
 550:	ea e0       	ldi	r30, 0x0A	; 10
 552:	2e 9e       	mul	r2, r30
 554:	20 0d       	add	r18, r0
 556:	11 24       	eor	r1, r1
 558:	22 2e       	mov	r2, r18
 55a:	f3 2d       	mov	r31, r3
 55c:	f0 62       	ori	r31, 0x20	; 32
 55e:	3f 2e       	mov	r3, r31
 560:	08 c0       	rjmp	.+16     	; 0x572 <__stack+0x73>
 562:	8c 36       	cpi	r24, 0x6C	; 108
 564:	21 f4       	brne	.+8      	; 0x56e <__stack+0x6f>
 566:	83 2d       	mov	r24, r3
 568:	80 68       	ori	r24, 0x80	; 128
 56a:	38 2e       	mov	r3, r24
 56c:	02 c0       	rjmp	.+4      	; 0x572 <__stack+0x73>
 56e:	88 36       	cpi	r24, 0x68	; 104
 570:	41 f4       	brne	.+16     	; 0x582 <__stack+0x83>
 572:	f7 01       	movw	r30, r14
 574:	93 fd       	sbrc	r25, 3
 576:	85 91       	lpm	r24, Z+
 578:	93 ff       	sbrs	r25, 3
 57a:	81 91       	ld	r24, Z+
 57c:	7f 01       	movw	r14, r30
 57e:	81 11       	cpse	r24, r1
 580:	b3 cf       	rjmp	.-154    	; 0x4e8 <vfprintf+0x5c>
 582:	98 2f       	mov	r25, r24
 584:	9f 7d       	andi	r25, 0xDF	; 223
 586:	95 54       	subi	r25, 0x45	; 69
 588:	93 30       	cpi	r25, 0x03	; 3
 58a:	28 f4       	brcc	.+10     	; 0x596 <__stack+0x97>
 58c:	0c 5f       	subi	r16, 0xFC	; 252
 58e:	1f 4f       	sbci	r17, 0xFF	; 255
 590:	9f e3       	ldi	r25, 0x3F	; 63
 592:	99 83       	std	Y+1, r25	; 0x01
 594:	0d c0       	rjmp	.+26     	; 0x5b0 <__stack+0xb1>
 596:	83 36       	cpi	r24, 0x63	; 99
 598:	31 f0       	breq	.+12     	; 0x5a6 <__stack+0xa7>
 59a:	83 37       	cpi	r24, 0x73	; 115
 59c:	71 f0       	breq	.+28     	; 0x5ba <__stack+0xbb>
 59e:	83 35       	cpi	r24, 0x53	; 83
 5a0:	09 f0       	breq	.+2      	; 0x5a4 <__stack+0xa5>
 5a2:	59 c0       	rjmp	.+178    	; 0x656 <__stack+0x157>
 5a4:	21 c0       	rjmp	.+66     	; 0x5e8 <__stack+0xe9>
 5a6:	f8 01       	movw	r30, r16
 5a8:	80 81       	ld	r24, Z
 5aa:	89 83       	std	Y+1, r24	; 0x01
 5ac:	0e 5f       	subi	r16, 0xFE	; 254
 5ae:	1f 4f       	sbci	r17, 0xFF	; 255
 5b0:	88 24       	eor	r8, r8
 5b2:	83 94       	inc	r8
 5b4:	91 2c       	mov	r9, r1
 5b6:	53 01       	movw	r10, r6
 5b8:	13 c0       	rjmp	.+38     	; 0x5e0 <__stack+0xe1>
 5ba:	28 01       	movw	r4, r16
 5bc:	f2 e0       	ldi	r31, 0x02	; 2
 5be:	4f 0e       	add	r4, r31
 5c0:	51 1c       	adc	r5, r1
 5c2:	f8 01       	movw	r30, r16
 5c4:	a0 80       	ld	r10, Z
 5c6:	b1 80       	ldd	r11, Z+1	; 0x01
 5c8:	36 fe       	sbrs	r3, 6
 5ca:	03 c0       	rjmp	.+6      	; 0x5d2 <__stack+0xd3>
 5cc:	69 2d       	mov	r22, r9
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <__stack+0xd7>
 5d2:	6f ef       	ldi	r22, 0xFF	; 255
 5d4:	7f ef       	ldi	r23, 0xFF	; 255
 5d6:	c5 01       	movw	r24, r10
 5d8:	0e 94 32 04 	call	0x864	; 0x864 <strnlen>
 5dc:	4c 01       	movw	r8, r24
 5de:	82 01       	movw	r16, r4
 5e0:	f3 2d       	mov	r31, r3
 5e2:	ff 77       	andi	r31, 0x7F	; 127
 5e4:	3f 2e       	mov	r3, r31
 5e6:	16 c0       	rjmp	.+44     	; 0x614 <__stack+0x115>
 5e8:	28 01       	movw	r4, r16
 5ea:	22 e0       	ldi	r18, 0x02	; 2
 5ec:	42 0e       	add	r4, r18
 5ee:	51 1c       	adc	r5, r1
 5f0:	f8 01       	movw	r30, r16
 5f2:	a0 80       	ld	r10, Z
 5f4:	b1 80       	ldd	r11, Z+1	; 0x01
 5f6:	36 fe       	sbrs	r3, 6
 5f8:	03 c0       	rjmp	.+6      	; 0x600 <__stack+0x101>
 5fa:	69 2d       	mov	r22, r9
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <__stack+0x105>
 600:	6f ef       	ldi	r22, 0xFF	; 255
 602:	7f ef       	ldi	r23, 0xFF	; 255
 604:	c5 01       	movw	r24, r10
 606:	0e 94 27 04 	call	0x84e	; 0x84e <strnlen_P>
 60a:	4c 01       	movw	r8, r24
 60c:	f3 2d       	mov	r31, r3
 60e:	f0 68       	ori	r31, 0x80	; 128
 610:	3f 2e       	mov	r3, r31
 612:	82 01       	movw	r16, r4
 614:	33 fc       	sbrc	r3, 3
 616:	1b c0       	rjmp	.+54     	; 0x64e <__stack+0x14f>
 618:	82 2d       	mov	r24, r2
 61a:	90 e0       	ldi	r25, 0x00	; 0
 61c:	88 16       	cp	r8, r24
 61e:	99 06       	cpc	r9, r25
 620:	b0 f4       	brcc	.+44     	; 0x64e <__stack+0x14f>
 622:	b6 01       	movw	r22, r12
 624:	80 e2       	ldi	r24, 0x20	; 32
 626:	90 e0       	ldi	r25, 0x00	; 0
 628:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 62c:	2a 94       	dec	r2
 62e:	f4 cf       	rjmp	.-24     	; 0x618 <__stack+0x119>
 630:	f5 01       	movw	r30, r10
 632:	37 fc       	sbrc	r3, 7
 634:	85 91       	lpm	r24, Z+
 636:	37 fe       	sbrs	r3, 7
 638:	81 91       	ld	r24, Z+
 63a:	5f 01       	movw	r10, r30
 63c:	b6 01       	movw	r22, r12
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 644:	21 10       	cpse	r2, r1
 646:	2a 94       	dec	r2
 648:	21 e0       	ldi	r18, 0x01	; 1
 64a:	82 1a       	sub	r8, r18
 64c:	91 08       	sbc	r9, r1
 64e:	81 14       	cp	r8, r1
 650:	91 04       	cpc	r9, r1
 652:	71 f7       	brne	.-36     	; 0x630 <__stack+0x131>
 654:	e8 c0       	rjmp	.+464    	; 0x826 <__stack+0x327>
 656:	84 36       	cpi	r24, 0x64	; 100
 658:	11 f0       	breq	.+4      	; 0x65e <__stack+0x15f>
 65a:	89 36       	cpi	r24, 0x69	; 105
 65c:	41 f5       	brne	.+80     	; 0x6ae <__stack+0x1af>
 65e:	f8 01       	movw	r30, r16
 660:	37 fe       	sbrs	r3, 7
 662:	07 c0       	rjmp	.+14     	; 0x672 <__stack+0x173>
 664:	60 81       	ld	r22, Z
 666:	71 81       	ldd	r23, Z+1	; 0x01
 668:	82 81       	ldd	r24, Z+2	; 0x02
 66a:	93 81       	ldd	r25, Z+3	; 0x03
 66c:	0c 5f       	subi	r16, 0xFC	; 252
 66e:	1f 4f       	sbci	r17, 0xFF	; 255
 670:	08 c0       	rjmp	.+16     	; 0x682 <__stack+0x183>
 672:	60 81       	ld	r22, Z
 674:	71 81       	ldd	r23, Z+1	; 0x01
 676:	07 2e       	mov	r0, r23
 678:	00 0c       	add	r0, r0
 67a:	88 0b       	sbc	r24, r24
 67c:	99 0b       	sbc	r25, r25
 67e:	0e 5f       	subi	r16, 0xFE	; 254
 680:	1f 4f       	sbci	r17, 0xFF	; 255
 682:	f3 2d       	mov	r31, r3
 684:	ff 76       	andi	r31, 0x6F	; 111
 686:	3f 2e       	mov	r3, r31
 688:	97 ff       	sbrs	r25, 7
 68a:	09 c0       	rjmp	.+18     	; 0x69e <__stack+0x19f>
 68c:	90 95       	com	r25
 68e:	80 95       	com	r24
 690:	70 95       	com	r23
 692:	61 95       	neg	r22
 694:	7f 4f       	sbci	r23, 0xFF	; 255
 696:	8f 4f       	sbci	r24, 0xFF	; 255
 698:	9f 4f       	sbci	r25, 0xFF	; 255
 69a:	f0 68       	ori	r31, 0x80	; 128
 69c:	3f 2e       	mov	r3, r31
 69e:	2a e0       	ldi	r18, 0x0A	; 10
 6a0:	30 e0       	ldi	r19, 0x00	; 0
 6a2:	a3 01       	movw	r20, r6
 6a4:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__ultoa_invert>
 6a8:	88 2e       	mov	r8, r24
 6aa:	86 18       	sub	r8, r6
 6ac:	45 c0       	rjmp	.+138    	; 0x738 <__stack+0x239>
 6ae:	85 37       	cpi	r24, 0x75	; 117
 6b0:	31 f4       	brne	.+12     	; 0x6be <__stack+0x1bf>
 6b2:	23 2d       	mov	r18, r3
 6b4:	2f 7e       	andi	r18, 0xEF	; 239
 6b6:	b2 2e       	mov	r11, r18
 6b8:	2a e0       	ldi	r18, 0x0A	; 10
 6ba:	30 e0       	ldi	r19, 0x00	; 0
 6bc:	25 c0       	rjmp	.+74     	; 0x708 <__stack+0x209>
 6be:	93 2d       	mov	r25, r3
 6c0:	99 7f       	andi	r25, 0xF9	; 249
 6c2:	b9 2e       	mov	r11, r25
 6c4:	8f 36       	cpi	r24, 0x6F	; 111
 6c6:	c1 f0       	breq	.+48     	; 0x6f8 <__stack+0x1f9>
 6c8:	18 f4       	brcc	.+6      	; 0x6d0 <__stack+0x1d1>
 6ca:	88 35       	cpi	r24, 0x58	; 88
 6cc:	79 f0       	breq	.+30     	; 0x6ec <__stack+0x1ed>
 6ce:	b5 c0       	rjmp	.+362    	; 0x83a <__stack+0x33b>
 6d0:	80 37       	cpi	r24, 0x70	; 112
 6d2:	19 f0       	breq	.+6      	; 0x6da <__stack+0x1db>
 6d4:	88 37       	cpi	r24, 0x78	; 120
 6d6:	21 f0       	breq	.+8      	; 0x6e0 <__stack+0x1e1>
 6d8:	b0 c0       	rjmp	.+352    	; 0x83a <__stack+0x33b>
 6da:	e9 2f       	mov	r30, r25
 6dc:	e0 61       	ori	r30, 0x10	; 16
 6de:	be 2e       	mov	r11, r30
 6e0:	b4 fe       	sbrs	r11, 4
 6e2:	0d c0       	rjmp	.+26     	; 0x6fe <__stack+0x1ff>
 6e4:	fb 2d       	mov	r31, r11
 6e6:	f4 60       	ori	r31, 0x04	; 4
 6e8:	bf 2e       	mov	r11, r31
 6ea:	09 c0       	rjmp	.+18     	; 0x6fe <__stack+0x1ff>
 6ec:	34 fe       	sbrs	r3, 4
 6ee:	0a c0       	rjmp	.+20     	; 0x704 <__stack+0x205>
 6f0:	29 2f       	mov	r18, r25
 6f2:	26 60       	ori	r18, 0x06	; 6
 6f4:	b2 2e       	mov	r11, r18
 6f6:	06 c0       	rjmp	.+12     	; 0x704 <__stack+0x205>
 6f8:	28 e0       	ldi	r18, 0x08	; 8
 6fa:	30 e0       	ldi	r19, 0x00	; 0
 6fc:	05 c0       	rjmp	.+10     	; 0x708 <__stack+0x209>
 6fe:	20 e1       	ldi	r18, 0x10	; 16
 700:	30 e0       	ldi	r19, 0x00	; 0
 702:	02 c0       	rjmp	.+4      	; 0x708 <__stack+0x209>
 704:	20 e1       	ldi	r18, 0x10	; 16
 706:	32 e0       	ldi	r19, 0x02	; 2
 708:	f8 01       	movw	r30, r16
 70a:	b7 fe       	sbrs	r11, 7
 70c:	07 c0       	rjmp	.+14     	; 0x71c <__stack+0x21d>
 70e:	60 81       	ld	r22, Z
 710:	71 81       	ldd	r23, Z+1	; 0x01
 712:	82 81       	ldd	r24, Z+2	; 0x02
 714:	93 81       	ldd	r25, Z+3	; 0x03
 716:	0c 5f       	subi	r16, 0xFC	; 252
 718:	1f 4f       	sbci	r17, 0xFF	; 255
 71a:	06 c0       	rjmp	.+12     	; 0x728 <__stack+0x229>
 71c:	60 81       	ld	r22, Z
 71e:	71 81       	ldd	r23, Z+1	; 0x01
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	0e 5f       	subi	r16, 0xFE	; 254
 726:	1f 4f       	sbci	r17, 0xFF	; 255
 728:	a3 01       	movw	r20, r6
 72a:	0e 94 79 04 	call	0x8f2	; 0x8f2 <__ultoa_invert>
 72e:	88 2e       	mov	r8, r24
 730:	86 18       	sub	r8, r6
 732:	fb 2d       	mov	r31, r11
 734:	ff 77       	andi	r31, 0x7F	; 127
 736:	3f 2e       	mov	r3, r31
 738:	36 fe       	sbrs	r3, 6
 73a:	0d c0       	rjmp	.+26     	; 0x756 <__stack+0x257>
 73c:	23 2d       	mov	r18, r3
 73e:	2e 7f       	andi	r18, 0xFE	; 254
 740:	a2 2e       	mov	r10, r18
 742:	89 14       	cp	r8, r9
 744:	58 f4       	brcc	.+22     	; 0x75c <__stack+0x25d>
 746:	34 fe       	sbrs	r3, 4
 748:	0b c0       	rjmp	.+22     	; 0x760 <__stack+0x261>
 74a:	32 fc       	sbrc	r3, 2
 74c:	09 c0       	rjmp	.+18     	; 0x760 <__stack+0x261>
 74e:	83 2d       	mov	r24, r3
 750:	8e 7e       	andi	r24, 0xEE	; 238
 752:	a8 2e       	mov	r10, r24
 754:	05 c0       	rjmp	.+10     	; 0x760 <__stack+0x261>
 756:	b8 2c       	mov	r11, r8
 758:	a3 2c       	mov	r10, r3
 75a:	03 c0       	rjmp	.+6      	; 0x762 <__stack+0x263>
 75c:	b8 2c       	mov	r11, r8
 75e:	01 c0       	rjmp	.+2      	; 0x762 <__stack+0x263>
 760:	b9 2c       	mov	r11, r9
 762:	a4 fe       	sbrs	r10, 4
 764:	0f c0       	rjmp	.+30     	; 0x784 <__stack+0x285>
 766:	fe 01       	movw	r30, r28
 768:	e8 0d       	add	r30, r8
 76a:	f1 1d       	adc	r31, r1
 76c:	80 81       	ld	r24, Z
 76e:	80 33       	cpi	r24, 0x30	; 48
 770:	21 f4       	brne	.+8      	; 0x77a <__stack+0x27b>
 772:	9a 2d       	mov	r25, r10
 774:	99 7e       	andi	r25, 0xE9	; 233
 776:	a9 2e       	mov	r10, r25
 778:	09 c0       	rjmp	.+18     	; 0x78c <__stack+0x28d>
 77a:	a2 fe       	sbrs	r10, 2
 77c:	06 c0       	rjmp	.+12     	; 0x78a <__stack+0x28b>
 77e:	b3 94       	inc	r11
 780:	b3 94       	inc	r11
 782:	04 c0       	rjmp	.+8      	; 0x78c <__stack+0x28d>
 784:	8a 2d       	mov	r24, r10
 786:	86 78       	andi	r24, 0x86	; 134
 788:	09 f0       	breq	.+2      	; 0x78c <__stack+0x28d>
 78a:	b3 94       	inc	r11
 78c:	a3 fc       	sbrc	r10, 3
 78e:	11 c0       	rjmp	.+34     	; 0x7b2 <__stack+0x2b3>
 790:	a0 fe       	sbrs	r10, 0
 792:	06 c0       	rjmp	.+12     	; 0x7a0 <__stack+0x2a1>
 794:	b2 14       	cp	r11, r2
 796:	88 f4       	brcc	.+34     	; 0x7ba <__stack+0x2bb>
 798:	28 0c       	add	r2, r8
 79a:	92 2c       	mov	r9, r2
 79c:	9b 18       	sub	r9, r11
 79e:	0e c0       	rjmp	.+28     	; 0x7bc <__stack+0x2bd>
 7a0:	b2 14       	cp	r11, r2
 7a2:	60 f4       	brcc	.+24     	; 0x7bc <__stack+0x2bd>
 7a4:	b6 01       	movw	r22, r12
 7a6:	80 e2       	ldi	r24, 0x20	; 32
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 7ae:	b3 94       	inc	r11
 7b0:	f7 cf       	rjmp	.-18     	; 0x7a0 <__stack+0x2a1>
 7b2:	b2 14       	cp	r11, r2
 7b4:	18 f4       	brcc	.+6      	; 0x7bc <__stack+0x2bd>
 7b6:	2b 18       	sub	r2, r11
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <__stack+0x2bf>
 7ba:	98 2c       	mov	r9, r8
 7bc:	21 2c       	mov	r2, r1
 7be:	a4 fe       	sbrs	r10, 4
 7c0:	10 c0       	rjmp	.+32     	; 0x7e2 <__stack+0x2e3>
 7c2:	b6 01       	movw	r22, r12
 7c4:	80 e3       	ldi	r24, 0x30	; 48
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 7cc:	a2 fe       	sbrs	r10, 2
 7ce:	17 c0       	rjmp	.+46     	; 0x7fe <__stack+0x2ff>
 7d0:	a1 fc       	sbrc	r10, 1
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <__stack+0x2db>
 7d4:	88 e7       	ldi	r24, 0x78	; 120
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <__stack+0x2df>
 7da:	88 e5       	ldi	r24, 0x58	; 88
 7dc:	90 e0       	ldi	r25, 0x00	; 0
 7de:	b6 01       	movw	r22, r12
 7e0:	0c c0       	rjmp	.+24     	; 0x7fa <__stack+0x2fb>
 7e2:	8a 2d       	mov	r24, r10
 7e4:	86 78       	andi	r24, 0x86	; 134
 7e6:	59 f0       	breq	.+22     	; 0x7fe <__stack+0x2ff>
 7e8:	a1 fe       	sbrs	r10, 1
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <__stack+0x2f1>
 7ec:	8b e2       	ldi	r24, 0x2B	; 43
 7ee:	01 c0       	rjmp	.+2      	; 0x7f2 <__stack+0x2f3>
 7f0:	80 e2       	ldi	r24, 0x20	; 32
 7f2:	a7 fc       	sbrc	r10, 7
 7f4:	8d e2       	ldi	r24, 0x2D	; 45
 7f6:	b6 01       	movw	r22, r12
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 7fe:	89 14       	cp	r8, r9
 800:	38 f4       	brcc	.+14     	; 0x810 <__stack+0x311>
 802:	b6 01       	movw	r22, r12
 804:	80 e3       	ldi	r24, 0x30	; 48
 806:	90 e0       	ldi	r25, 0x00	; 0
 808:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 80c:	9a 94       	dec	r9
 80e:	f7 cf       	rjmp	.-18     	; 0x7fe <__stack+0x2ff>
 810:	8a 94       	dec	r8
 812:	f3 01       	movw	r30, r6
 814:	e8 0d       	add	r30, r8
 816:	f1 1d       	adc	r31, r1
 818:	80 81       	ld	r24, Z
 81a:	b6 01       	movw	r22, r12
 81c:	90 e0       	ldi	r25, 0x00	; 0
 81e:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 822:	81 10       	cpse	r8, r1
 824:	f5 cf       	rjmp	.-22     	; 0x810 <__stack+0x311>
 826:	22 20       	and	r2, r2
 828:	09 f4       	brne	.+2      	; 0x82c <__stack+0x32d>
 82a:	42 ce       	rjmp	.-892    	; 0x4b0 <vfprintf+0x24>
 82c:	b6 01       	movw	r22, r12
 82e:	80 e2       	ldi	r24, 0x20	; 32
 830:	90 e0       	ldi	r25, 0x00	; 0
 832:	0e 94 3d 04 	call	0x87a	; 0x87a <fputc>
 836:	2a 94       	dec	r2
 838:	f6 cf       	rjmp	.-20     	; 0x826 <__stack+0x327>
 83a:	f6 01       	movw	r30, r12
 83c:	86 81       	ldd	r24, Z+6	; 0x06
 83e:	97 81       	ldd	r25, Z+7	; 0x07
 840:	02 c0       	rjmp	.+4      	; 0x846 <__stack+0x347>
 842:	8f ef       	ldi	r24, 0xFF	; 255
 844:	9f ef       	ldi	r25, 0xFF	; 255
 846:	2b 96       	adiw	r28, 0x0b	; 11
 848:	e2 e1       	ldi	r30, 0x12	; 18
 84a:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__epilogue_restores__>

0000084e <strnlen_P>:
 84e:	fc 01       	movw	r30, r24
 850:	05 90       	lpm	r0, Z+
 852:	61 50       	subi	r22, 0x01	; 1
 854:	70 40       	sbci	r23, 0x00	; 0
 856:	01 10       	cpse	r0, r1
 858:	d8 f7       	brcc	.-10     	; 0x850 <strnlen_P+0x2>
 85a:	80 95       	com	r24
 85c:	90 95       	com	r25
 85e:	8e 0f       	add	r24, r30
 860:	9f 1f       	adc	r25, r31
 862:	08 95       	ret

00000864 <strnlen>:
 864:	fc 01       	movw	r30, r24
 866:	61 50       	subi	r22, 0x01	; 1
 868:	70 40       	sbci	r23, 0x00	; 0
 86a:	01 90       	ld	r0, Z+
 86c:	01 10       	cpse	r0, r1
 86e:	d8 f7       	brcc	.-10     	; 0x866 <strnlen+0x2>
 870:	80 95       	com	r24
 872:	90 95       	com	r25
 874:	8e 0f       	add	r24, r30
 876:	9f 1f       	adc	r25, r31
 878:	08 95       	ret

0000087a <fputc>:
 87a:	0f 93       	push	r16
 87c:	1f 93       	push	r17
 87e:	cf 93       	push	r28
 880:	df 93       	push	r29
 882:	fb 01       	movw	r30, r22
 884:	23 81       	ldd	r18, Z+3	; 0x03
 886:	21 fd       	sbrc	r18, 1
 888:	03 c0       	rjmp	.+6      	; 0x890 <fputc+0x16>
 88a:	8f ef       	ldi	r24, 0xFF	; 255
 88c:	9f ef       	ldi	r25, 0xFF	; 255
 88e:	2c c0       	rjmp	.+88     	; 0x8e8 <fputc+0x6e>
 890:	22 ff       	sbrs	r18, 2
 892:	16 c0       	rjmp	.+44     	; 0x8c0 <fputc+0x46>
 894:	46 81       	ldd	r20, Z+6	; 0x06
 896:	57 81       	ldd	r21, Z+7	; 0x07
 898:	24 81       	ldd	r18, Z+4	; 0x04
 89a:	35 81       	ldd	r19, Z+5	; 0x05
 89c:	42 17       	cp	r20, r18
 89e:	53 07       	cpc	r21, r19
 8a0:	44 f4       	brge	.+16     	; 0x8b2 <fputc+0x38>
 8a2:	a0 81       	ld	r26, Z
 8a4:	b1 81       	ldd	r27, Z+1	; 0x01
 8a6:	9d 01       	movw	r18, r26
 8a8:	2f 5f       	subi	r18, 0xFF	; 255
 8aa:	3f 4f       	sbci	r19, 0xFF	; 255
 8ac:	31 83       	std	Z+1, r19	; 0x01
 8ae:	20 83       	st	Z, r18
 8b0:	8c 93       	st	X, r24
 8b2:	26 81       	ldd	r18, Z+6	; 0x06
 8b4:	37 81       	ldd	r19, Z+7	; 0x07
 8b6:	2f 5f       	subi	r18, 0xFF	; 255
 8b8:	3f 4f       	sbci	r19, 0xFF	; 255
 8ba:	37 83       	std	Z+7, r19	; 0x07
 8bc:	26 83       	std	Z+6, r18	; 0x06
 8be:	14 c0       	rjmp	.+40     	; 0x8e8 <fputc+0x6e>
 8c0:	8b 01       	movw	r16, r22
 8c2:	ec 01       	movw	r28, r24
 8c4:	fb 01       	movw	r30, r22
 8c6:	00 84       	ldd	r0, Z+8	; 0x08
 8c8:	f1 85       	ldd	r31, Z+9	; 0x09
 8ca:	e0 2d       	mov	r30, r0
 8cc:	09 95       	icall
 8ce:	89 2b       	or	r24, r25
 8d0:	e1 f6       	brne	.-72     	; 0x88a <fputc+0x10>
 8d2:	d8 01       	movw	r26, r16
 8d4:	16 96       	adiw	r26, 0x06	; 6
 8d6:	8d 91       	ld	r24, X+
 8d8:	9c 91       	ld	r25, X
 8da:	17 97       	sbiw	r26, 0x07	; 7
 8dc:	01 96       	adiw	r24, 0x01	; 1
 8de:	17 96       	adiw	r26, 0x07	; 7
 8e0:	9c 93       	st	X, r25
 8e2:	8e 93       	st	-X, r24
 8e4:	16 97       	sbiw	r26, 0x06	; 6
 8e6:	ce 01       	movw	r24, r28
 8e8:	df 91       	pop	r29
 8ea:	cf 91       	pop	r28
 8ec:	1f 91       	pop	r17
 8ee:	0f 91       	pop	r16
 8f0:	08 95       	ret

000008f2 <__ultoa_invert>:
 8f2:	fa 01       	movw	r30, r20
 8f4:	aa 27       	eor	r26, r26
 8f6:	28 30       	cpi	r18, 0x08	; 8
 8f8:	51 f1       	breq	.+84     	; 0x94e <__ultoa_invert+0x5c>
 8fa:	20 31       	cpi	r18, 0x10	; 16
 8fc:	81 f1       	breq	.+96     	; 0x95e <__ultoa_invert+0x6c>
 8fe:	e8 94       	clt
 900:	6f 93       	push	r22
 902:	6e 7f       	andi	r22, 0xFE	; 254
 904:	6e 5f       	subi	r22, 0xFE	; 254
 906:	7f 4f       	sbci	r23, 0xFF	; 255
 908:	8f 4f       	sbci	r24, 0xFF	; 255
 90a:	9f 4f       	sbci	r25, 0xFF	; 255
 90c:	af 4f       	sbci	r26, 0xFF	; 255
 90e:	b1 e0       	ldi	r27, 0x01	; 1
 910:	3e d0       	rcall	.+124    	; 0x98e <__ultoa_invert+0x9c>
 912:	b4 e0       	ldi	r27, 0x04	; 4
 914:	3c d0       	rcall	.+120    	; 0x98e <__ultoa_invert+0x9c>
 916:	67 0f       	add	r22, r23
 918:	78 1f       	adc	r23, r24
 91a:	89 1f       	adc	r24, r25
 91c:	9a 1f       	adc	r25, r26
 91e:	a1 1d       	adc	r26, r1
 920:	68 0f       	add	r22, r24
 922:	79 1f       	adc	r23, r25
 924:	8a 1f       	adc	r24, r26
 926:	91 1d       	adc	r25, r1
 928:	a1 1d       	adc	r26, r1
 92a:	6a 0f       	add	r22, r26
 92c:	71 1d       	adc	r23, r1
 92e:	81 1d       	adc	r24, r1
 930:	91 1d       	adc	r25, r1
 932:	a1 1d       	adc	r26, r1
 934:	20 d0       	rcall	.+64     	; 0x976 <__ultoa_invert+0x84>
 936:	09 f4       	brne	.+2      	; 0x93a <__ultoa_invert+0x48>
 938:	68 94       	set
 93a:	3f 91       	pop	r19
 93c:	2a e0       	ldi	r18, 0x0A	; 10
 93e:	26 9f       	mul	r18, r22
 940:	11 24       	eor	r1, r1
 942:	30 19       	sub	r19, r0
 944:	30 5d       	subi	r19, 0xD0	; 208
 946:	31 93       	st	Z+, r19
 948:	de f6       	brtc	.-74     	; 0x900 <__ultoa_invert+0xe>
 94a:	cf 01       	movw	r24, r30
 94c:	08 95       	ret
 94e:	46 2f       	mov	r20, r22
 950:	47 70       	andi	r20, 0x07	; 7
 952:	40 5d       	subi	r20, 0xD0	; 208
 954:	41 93       	st	Z+, r20
 956:	b3 e0       	ldi	r27, 0x03	; 3
 958:	0f d0       	rcall	.+30     	; 0x978 <__ultoa_invert+0x86>
 95a:	c9 f7       	brne	.-14     	; 0x94e <__ultoa_invert+0x5c>
 95c:	f6 cf       	rjmp	.-20     	; 0x94a <__ultoa_invert+0x58>
 95e:	46 2f       	mov	r20, r22
 960:	4f 70       	andi	r20, 0x0F	; 15
 962:	40 5d       	subi	r20, 0xD0	; 208
 964:	4a 33       	cpi	r20, 0x3A	; 58
 966:	18 f0       	brcs	.+6      	; 0x96e <__ultoa_invert+0x7c>
 968:	49 5d       	subi	r20, 0xD9	; 217
 96a:	31 fd       	sbrc	r19, 1
 96c:	40 52       	subi	r20, 0x20	; 32
 96e:	41 93       	st	Z+, r20
 970:	02 d0       	rcall	.+4      	; 0x976 <__ultoa_invert+0x84>
 972:	a9 f7       	brne	.-22     	; 0x95e <__ultoa_invert+0x6c>
 974:	ea cf       	rjmp	.-44     	; 0x94a <__ultoa_invert+0x58>
 976:	b4 e0       	ldi	r27, 0x04	; 4
 978:	a6 95       	lsr	r26
 97a:	97 95       	ror	r25
 97c:	87 95       	ror	r24
 97e:	77 95       	ror	r23
 980:	67 95       	ror	r22
 982:	ba 95       	dec	r27
 984:	c9 f7       	brne	.-14     	; 0x978 <__ultoa_invert+0x86>
 986:	00 97       	sbiw	r24, 0x00	; 0
 988:	61 05       	cpc	r22, r1
 98a:	71 05       	cpc	r23, r1
 98c:	08 95       	ret
 98e:	9b 01       	movw	r18, r22
 990:	ac 01       	movw	r20, r24
 992:	0a 2e       	mov	r0, r26
 994:	06 94       	lsr	r0
 996:	57 95       	ror	r21
 998:	47 95       	ror	r20
 99a:	37 95       	ror	r19
 99c:	27 95       	ror	r18
 99e:	ba 95       	dec	r27
 9a0:	c9 f7       	brne	.-14     	; 0x994 <__ultoa_invert+0xa2>
 9a2:	62 0f       	add	r22, r18
 9a4:	73 1f       	adc	r23, r19
 9a6:	84 1f       	adc	r24, r20
 9a8:	95 1f       	adc	r25, r21
 9aa:	a0 1d       	adc	r26, r0
 9ac:	08 95       	ret

000009ae <__prologue_saves__>:
 9ae:	2f 92       	push	r2
 9b0:	3f 92       	push	r3
 9b2:	4f 92       	push	r4
 9b4:	5f 92       	push	r5
 9b6:	6f 92       	push	r6
 9b8:	7f 92       	push	r7
 9ba:	8f 92       	push	r8
 9bc:	9f 92       	push	r9
 9be:	af 92       	push	r10
 9c0:	bf 92       	push	r11
 9c2:	cf 92       	push	r12
 9c4:	df 92       	push	r13
 9c6:	ef 92       	push	r14
 9c8:	ff 92       	push	r15
 9ca:	0f 93       	push	r16
 9cc:	1f 93       	push	r17
 9ce:	cf 93       	push	r28
 9d0:	df 93       	push	r29
 9d2:	cd b7       	in	r28, 0x3d	; 61
 9d4:	de b7       	in	r29, 0x3e	; 62
 9d6:	ca 1b       	sub	r28, r26
 9d8:	db 0b       	sbc	r29, r27
 9da:	0f b6       	in	r0, 0x3f	; 63
 9dc:	f8 94       	cli
 9de:	de bf       	out	0x3e, r29	; 62
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	cd bf       	out	0x3d, r28	; 61
 9e4:	09 94       	ijmp

000009e6 <__epilogue_restores__>:
 9e6:	2a 88       	ldd	r2, Y+18	; 0x12
 9e8:	39 88       	ldd	r3, Y+17	; 0x11
 9ea:	48 88       	ldd	r4, Y+16	; 0x10
 9ec:	5f 84       	ldd	r5, Y+15	; 0x0f
 9ee:	6e 84       	ldd	r6, Y+14	; 0x0e
 9f0:	7d 84       	ldd	r7, Y+13	; 0x0d
 9f2:	8c 84       	ldd	r8, Y+12	; 0x0c
 9f4:	9b 84       	ldd	r9, Y+11	; 0x0b
 9f6:	aa 84       	ldd	r10, Y+10	; 0x0a
 9f8:	b9 84       	ldd	r11, Y+9	; 0x09
 9fa:	c8 84       	ldd	r12, Y+8	; 0x08
 9fc:	df 80       	ldd	r13, Y+7	; 0x07
 9fe:	ee 80       	ldd	r14, Y+6	; 0x06
 a00:	fd 80       	ldd	r15, Y+5	; 0x05
 a02:	0c 81       	ldd	r16, Y+4	; 0x04
 a04:	1b 81       	ldd	r17, Y+3	; 0x03
 a06:	aa 81       	ldd	r26, Y+2	; 0x02
 a08:	b9 81       	ldd	r27, Y+1	; 0x01
 a0a:	ce 0f       	add	r28, r30
 a0c:	d1 1d       	adc	r29, r1
 a0e:	0f b6       	in	r0, 0x3f	; 63
 a10:	f8 94       	cli
 a12:	de bf       	out	0x3e, r29	; 62
 a14:	0f be       	out	0x3f, r0	; 63
 a16:	cd bf       	out	0x3d, r28	; 61
 a18:	ed 01       	movw	r28, r26
 a1a:	08 95       	ret

00000a1c <_exit>:
 a1c:	f8 94       	cli

00000a1e <__stop_program>:
 a1e:	ff cf       	rjmp	.-2      	; 0xa1e <__stop_program>
