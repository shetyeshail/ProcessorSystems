
ProcessorLab9Part2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008da  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f9  00000000  00000000  00000b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000282  00000000  00000000  0000132b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000015b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042a  00000000  00000000  00001604  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008f  00000000  00000000  00001a2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001abd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  6c:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <main>:

#include <avr/io.h>


int main(void)
{
  74:	cf 93       	push	r28
  76:	df 93       	push	r29
  78:	cd b7       	in	r28, 0x3d	; 61
  7a:	de b7       	in	r29, 0x3e	; 62
  7c:	28 97       	sbiw	r28, 0x08	; 8
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	f8 94       	cli
  82:	de bf       	out	0x3e, r29	; 62
  84:	0f be       	out	0x3f, r0	; 63
  86:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0xFF;
  88:	8a e2       	ldi	r24, 0x2A	; 42
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
	unsigned char tens = 0;
  92:	1f 82       	std	Y+7, r1	; 0x07
	unsigned char ones = 0;
  94:	18 86       	std	Y+8, r1	; 0x08
	PORTD = tens|ones;
  96:	8b e2       	ldi	r24, 0x2B	; 43
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	3f 81       	ldd	r19, Y+7	; 0x07
  9c:	28 85       	ldd	r18, Y+8	; 0x08
  9e:	23 2b       	or	r18, r19
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	delay();
  a4:	0e 94 8e 00 	call	0x11c	; 0x11c <delay>
	
    /* Replace with your application code */
    while (1) 
    {
		unsigned char tens = 0;
  a8:	19 82       	std	Y+1, r1	; 0x01
		unsigned char ones = 0;
  aa:	1a 82       	std	Y+2, r1	; 0x02
		int tens_counter = 0;
  ac:	1c 82       	std	Y+4, r1	; 0x04
  ae:	1b 82       	std	Y+3, r1	; 0x03
		int ones_counter = 0;
  b0:	1e 82       	std	Y+6, r1	; 0x06
  b2:	1d 82       	std	Y+5, r1	; 0x05
		while (tens_counter > 0)
  b4:	2d c0       	rjmp	.+90     	; 0x110 <main+0x9c>
		{
			while (ones_counter < 9)
			{
				ones++;
  b6:	8a 81       	ldd	r24, Y+2	; 0x02
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	8a 83       	std	Y+2, r24	; 0x02
				ones_counter++;
  bc:	8d 81       	ldd	r24, Y+5	; 0x05
  be:	9e 81       	ldd	r25, Y+6	; 0x06
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	9e 83       	std	Y+6, r25	; 0x06
  c4:	8d 83       	std	Y+5, r24	; 0x05
				PORTD = tens|ones;
  c6:	8b e2       	ldi	r24, 0x2B	; 43
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	39 81       	ldd	r19, Y+1	; 0x01
  cc:	2a 81       	ldd	r18, Y+2	; 0x02
  ce:	23 2b       	or	r18, r19
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
				delay();
  d4:	0e 94 8e 00 	call	0x11c	; 0x11c <delay>
		unsigned char ones = 0;
		int tens_counter = 0;
		int ones_counter = 0;
		while (tens_counter > 0)
		{
			while (ones_counter < 9)
  d8:	8d 81       	ldd	r24, Y+5	; 0x05
  da:	9e 81       	ldd	r25, Y+6	; 0x06
  dc:	09 97       	sbiw	r24, 0x09	; 9
  de:	5c f3       	brlt	.-42     	; 0xb6 <main+0x42>
				ones++;
				ones_counter++;
				PORTD = tens|ones;
				delay();
			}
			ones = 0x0;
  e0:	1a 82       	std	Y+2, r1	; 0x02
			tens = tens+16;
  e2:	89 81       	ldd	r24, Y+1	; 0x01
  e4:	80 5f       	subi	r24, 0xF0	; 240
  e6:	89 83       	std	Y+1, r24	; 0x01
			if(tens==0xA0){
  e8:	89 81       	ldd	r24, Y+1	; 0x01
  ea:	80 3a       	cpi	r24, 0xA0	; 160
  ec:	09 f4       	brne	.+2      	; 0xf0 <main+0x7c>
				tens=0;
  ee:	19 82       	std	Y+1, r1	; 0x01
			}
			PORTD = tens|ones;
  f0:	8b e2       	ldi	r24, 0x2B	; 43
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	39 81       	ldd	r19, Y+1	; 0x01
  f6:	2a 81       	ldd	r18, Y+2	; 0x02
  f8:	23 2b       	or	r18, r19
  fa:	fc 01       	movw	r30, r24
  fc:	20 83       	st	Z, r18
			delay();
  fe:	0e 94 8e 00 	call	0x11c	; 0x11c <delay>
			ones_counter = 0;
 102:	1e 82       	std	Y+6, r1	; 0x06
 104:	1d 82       	std	Y+5, r1	; 0x05
			tens_counter--;
 106:	8b 81       	ldd	r24, Y+3	; 0x03
 108:	9c 81       	ldd	r25, Y+4	; 0x04
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	9c 83       	std	Y+4, r25	; 0x04
 10e:	8b 83       	std	Y+3, r24	; 0x03
    {
		unsigned char tens = 0;
		unsigned char ones = 0;
		int tens_counter = 0;
		int ones_counter = 0;
		while (tens_counter > 0)
 110:	8b 81       	ldd	r24, Y+3	; 0x03
 112:	9c 81       	ldd	r25, Y+4	; 0x04
 114:	18 16       	cp	r1, r24
 116:	19 06       	cpc	r1, r25
 118:	fc f2       	brlt	.-66     	; 0xd8 <main+0x64>
			PORTD = tens|ones;
			delay();
			ones_counter = 0;
			tens_counter--;
		}
    }
 11a:	c6 cf       	rjmp	.-116    	; 0xa8 <main+0x34>

0000011c <delay>:
}

int delay(void){
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	00 d0       	rcall	.+0      	; 0x122 <delay+0x6>
 122:	00 d0       	rcall	.+0      	; 0x124 <delay+0x8>
 124:	cd b7       	in	r28, 0x3d	; 61
 126:	de b7       	in	r29, 0x3e	; 62
	unsigned long n = 0;
 128:	19 82       	std	Y+1, r1	; 0x01
 12a:	1a 82       	std	Y+2, r1	; 0x02
 12c:	1b 82       	std	Y+3, r1	; 0x03
 12e:	1c 82       	std	Y+4, r1	; 0x04
	do{
		n++;
 130:	89 81       	ldd	r24, Y+1	; 0x01
 132:	9a 81       	ldd	r25, Y+2	; 0x02
 134:	ab 81       	ldd	r26, Y+3	; 0x03
 136:	bc 81       	ldd	r27, Y+4	; 0x04
 138:	01 96       	adiw	r24, 0x01	; 1
 13a:	a1 1d       	adc	r26, r1
 13c:	b1 1d       	adc	r27, r1
 13e:	89 83       	std	Y+1, r24	; 0x01
 140:	9a 83       	std	Y+2, r25	; 0x02
 142:	ab 83       	std	Y+3, r26	; 0x03
 144:	bc 83       	std	Y+4, r27	; 0x04
	}while(n<255000);
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	9a 81       	ldd	r25, Y+2	; 0x02
 14a:	ab 81       	ldd	r26, Y+3	; 0x03
 14c:	bc 81       	ldd	r27, Y+4	; 0x04
 14e:	88 31       	cpi	r24, 0x18	; 24
 150:	94 4e       	sbci	r25, 0xE4	; 228
 152:	a3 40       	sbci	r26, 0x03	; 3
 154:	b1 05       	cpc	r27, r1
 156:	60 f3       	brcs	.-40     	; 0x130 <delay+0x14>
 158:	00 00       	nop
 15a:	0f 90       	pop	r0
 15c:	0f 90       	pop	r0
 15e:	0f 90       	pop	r0
 160:	0f 90       	pop	r0
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
