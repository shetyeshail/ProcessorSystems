
test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008bc  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007d2  00000000  00000000  00000ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000270  00000000  00000000  00001292  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  00001504  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ea  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000008f  00000000  00000000  00001942  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000019d1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   8:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
   c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  10:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  14:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  18:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  1c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  20:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  24:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  28:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  2c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  30:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  34:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  38:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  3c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  40:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  44:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  48:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  4c:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  50:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  54:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>
  58:	0c 94 38 00 	jmp	0x70	; 0x70 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61
  68:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  6c:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000070 <__bad_interrupt>:
  70:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000074 <main>:
 * Author : shail
 */ 

#include <avr/io.h>

int main(void){
  74:	cf 93       	push	r28
  76:	df 93       	push	r29
  78:	cd b7       	in	r28, 0x3d	; 61
  7a:	de b7       	in	r29, 0x3e	; 62
  7c:	28 97       	sbiw	r28, 0x08	; 8
  7e:	0f b6       	in	r0, 0x3f	; 63
  80:	f8 94       	cli
  82:	de bf       	out	0x3e, r29	; 62
  84:	0f be       	out	0x3f, r0	; 63
  86:	cd bf       	out	0x3d, r28	; 61

	DDRD = 0xFF; // PORTD output
  88:	8a e2       	ldi	r24, 0x2A	; 42
  8a:	90 e0       	ldi	r25, 0x00	; 0
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	fc 01       	movw	r30, r24
  90:	20 83       	st	Z, r18
	unsigned char x = 0; //Tens place Integer
  92:	1f 82       	std	Y+7, r1	; 0x07
	unsigned char z = 0; //Ones place Integer
  94:	18 86       	std	Y+8, r1	; 0x08
	PORTD = x|z; //Create output
  96:	8b e2       	ldi	r24, 0x2B	; 43
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	3f 81       	ldd	r19, Y+7	; 0x07
  9c:	28 85       	ldd	r18, Y+8	; 0x08
  9e:	23 2b       	or	r18, r19
  a0:	fc 01       	movw	r30, r24
  a2:	20 83       	st	Z, r18
	//delay(); //Call 1 second delay
	
	while(1){
		unsigned char x = 0;
  a4:	19 82       	std	Y+1, r1	; 0x01
		unsigned char z = 0;
  a6:	1a 82       	std	Y+2, r1	; 0x02
		int ii = 10; //Counter for tens place value
  a8:	8a e0       	ldi	r24, 0x0A	; 10
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	9c 83       	std	Y+4, r25	; 0x04
  ae:	8b 83       	std	Y+3, r24	; 0x03
		int i = 0; //Counter for ones place value
  b0:	1e 82       	std	Y+6, r1	; 0x06
  b2:	1d 82       	std	Y+5, r1	; 0x05
		while (ii > 0){
  b4:	29 c0       	rjmp	.+82     	; 0x108 <main+0x94>
			while (i < 9){
				z = z + 1;//Increment ones place by 1
  b6:	8a 81       	ldd	r24, Y+2	; 0x02
  b8:	8f 5f       	subi	r24, 0xFF	; 255
  ba:	8a 83       	std	Y+2, r24	; 0x02
				i++; //Increment counter
  bc:	8d 81       	ldd	r24, Y+5	; 0x05
  be:	9e 81       	ldd	r25, Y+6	; 0x06
  c0:	01 96       	adiw	r24, 0x01	; 1
  c2:	9e 83       	std	Y+6, r25	; 0x06
  c4:	8d 83       	std	Y+5, r24	; 0x05
				PORTD = x|z;//Output binary value
  c6:	8b e2       	ldi	r24, 0x2B	; 43
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	39 81       	ldd	r19, Y+1	; 0x01
  cc:	2a 81       	ldd	r18, Y+2	; 0x02
  ce:	23 2b       	or	r18, r19
  d0:	fc 01       	movw	r30, r24
  d2:	20 83       	st	Z, r18
		unsigned char x = 0;
		unsigned char z = 0;
		int ii = 10; //Counter for tens place value
		int i = 0; //Counter for ones place value
		while (ii > 0){
			while (i < 9){
  d4:	8d 81       	ldd	r24, Y+5	; 0x05
  d6:	9e 81       	ldd	r25, Y+6	; 0x06
  d8:	09 97       	sbiw	r24, 0x09	; 9
  da:	6c f3       	brlt	.-38     	; 0xb6 <main+0x42>
				z = z + 1;//Increment ones place by 1
				i++; //Increment counter
				PORTD = x|z;//Output binary value
				//delay();
			}
			z = 0x0;//If there is a 9 in ones place make 0
  dc:	1a 82       	std	Y+2, r1	; 0x02
			x = x + 16;//Controlling the top 4 bits for tens place
  de:	89 81       	ldd	r24, Y+1	; 0x01
  e0:	80 5f       	subi	r24, 0xF0	; 240
  e2:	89 83       	std	Y+1, r24	; 0x01
			if ( x == 0xa0 ){
  e4:	89 81       	ldd	r24, Y+1	; 0x01
  e6:	80 3a       	cpi	r24, 0xA0	; 160
  e8:	09 f4       	brne	.+2      	; 0xec <main+0x78>
				x = 0;//If tens place is equal to ten, reset to 0
  ea:	19 82       	std	Y+1, r1	; 0x01
			}
			PORTD = x|z;
  ec:	8b e2       	ldi	r24, 0x2B	; 43
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	39 81       	ldd	r19, Y+1	; 0x01
  f2:	2a 81       	ldd	r18, Y+2	; 0x02
  f4:	23 2b       	or	r18, r19
  f6:	fc 01       	movw	r30, r24
  f8:	20 83       	st	Z, r18
			//delay();
			i = 0;//Reset counter after counting to 99
  fa:	1e 82       	std	Y+6, r1	; 0x06
  fc:	1d 82       	std	Y+5, r1	; 0x05
			ii = ii - 1;//Decrement the tens place counter
  fe:	8b 81       	ldd	r24, Y+3	; 0x03
 100:	9c 81       	ldd	r25, Y+4	; 0x04
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	9c 83       	std	Y+4, r25	; 0x04
 106:	8b 83       	std	Y+3, r24	; 0x03
	while(1){
		unsigned char x = 0;
		unsigned char z = 0;
		int ii = 10; //Counter for tens place value
		int i = 0; //Counter for ones place value
		while (ii > 0){
 108:	8b 81       	ldd	r24, Y+3	; 0x03
 10a:	9c 81       	ldd	r25, Y+4	; 0x04
 10c:	18 16       	cp	r1, r24
 10e:	19 06       	cpc	r1, r25
 110:	0c f3       	brlt	.-62     	; 0xd4 <main+0x60>
			//delay();
			i = 0;//Reset counter after counting to 99
			ii = ii - 1;//Decrement the tens place counter

		}
	}
 112:	c8 cf       	rjmp	.-112    	; 0xa4 <main+0x30>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
