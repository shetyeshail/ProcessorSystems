
class_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  0000052e  000005c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000052e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000034  00800110  00800110  000005d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000604  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000644  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba8  00000000  00000000  000006ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008c7  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000524  00000000  00000000  00001b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000198  00000000  00000000  00002040  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000056b  00000000  00000000  000021d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000348  00000000  00000000  00002743  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002a8b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__ctors_end>
   4:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   8:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
   c:	0c 94 4a 02 	jmp	0x494	; 0x494 <__vector_3>
  10:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  14:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  18:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  1c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  20:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  24:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  28:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  2c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  30:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  34:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  38:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  3c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  40:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  44:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  48:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  4c:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  50:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  54:	0c 94 81 00 	jmp	0x102	; 0x102 <__bad_interrupt>
  58:	0c 94 8a 01 	jmp	0x314	; 0x314 <__vector_22>

0000005c <LCD_SegTable>:
  5c:	a8 ea 80 2a 00 40 00 0a 51 0a 08 40 59 55 18 01     ...*.@..Q..@YU..
  6c:	11 1e 11 1b 50 0b 41 1b 41 1f 11 01 51 1f 51 1b     ....P.A.A...Q.Q.
  7c:	00 00 00 00 08 80 00 1a 20 40 00 00 00 00 51 0f     ........ @....Q.
  8c:	91 39 41 14 91 31 41 1e 41 0e 41 1d 50 0f 80 20     .9A..1A.A.A.P.. 
  9c:	10 15 48 86 40 14 78 05 70 85 51 15 51 0e 51 95     ..H.@.x.p.Q.Q.Q.
  ac:	51 8e 21 90 81 20 50 15 48 44 50 c5 28 c0 28 20     Q.!.. P.HDP.(.( 
  bc:	09 50 41 14 20 80 11 11 00 00 00 10                 .PA. .......

000000c8 <__ctors_end>:
  c8:	11 24       	eor	r1, r1
  ca:	1f be       	out	0x3f, r1	; 63
  cc:	cf ef       	ldi	r28, 0xFF	; 255
  ce:	d4 e0       	ldi	r29, 0x04	; 4
  d0:	de bf       	out	0x3e, r29	; 62
  d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
  d4:	11 e0       	ldi	r17, 0x01	; 1
  d6:	a0 e0       	ldi	r26, 0x00	; 0
  d8:	b1 e0       	ldi	r27, 0x01	; 1
  da:	ee e2       	ldi	r30, 0x2E	; 46
  dc:	f5 e0       	ldi	r31, 0x05	; 5
  de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
  e0:	05 90       	lpm	r0, Z+
  e2:	0d 92       	st	X+, r0
  e4:	a0 31       	cpi	r26, 0x10	; 16
  e6:	b1 07       	cpc	r27, r17
  e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
  ea:	21 e0       	ldi	r18, 0x01	; 1
  ec:	a0 e1       	ldi	r26, 0x10	; 16
  ee:	b1 e0       	ldi	r27, 0x01	; 1
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
  f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
  f4:	a4 34       	cpi	r26, 0x44	; 68
  f6:	b2 07       	cpc	r27, r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
  fa:	0e 94 27 02 	call	0x44e	; 0x44e <main>
  fe:	0c 94 95 02 	jmp	0x52a	; 0x52a <_exit>

00000102 <__bad_interrupt>:
 102:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000106 <LCD_Init>:
{ 
   uint8_t StrBuff[LCD_TEXTBUFFER_SIZE]; 

   strcpy_P(StrBuff, FlashData); 
   LCD_puts(StrBuff); 
} 
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	87 ee       	ldi	r24, 0xE7	; 231
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	2f e0       	ldi	r18, 0x0F	; 15
 114:	fc 01       	movw	r30, r24
 116:	20 83       	st	Z, r18
 118:	85 ee       	ldi	r24, 0xE5	; 229
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	27 eb       	ldi	r18, 0xB7	; 183
 11e:	fc 01       	movw	r30, r24
 120:	20 83       	st	Z, r18
 122:	86 ee       	ldi	r24, 0xE6	; 230
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	27 e0       	ldi	r18, 0x07	; 7
 128:	fc 01       	movw	r30, r24
 12a:	20 83       	st	Z, r18
 12c:	84 ee       	ldi	r24, 0xE4	; 228
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	20 ec       	ldi	r18, 0xC0	; 192
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
 136:	84 ee       	ldi	r24, 0xE4	; 228
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	24 ee       	ldi	r18, 0xE4	; 228
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	f9 01       	movw	r30, r18
 140:	20 81       	ld	r18, Z
 142:	28 60       	ori	r18, 0x08	; 8
 144:	fc 01       	movw	r30, r24
 146:	20 83       	st	Z, r18
 148:	00 00       	nop
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <LCD_puts>:

void LCD_puts(uint8_t *Data) 
{ 
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	00 d0       	rcall	.+0      	; 0x156 <LCD_puts+0x6>
 156:	00 d0       	rcall	.+0      	; 0x158 <LCD_puts+0x8>
 158:	1f 92       	push	r1
 15a:	cd b7       	in	r28, 0x3d	; 61
 15c:	de b7       	in	r29, 0x3e	; 62
 15e:	9d 83       	std	Y+5, r25	; 0x05
 160:	8c 83       	std	Y+4, r24	; 0x04
   uint8_t LoadB; 
    
   for (LoadB = 0; LoadB < 20; LoadB++) 
 162:	19 82       	std	Y+1, r1	; 0x01
 164:	2d c0       	rjmp	.+90     	; 0x1c0 <LCD_puts+0x70>
   { 
      uint8_t CByte = *(Data++); 
 166:	8c 81       	ldd	r24, Y+4	; 0x04
 168:	9d 81       	ldd	r25, Y+5	; 0x05
 16a:	9c 01       	movw	r18, r24
 16c:	2f 5f       	subi	r18, 0xFF	; 255
 16e:	3f 4f       	sbci	r19, 0xFF	; 255
 170:	3d 83       	std	Y+5, r19	; 0x05
 172:	2c 83       	std	Y+4, r18	; 0x04
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	8b 83       	std	Y+3, r24	; 0x03
    
      if ((CByte >= '*') && (CByte <= 'z')) 
 17a:	8b 81       	ldd	r24, Y+3	; 0x03
 17c:	8a 32       	cpi	r24, 0x2A	; 42
 17e:	90 f0       	brcs	.+36     	; 0x1a4 <LCD_puts+0x54>
 180:	8b 81       	ldd	r24, Y+3	; 0x03
 182:	8b 37       	cpi	r24, 0x7B	; 123
 184:	78 f4       	brcc	.+30     	; 0x1a4 <LCD_puts+0x54>
        TextBuffer[LoadB] = ((CByte == ' ')? 0xFF : (CByte - '*')); 
 186:	89 81       	ldd	r24, Y+1	; 0x01
 188:	88 2f       	mov	r24, r24
 18a:	90 e0       	ldi	r25, 0x00	; 0
 18c:	2b 81       	ldd	r18, Y+3	; 0x03
 18e:	20 32       	cpi	r18, 0x20	; 32
 190:	19 f0       	breq	.+6      	; 0x198 <LCD_puts+0x48>
 192:	2b 81       	ldd	r18, Y+3	; 0x03
 194:	2a 52       	subi	r18, 0x2A	; 42
 196:	01 c0       	rjmp	.+2      	; 0x19a <LCD_puts+0x4a>
 198:	2f ef       	ldi	r18, 0xFF	; 255
 19a:	8d 5e       	subi	r24, 0xED	; 237
 19c:	9e 4f       	sbci	r25, 0xFE	; 254
 19e:	fc 01       	movw	r30, r24
 1a0:	20 83       	st	Z, r18
 1a2:	0b c0       	rjmp	.+22     	; 0x1ba <LCD_puts+0x6a>
      else if (CByte == 0x00) 
 1a4:	8b 81       	ldd	r24, Y+3	; 0x03
 1a6:	88 23       	and	r24, r24
 1a8:	79 f0       	breq	.+30     	; 0x1c8 <LCD_puts+0x78>
        break; 
      else 
        TextBuffer[LoadB] = 0xFF;        
 1aa:	89 81       	ldd	r24, Y+1	; 0x01
 1ac:	88 2f       	mov	r24, r24
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	8d 5e       	subi	r24, 0xED	; 237
 1b2:	9e 4f       	sbci	r25, 0xFE	; 254
 1b4:	2f ef       	ldi	r18, 0xFF	; 255
 1b6:	fc 01       	movw	r30, r24
 1b8:	20 83       	st	Z, r18

void LCD_puts(uint8_t *Data) 
{ 
   uint8_t LoadB; 
    
   for (LoadB = 0; LoadB < 20; LoadB++) 
 1ba:	89 81       	ldd	r24, Y+1	; 0x01
 1bc:	8f 5f       	subi	r24, 0xFF	; 255
 1be:	89 83       	std	Y+1, r24	; 0x01
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	84 31       	cpi	r24, 0x14	; 20
 1c4:	80 f2       	brcs	.-96     	; 0x166 <LCD_puts+0x16>
 1c6:	01 c0       	rjmp	.+2      	; 0x1ca <LCD_puts+0x7a>
      uint8_t CByte = *(Data++); 
    
      if ((CByte >= '*') && (CByte <= 'z')) 
        TextBuffer[LoadB] = ((CByte == ' ')? 0xFF : (CByte - '*')); 
      else if (CByte == 0x00) 
        break; 
 1c8:	00 00       	nop
      else 
        TextBuffer[LoadB] = 0xFF;        
   } 

   ScrollMode  = ((LoadB > 6)? TRUE : FALSE); 
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	99 81       	ldd	r25, Y+1	; 0x01
 1ce:	97 30       	cpi	r25, 0x07	; 7
 1d0:	08 f4       	brcc	.+2      	; 0x1d4 <LCD_puts+0x84>
 1d2:	80 e0       	ldi	r24, 0x00	; 0
 1d4:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <ScrollMode>
   ScrollCount = LCD_DELAYCOUNT_DEFAULT; 
 1d8:	8a e0       	ldi	r24, 0x0A	; 10
 1da:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ScrollCount>

   for (uint8_t Nulls = 0; Nulls < 7; Nulls++) 
 1de:	1a 82       	std	Y+2, r1	; 0x02
 1e0:	0e c0       	rjmp	.+28     	; 0x1fe <LCD_puts+0xae>
      TextBuffer[LoadB++] = 0xFF; 
 1e2:	89 81       	ldd	r24, Y+1	; 0x01
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	98 0f       	add	r25, r24
 1e8:	99 83       	std	Y+1, r25	; 0x01
 1ea:	88 2f       	mov	r24, r24
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	8d 5e       	subi	r24, 0xED	; 237
 1f0:	9e 4f       	sbci	r25, 0xFE	; 254
 1f2:	2f ef       	ldi	r18, 0xFF	; 255
 1f4:	fc 01       	movw	r30, r24
 1f6:	20 83       	st	Z, r18
   } 

   ScrollMode  = ((LoadB > 6)? TRUE : FALSE); 
   ScrollCount = LCD_DELAYCOUNT_DEFAULT; 

   for (uint8_t Nulls = 0; Nulls < 7; Nulls++) 
 1f8:	8a 81       	ldd	r24, Y+2	; 0x02
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	8a 83       	std	Y+2, r24	; 0x02
 1fe:	8a 81       	ldd	r24, Y+2	; 0x02
 200:	87 30       	cpi	r24, 0x07	; 7
 202:	78 f3       	brcs	.-34     	; 0x1e2 <LCD_puts+0x92>
      TextBuffer[LoadB++] = 0xFF; 
    
   TextBuffer[LoadB] = 0x00; 
 204:	89 81       	ldd	r24, Y+1	; 0x01
 206:	88 2f       	mov	r24, r24
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	8d 5e       	subi	r24, 0xED	; 237
 20c:	9e 4f       	sbci	r25, 0xFE	; 254
 20e:	fc 01       	movw	r30, r24
 210:	10 82       	st	Z, r1
   StrStart   = 0; 
 212:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <StrStart>
   StrEnd     = LoadB;    
 216:	89 81       	ldd	r24, Y+1	; 0x01
 218:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>

   UpdateLCD  = TRUE; 
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <UpdateLCD>
} 
 222:	00 00       	nop
 224:	0f 90       	pop	r0
 226:	0f 90       	pop	r0
 228:	0f 90       	pop	r0
 22a:	0f 90       	pop	r0
 22c:	0f 90       	pop	r0
 22e:	df 91       	pop	r29
 230:	cf 91       	pop	r28
 232:	08 95       	ret

00000234 <LCD_WriteChar>:

void LCD_WriteChar(uint8_t Byte, uint8_t Digit) 
{ 
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	cd b7       	in	r28, 0x3d	; 61
 23a:	de b7       	in	r29, 0x3e	; 62
 23c:	2d 97       	sbiw	r28, 0x0d	; 13
 23e:	0f b6       	in	r0, 0x3f	; 63
 240:	f8 94       	cli
 242:	de bf       	out	0x3e, r29	; 62
 244:	0f be       	out	0x3f, r0	; 63
 246:	cd bf       	out	0x3d, r28	; 61
 248:	8c 87       	std	Y+12, r24	; 0x0c
 24a:	6d 87       	std	Y+13, r22	; 0x0d
   uint16_t SegData  = 0x00; 
 24c:	1a 82       	std	Y+2, r1	; 0x02
 24e:	19 82       	std	Y+1, r1	; 0x01
   uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1)); 
 250:	8d 85       	ldd	r24, Y+13	; 0x0d
 252:	86 95       	lsr	r24
 254:	88 2f       	mov	r24, r24
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	81 5d       	subi	r24, 0xD1	; 209
 25a:	9e 4f       	sbci	r25, 0xFE	; 254
 25c:	9c 83       	std	Y+4, r25	; 0x04
 25e:	8b 83       	std	Y+3, r24	; 0x03

   if (Byte != 0xFF) 
 260:	8c 85       	ldd	r24, Y+12	; 0x0c
 262:	8f 3f       	cpi	r24, 0xFF	; 255
 264:	b9 f0       	breq	.+46     	; 0x294 <LCD_WriteChar+0x60>
     SegData = pgm_read_word(&LCD_SegTable[Byte]);    
 266:	8c 85       	ldd	r24, Y+12	; 0x0c
 268:	88 2f       	mov	r24, r24
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	84 5a       	subi	r24, 0xA4	; 164
 272:	9f 4f       	sbci	r25, 0xFF	; 255
 274:	99 87       	std	Y+9, r25	; 0x09
 276:	88 87       	std	Y+8, r24	; 0x08
 278:	88 85       	ldd	r24, Y+8	; 0x08
 27a:	99 85       	ldd	r25, Y+9	; 0x09
 27c:	fc 01       	movw	r30, r24
 27e:	25 91       	lpm	r18, Z+
 280:	34 91       	lpm	r19, Z
 282:	cf 01       	movw	r24, r30
 284:	3b 87       	std	Y+11, r19	; 0x0b
 286:	2a 87       	std	Y+10, r18	; 0x0a
 288:	99 87       	std	Y+9, r25	; 0x09
 28a:	88 87       	std	Y+8, r24	; 0x08
 28c:	8a 85       	ldd	r24, Y+10	; 0x0a
 28e:	9b 85       	ldd	r25, Y+11	; 0x0b
 290:	9a 83       	std	Y+2, r25	; 0x02
 292:	89 83       	std	Y+1, r24	; 0x01

   for (uint8_t BNib = 0; BNib < 4; BNib++) 
 294:	1d 82       	std	Y+5, r1	; 0x05
 296:	31 c0       	rjmp	.+98     	; 0x2fa <LCD_WriteChar+0xc6>
   { 
      uint8_t Mask          = 0xF0; 
 298:	80 ef       	ldi	r24, 0xF0	; 240
 29a:	8e 83       	std	Y+6, r24	; 0x06
      uint8_t MaskedSegData = (SegData & 0x0000F); 
 29c:	89 81       	ldd	r24, Y+1	; 0x01
 29e:	8f 70       	andi	r24, 0x0F	; 15
 2a0:	8f 83       	std	Y+7, r24	; 0x07
    
      if (Digit & 0x01) 
 2a2:	8d 85       	ldd	r24, Y+13	; 0x0d
 2a4:	88 2f       	mov	r24, r24
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	81 70       	andi	r24, 0x01	; 1
 2aa:	99 27       	eor	r25, r25
 2ac:	89 2b       	or	r24, r25
 2ae:	31 f0       	breq	.+12     	; 0x2bc <LCD_WriteChar+0x88>
      { 
         Mask = 0x0F; 
 2b0:	8f e0       	ldi	r24, 0x0F	; 15
 2b2:	8e 83       	std	Y+6, r24	; 0x06
         MaskedSegData <<= 4; 
 2b4:	8f 81       	ldd	r24, Y+7	; 0x07
 2b6:	82 95       	swap	r24
 2b8:	80 7f       	andi	r24, 0xF0	; 240
 2ba:	8f 83       	std	Y+7, r24	; 0x07
      } 
        
      *BuffPtr = ((*BuffPtr & Mask) | MaskedSegData); 
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	9c 81       	ldd	r25, Y+4	; 0x04
 2c0:	fc 01       	movw	r30, r24
 2c2:	90 81       	ld	r25, Z
 2c4:	8e 81       	ldd	r24, Y+6	; 0x06
 2c6:	98 23       	and	r25, r24
 2c8:	8f 81       	ldd	r24, Y+7	; 0x07
 2ca:	29 2f       	mov	r18, r25
 2cc:	28 2b       	or	r18, r24
 2ce:	8b 81       	ldd	r24, Y+3	; 0x03
 2d0:	9c 81       	ldd	r25, Y+4	; 0x04
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18

      SegData >>= 4; 
 2d6:	89 81       	ldd	r24, Y+1	; 0x01
 2d8:	9a 81       	ldd	r25, Y+2	; 0x02
 2da:	92 95       	swap	r25
 2dc:	82 95       	swap	r24
 2de:	8f 70       	andi	r24, 0x0F	; 15
 2e0:	89 27       	eor	r24, r25
 2e2:	9f 70       	andi	r25, 0x0F	; 15
 2e4:	89 27       	eor	r24, r25
 2e6:	9a 83       	std	Y+2, r25	; 0x02
 2e8:	89 83       	std	Y+1, r24	; 0x01
      BuffPtr  += 5; 
 2ea:	8b 81       	ldd	r24, Y+3	; 0x03
 2ec:	9c 81       	ldd	r25, Y+4	; 0x04
 2ee:	05 96       	adiw	r24, 0x05	; 5
 2f0:	9c 83       	std	Y+4, r25	; 0x04
 2f2:	8b 83       	std	Y+3, r24	; 0x03
   uint8_t  *BuffPtr = (&SegBuffer[0] + (Digit >> 1)); 

   if (Byte != 0xFF) 
     SegData = pgm_read_word(&LCD_SegTable[Byte]);    

   for (uint8_t BNib = 0; BNib < 4; BNib++) 
 2f4:	8d 81       	ldd	r24, Y+5	; 0x05
 2f6:	8f 5f       	subi	r24, 0xFF	; 255
 2f8:	8d 83       	std	Y+5, r24	; 0x05
 2fa:	8d 81       	ldd	r24, Y+5	; 0x05
 2fc:	84 30       	cpi	r24, 0x04	; 4
 2fe:	60 f2       	brcs	.-104    	; 0x298 <LCD_WriteChar+0x64>
      *BuffPtr = ((*BuffPtr & Mask) | MaskedSegData); 

      SegData >>= 4; 
      BuffPtr  += 5; 
   } 
} 
 300:	00 00       	nop
 302:	2d 96       	adiw	r28, 0x0d	; 13
 304:	0f b6       	in	r0, 0x3f	; 63
 306:	f8 94       	cli
 308:	de bf       	out	0x3e, r29	; 62
 30a:	0f be       	out	0x3f, r0	; 63
 30c:	cd bf       	out	0x3d, r28	; 61
 30e:	df 91       	pop	r29
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <__vector_22>:

ISR(LCD_vect) 
{ 
 314:	1f 92       	push	r1
 316:	0f 92       	push	r0
 318:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 31c:	0f 92       	push	r0
 31e:	11 24       	eor	r1, r1
 320:	2f 93       	push	r18
 322:	3f 93       	push	r19
 324:	4f 93       	push	r20
 326:	5f 93       	push	r21
 328:	6f 93       	push	r22
 32a:	7f 93       	push	r23
 32c:	8f 93       	push	r24
 32e:	9f 93       	push	r25
 330:	af 93       	push	r26
 332:	bf 93       	push	r27
 334:	ef 93       	push	r30
 336:	ff 93       	push	r31
 338:	cf 93       	push	r28
 33a:	df 93       	push	r29
 33c:	00 d0       	rcall	.+0      	; 0x33e <__vector_22+0x2a>
 33e:	1f 92       	push	r1
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
   if (ScrollMode) 
 344:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <ScrollMode>
 348:	88 23       	and	r24, r24
 34a:	69 f0       	breq	.+26     	; 0x366 <__vector_22+0x52>
   { 
      if (!(ScrollCount)) 
 34c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ScrollCount>
 350:	88 23       	and	r24, r24
 352:	21 f4       	brne	.+8      	; 0x35c <__vector_22+0x48>
        UpdateLCD = TRUE; 
 354:	81 e0       	ldi	r24, 0x01	; 1
 356:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <UpdateLCD>
 35a:	05 c0       	rjmp	.+10     	; 0x366 <__vector_22+0x52>
      else 
        ScrollCount--; 
 35c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <ScrollCount>
 360:	81 50       	subi	r24, 0x01	; 1
 362:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ScrollCount>
   } 

   if (UpdateLCD) 
 366:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <UpdateLCD>
 36a:	88 23       	and	r24, r24
 36c:	09 f4       	brne	.+2      	; 0x370 <__vector_22+0x5c>
 36e:	41 c0       	rjmp	.+130    	; 0x3f2 <__vector_22+0xde>
   { 
      for (uint8_t Character = 0; Character < 6; Character++)
 370:	19 82       	std	Y+1, r1	; 0x01
 372:	2a c0       	rjmp	.+84     	; 0x3c8 <__vector_22+0xb4>
      { 
         uint8_t Byte = (StrStart + Character); 
 374:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <StrStart>
 378:	89 81       	ldd	r24, Y+1	; 0x01
 37a:	89 0f       	add	r24, r25
 37c:	8a 83       	std	Y+2, r24	; 0x02

         if (Byte >= StrEnd) 
 37e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 382:	9a 81       	ldd	r25, Y+2	; 0x02
 384:	98 17       	cp	r25, r24
 386:	88 f0       	brcs	.+34     	; 0x3aa <__vector_22+0x96>
           Byte = TextBuffer[Byte - StrEnd]; 
 388:	8a 81       	ldd	r24, Y+2	; 0x02
 38a:	28 2f       	mov	r18, r24
 38c:	30 e0       	ldi	r19, 0x00	; 0
 38e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 392:	88 2f       	mov	r24, r24
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	a9 01       	movw	r20, r18
 398:	48 1b       	sub	r20, r24
 39a:	59 0b       	sbc	r21, r25
 39c:	ca 01       	movw	r24, r20
 39e:	8d 5e       	subi	r24, 0xED	; 237
 3a0:	9e 4f       	sbci	r25, 0xFE	; 254
 3a2:	fc 01       	movw	r30, r24
 3a4:	80 81       	ld	r24, Z
 3a6:	8a 83       	std	Y+2, r24	; 0x02
 3a8:	08 c0       	rjmp	.+16     	; 0x3ba <__vector_22+0xa6>
         else 
           Byte = TextBuffer[Byte]; 
 3aa:	8a 81       	ldd	r24, Y+2	; 0x02
 3ac:	88 2f       	mov	r24, r24
 3ae:	90 e0       	ldi	r25, 0x00	; 0
 3b0:	8d 5e       	subi	r24, 0xED	; 237
 3b2:	9e 4f       	sbci	r25, 0xFE	; 254
 3b4:	fc 01       	movw	r30, r24
 3b6:	80 81       	ld	r24, Z
 3b8:	8a 83       	std	Y+2, r24	; 0x02
          
         LCD_WriteChar(Byte, Character); 
 3ba:	69 81       	ldd	r22, Y+1	; 0x01
 3bc:	8a 81       	ldd	r24, Y+2	; 0x02
 3be:	0e 94 1a 01 	call	0x234	; 0x234 <LCD_WriteChar>
        ScrollCount--; 
   } 

   if (UpdateLCD) 
   { 
      for (uint8_t Character = 0; Character < 6; Character++)
 3c2:	89 81       	ldd	r24, Y+1	; 0x01
 3c4:	8f 5f       	subi	r24, 0xFF	; 255
 3c6:	89 83       	std	Y+1, r24	; 0x01
 3c8:	89 81       	ldd	r24, Y+1	; 0x01
 3ca:	86 30       	cpi	r24, 0x06	; 6
 3cc:	98 f2       	brcs	.-90     	; 0x374 <__vector_22+0x60>
           Byte = TextBuffer[Byte]; 
          
         LCD_WriteChar(Byte, Character); 
      } 
        
      if (StrStart++ == StrEnd) 
 3ce:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <StrStart>
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	98 0f       	add	r25, r24
 3d6:	90 93 12 01 	sts	0x0112, r25	; 0x800112 <StrStart>
 3da:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <__data_end>
 3de:	89 17       	cp	r24, r25
 3e0:	19 f4       	brne	.+6      	; 0x3e8 <__vector_22+0xd4>
        StrStart = 1; 
 3e2:	81 e0       	ldi	r24, 0x01	; 1
 3e4:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <StrStart>
        
      ScrollCount = LCD_SCROLLCOUNT_DEFAULT; 
 3e8:	83 e0       	ldi	r24, 0x03	; 3
 3ea:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <ScrollCount>
      UpdateLCD = FALSE; 
 3ee:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <UpdateLCD>
   } 

   for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++) 
 3f2:	1b 82       	std	Y+3, r1	; 0x03
 3f4:	11 c0       	rjmp	.+34     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     *(pLCDREG + LCDChar) = SegBuffer[LCDChar]; 
 3f6:	8b 81       	ldd	r24, Y+3	; 0x03
 3f8:	88 2f       	mov	r24, r24
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	84 51       	subi	r24, 0x14	; 20
 3fe:	9f 4f       	sbci	r25, 0xFF	; 255
 400:	2b 81       	ldd	r18, Y+3	; 0x03
 402:	22 2f       	mov	r18, r18
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	21 5d       	subi	r18, 0xD1	; 209
 408:	3e 4f       	sbci	r19, 0xFE	; 254
 40a:	f9 01       	movw	r30, r18
 40c:	20 81       	ld	r18, Z
 40e:	fc 01       	movw	r30, r24
 410:	20 83       	st	Z, r18
        
      ScrollCount = LCD_SCROLLCOUNT_DEFAULT; 
      UpdateLCD = FALSE; 
   } 

   for (uint8_t LCDChar = 0; LCDChar < LCD_SEGBUFFER_SIZE; LCDChar++) 
 412:	8b 81       	ldd	r24, Y+3	; 0x03
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	8b 83       	std	Y+3, r24	; 0x03
 418:	8b 81       	ldd	r24, Y+3	; 0x03
 41a:	84 31       	cpi	r24, 0x14	; 20
 41c:	60 f3       	brcs	.-40     	; 0x3f6 <__vector_22+0xe2>
     *(pLCDREG + LCDChar) = SegBuffer[LCDChar]; 
 41e:	00 00       	nop
 420:	0f 90       	pop	r0
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	ff 91       	pop	r31
 42c:	ef 91       	pop	r30
 42e:	bf 91       	pop	r27
 430:	af 91       	pop	r26
 432:	9f 91       	pop	r25
 434:	8f 91       	pop	r24
 436:	7f 91       	pop	r23
 438:	6f 91       	pop	r22
 43a:	5f 91       	pop	r21
 43c:	4f 91       	pop	r20
 43e:	3f 91       	pop	r19
 440:	2f 91       	pop	r18
 442:	0f 90       	pop	r0
 444:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 448:	0f 90       	pop	r0
 44a:	1f 90       	pop	r1
 44c:	18 95       	reti

0000044e <main>:
 */ 
#include <avr/io.h>
#include <avr/interrupt.h>
#include "LCD_driver.h"
int main(void)
{
 44e:	cf 93       	push	r28
 450:	df 93       	push	r29
 452:	cd b7       	in	r28, 0x3d	; 61
 454:	de b7       	in	r29, 0x3e	; 62
// three buttons of joystick pins with pullup resistors
PORTB |= (1<<4)|(1<<7)|(1<<6);
 456:	85 e2       	ldi	r24, 0x25	; 37
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	25 e2       	ldi	r18, 0x25	; 37
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	f9 01       	movw	r30, r18
 460:	20 81       	ld	r18, Z
 462:	20 6d       	ori	r18, 0xD0	; 208
 464:	fc 01       	movw	r30, r24
 466:	20 83       	st	Z, r18
LCD_Init();// initialize the LCD
 468:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Init>
// enable interrupts
PCMSK1 |= (1<<PINB4)|(1<<PINB7)|(1<<PINB6);
 46c:	8c e6       	ldi	r24, 0x6C	; 108
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	2c e6       	ldi	r18, 0x6C	; 108
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	f9 01       	movw	r30, r18
 476:	20 81       	ld	r18, Z
 478:	20 6d       	ori	r18, 0xD0	; 208
 47a:	fc 01       	movw	r30, r24
 47c:	20 83       	st	Z, r18
EIMSK |= (1<<PCIE1);
 47e:	8d e3       	ldi	r24, 0x3D	; 61
 480:	90 e0       	ldi	r25, 0x00	; 0
 482:	2d e3       	ldi	r18, 0x3D	; 61
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	f9 01       	movw	r30, r18
 488:	20 81       	ld	r18, Z
 48a:	20 68       	ori	r18, 0x80	; 128
 48c:	fc 01       	movw	r30, r24
 48e:	20 83       	st	Z, r18
sei();// enable global interrupt
 490:	78 94       	sei

while(1)
{
// wait until interrupt
}
 492:	ff cf       	rjmp	.-2      	; 0x492 <main+0x44>

00000494 <__vector_3>:





ISR(PCINT1_vect,ISR_BLOCK) {
 494:	1f 92       	push	r1
 496:	0f 92       	push	r0
 498:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 49c:	0f 92       	push	r0
 49e:	11 24       	eor	r1, r1
 4a0:	2f 93       	push	r18
 4a2:	3f 93       	push	r19
 4a4:	4f 93       	push	r20
 4a6:	5f 93       	push	r21
 4a8:	6f 93       	push	r22
 4aa:	7f 93       	push	r23
 4ac:	8f 93       	push	r24
 4ae:	9f 93       	push	r25
 4b0:	af 93       	push	r26
 4b2:	bf 93       	push	r27
 4b4:	ef 93       	push	r30
 4b6:	ff 93       	push	r31
 4b8:	cf 93       	push	r28
 4ba:	df 93       	push	r29
 4bc:	1f 92       	push	r1
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
	char joystick;// joystick port
	unsigned char temp;
	joystick = ~PINB & ((1<<4)|(1<<7)|(1<<6));// read the port and mask it
 4c2:	83 e2       	ldi	r24, 0x23	; 35
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	fc 01       	movw	r30, r24
 4c8:	80 81       	ld	r24, Z
 4ca:	80 95       	com	r24
 4cc:	80 7d       	andi	r24, 0xD0	; 208
 4ce:	89 83       	std	Y+1, r24	; 0x01

	if (joystick == (1<<4)) {// if center pressed toggle flag
 4d0:	89 81       	ldd	r24, Y+1	; 0x01
 4d2:	80 31       	cpi	r24, 0x10	; 16
 4d4:	29 f4       	brne	.+10     	; 0x4e0 <__vector_3+0x4c>
		LCD_puts("CENTER");
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	91 e0       	ldi	r25, 0x01	; 1
 4da:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_puts>
		return;// and return
 4de:	10 c0       	rjmp	.+32     	; 0x500 <__stack+0x1>
	}
	if (joystick == (1<<7)) {// if DOWN pressed toggle flag
 4e0:	89 81       	ldd	r24, Y+1	; 0x01
 4e2:	80 38       	cpi	r24, 0x80	; 128
 4e4:	29 f4       	brne	.+10     	; 0x4f0 <__vector_3+0x5c>
		LCD_puts("DOWN");
 4e6:	87 e0       	ldi	r24, 0x07	; 7
 4e8:	91 e0       	ldi	r25, 0x01	; 1
 4ea:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_puts>
		return;// and return
 4ee:	08 c0       	rjmp	.+16     	; 0x500 <__stack+0x1>
	}
	if (joystick == (1<<6)) {// if UP pressed toggle flag
 4f0:	89 81       	ldd	r24, Y+1	; 0x01
 4f2:	80 34       	cpi	r24, 0x40	; 64
 4f4:	29 f4       	brne	.+10     	; 0x500 <__stack+0x1>
		LCD_puts("UP");
 4f6:	8c e0       	ldi	r24, 0x0C	; 12
 4f8:	91 e0       	ldi	r25, 0x01	; 1
 4fa:	0e 94 a8 00 	call	0x150	; 0x150 <LCD_puts>
		return;// and return
 4fe:	00 00       	nop
	}

	if (joystick == 0) return;// if nothing pressed, return doing nothing
}
 500:	0f 90       	pop	r0
 502:	df 91       	pop	r29
 504:	cf 91       	pop	r28
 506:	ff 91       	pop	r31
 508:	ef 91       	pop	r30
 50a:	bf 91       	pop	r27
 50c:	af 91       	pop	r26
 50e:	9f 91       	pop	r25
 510:	8f 91       	pop	r24
 512:	7f 91       	pop	r23
 514:	6f 91       	pop	r22
 516:	5f 91       	pop	r21
 518:	4f 91       	pop	r20
 51a:	3f 91       	pop	r19
 51c:	2f 91       	pop	r18
 51e:	0f 90       	pop	r0
 520:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
 524:	0f 90       	pop	r0
 526:	1f 90       	pop	r1
 528:	18 95       	reti

0000052a <_exit>:
 52a:	f8 94       	cli

0000052c <__stop_program>:
 52c:	ff cf       	rjmp	.-2      	; 0x52c <__stop_program>
