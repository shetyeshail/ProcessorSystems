
ProcessorLab9.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000108  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000018a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000088b  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007df  00000000  00000000  00000aa7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000214  00000000  00000000  00001286  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000149c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000408  00000000  00000000  000014d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005b  00000000  00000000  000018d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
   4:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   8:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
   c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  10:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  14:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  18:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  1c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  20:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  24:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  28:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  2c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  30:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  34:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  38:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  3c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  40:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  44:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  48:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  4c:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  50:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  54:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>
  58:	0c 94 43 00 	jmp	0x86	; 0x86 <__bad_interrupt>

0000005c <__ctors_end>:
  5c:	11 24       	eor	r1, r1
  5e:	1f be       	out	0x3f, r1	; 63
  60:	cf ef       	ldi	r28, 0xFF	; 255
  62:	d4 e0       	ldi	r29, 0x04	; 4
  64:	de bf       	out	0x3e, r29	; 62
  66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
  68:	11 e0       	ldi	r17, 0x01	; 1
  6a:	a0 e0       	ldi	r26, 0x00	; 0
  6c:	b1 e0       	ldi	r27, 0x01	; 1
  6e:	e8 e0       	ldi	r30, 0x08	; 8
  70:	f1 e0       	ldi	r31, 0x01	; 1
  72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
  74:	05 90       	lpm	r0, Z+
  76:	0d 92       	st	X+, r0
  78:	ae 30       	cpi	r26, 0x0E	; 14
  7a:	b1 07       	cpc	r27, r17
  7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>
  7e:	0e 94 45 00 	call	0x8a	; 0x8a <main>
  82:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000086 <__bad_interrupt>:
  86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008a <main>:
 */ 

#include <avr/io.h>

int main(void)
{
  8a:	cf 93       	push	r28
  8c:	df 93       	push	r29
  8e:	cd b7       	in	r28, 0x3d	; 61
  90:	de b7       	in	r29, 0x3e	; 62
  92:	2d 97       	sbiw	r28, 0x0d	; 13
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	f8 94       	cli
  98:	de bf       	out	0x3e, r29	; 62
  9a:	0f be       	out	0x3f, r0	; 63
  9c:	cd bf       	out	0x3d, r28	; 61
	//unsigned char dataset[] = 'GRADE-A';
	unsigned char csb[] = "CHECKSUMBYTE";				//checksumbyte
  9e:	8d e0       	ldi	r24, 0x0D	; 13
  a0:	e0 e0       	ldi	r30, 0x00	; 0
  a2:	f1 e0       	ldi	r31, 0x01	; 1
  a4:	de 01       	movw	r26, r28
  a6:	11 96       	adiw	r26, 0x01	; 1
  a8:	01 90       	ld	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	8a 95       	dec	r24
  ae:	e1 f7       	brne	.-8      	; 0xa8 <main+0x1e>
	//}
	
	sum = 'G'+'R'+'A'+'D'+'E'+'-'+'A';					//summing the dataset
	sum = ~(sum) + 1;									//2s compliment
	
	EEAR = 0x50;										//setting address to 0050 in EEPROM
  b0:	80 e5       	ldi	r24, 0x50	; 80
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	92 bd       	out	0x22, r25	; 34
  b6:	81 bd       	out	0x21, r24	; 33
	EEDR = sum;											//storing sum
  b8:	8f e2       	ldi	r24, 0x2F	; 47
  ba:	80 bd       	out	0x20, r24	; 32
	EECR = 1<<EEMWE;									//enabling write enables
  bc:	84 e0       	ldi	r24, 0x04	; 4
  be:	8f bb       	out	0x1f, r24	; 31
	EECR = 1<<EEWE;
  c0:	82 e0       	ldi	r24, 0x02	; 2
  c2:	8f bb       	out	0x1f, r24	; 31
  c4:	fe 01       	movw	r30, r28
  c6:	31 96       	adiw	r30, 0x01	; 1
  c8:	ae 01       	movw	r20, r28
  ca:	42 5f       	subi	r20, 0xF2	; 242
  cc:	5f 4f       	sbci	r21, 0xFF	; 255
		while(EECR&(EEWE<<1)){								//clearing master write enable each time 
		}
		
		EEAR++;											//increment address pointer
		EEDR = csb[i];									//store each character of string
		EECR = 1<<EEMWE;								//enabling write enables
  ce:	34 e0       	ldi	r19, 0x04	; 4
		EECR = 1<<EEWE;
  d0:	22 e0       	ldi	r18, 0x02	; 2
	EEDR = sum;											//storing sum
	EECR = 1<<EEMWE;									//enabling write enables
	EECR = 1<<EEWE;
	
	while(i < sizeof(csb)){				//loop through each letter in the dataset
		while(EECR&(EEWE<<1)){								//clearing master write enable each time 
  d2:	f9 99       	sbic	0x1f, 1	; 31
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <main+0x48>
		}
		
		EEAR++;											//increment address pointer
  d6:	81 b5       	in	r24, 0x21	; 33
  d8:	92 b5       	in	r25, 0x22	; 34
  da:	01 96       	adiw	r24, 0x01	; 1
  dc:	92 bd       	out	0x22, r25	; 34
  de:	81 bd       	out	0x21, r24	; 33
		EEDR = csb[i];									//store each character of string
  e0:	81 91       	ld	r24, Z+
  e2:	80 bd       	out	0x20, r24	; 32
		EECR = 1<<EEMWE;								//enabling write enables
  e4:	3f bb       	out	0x1f, r19	; 31
		EECR = 1<<EEWE;
  e6:	2f bb       	out	0x1f, r18	; 31
	EEAR = 0x50;										//setting address to 0050 in EEPROM
	EEDR = sum;											//storing sum
	EECR = 1<<EEMWE;									//enabling write enables
	EECR = 1<<EEWE;
	
	while(i < sizeof(csb)){				//loop through each letter in the dataset
  e8:	e4 17       	cp	r30, r20
  ea:	f5 07       	cpc	r31, r21
  ec:	91 f7       	brne	.-28     	; 0xd2 <main+0x48>
		i++;
	}
	
    /* Replace with your application code */
    
}
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	2d 96       	adiw	r28, 0x0d	; 13
  f4:	0f b6       	in	r0, 0x3f	; 63
  f6:	f8 94       	cli
  f8:	de bf       	out	0x3e, r29	; 62
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	cd bf       	out	0x3d, r28	; 61
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
